{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","memmap","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=5bea1544c3546581","-C","extra-filename=-5bea1544c3546581","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--extern","fs2=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libfs2-224be039f0e5b5f7.rmeta","--extern","kernel32=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libkernel32-8f8d1e3afea61a13.rmeta","--extern","libc=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/liblibc-e39463c6afe14535.rmeta","--extern","winapi=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libwinapi-6d12d0a46ef88b03.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libmemmap-5bea1544c3546581.rmeta"},"prelude":{"crate_id":{"name":"memmap","disambiguator":[3907043592898758125,17520172343171276334]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","num":18,"id":{"name":"libc","disambiguator":[12211130183356822035,9476985101973045270]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":0,"byte_end":28173,"line_start":1,"line_end":820,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":0,"byte_end":28173,"line_start":1,"line_end":820,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":110},{"krate":0,"index":126},{"krate":0,"index":125},{"krate":0,"index":123},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":47},{"krate":0,"index":128},{"krate":0,"index":142},{"krate":0,"index":141},{"krate":0,"index":139},{"krate":0,"index":137},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":74},{"krate":0,"index":78},{"krate":0,"index":91},{"krate":0,"index":95},{"krate":0,"index":108},{"krate":0,"index":109}],"decl_id":null,"docs":" A cross-platform Rust API for memory maps.\n","sig":null,"attributes":[{"value":"/ A cross-platform Rust API for memory maps.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":0,"byte_end":46,"line_start":1,"line_end":1,"column_start":1,"column_end":47}},{"value":"deny(warnings)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":48,"byte_end":66,"line_start":3,"line_end":3,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":111},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":739,"byte_end":743,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"name":"Read","qualname":"::Protection::Read","value":"Protection::Read","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" A read-only memory map. Writes to the memory map will result in a panic.\n","sig":null,"attributes":[{"value":"/ A read-only memory map. Writes to the memory map will result in a panic.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":658,"byte_end":734,"line_start":31,"line_end":31,"column_start":5,"column_end":81}}]},{"kind":"TupleVariant","id":{"krate":0,"index":113},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":908,"byte_end":917,"line_start":36,"line_end":36,"column_start":5,"column_end":14},"name":"ReadWrite","qualname":"::Protection::ReadWrite","value":"Protection::ReadWrite","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" A read-write memory map. Writes to the memory map will be reflected in\n the file after a call to `Mmap::flush` or after the `Mmap` is dropped.\n","sig":null,"attributes":[{"value":"/ A read-write memory map. Writes to the memory map will be reflected in","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":750,"byte_end":824,"line_start":34,"line_end":34,"column_start":5,"column_end":79}},{"value":"/ the file after a call to `Mmap::flush` or after the `Mmap` is dropped.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":829,"byte_end":903,"line_start":35,"line_end":35,"column_start":5,"column_end":79}}]},{"kind":"TupleVariant","id":{"krate":0,"index":115},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1167,"byte_end":1175,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"name":"ReadCopy","qualname":"::Protection::ReadCopy","value":"Protection::ReadCopy","parent":{"krate":0,"index":110},"children":[],"decl_id":null,"docs":" A read, copy-on-write memory map. Writes to the memory map will not be\n carried through to the underlying file. It is unspecified whether\n changes made to the file after the memory map is created will be\n visible.\n","sig":null,"attributes":[{"value":"/ A read, copy-on-write memory map. Writes to the memory map will not be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":924,"byte_end":998,"line_start":38,"line_end":38,"column_start":5,"column_end":79}},{"value":"/ carried through to the underlying file. It is unspecified whether","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1003,"byte_end":1072,"line_start":39,"line_end":39,"column_start":5,"column_end":74}},{"value":"/ changes made to the file after the memory map is created will be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1077,"byte_end":1145,"line_start":40,"line_end":40,"column_start":5,"column_end":73}},{"value":"/ visible.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1150,"byte_end":1162,"line_start":41,"line_end":41,"column_start":5,"column_end":17}}]},{"kind":"Enum","id":{"krate":0,"index":110},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":640,"byte_end":650,"line_start":29,"line_end":29,"column_start":10,"column_end":20},"name":"Protection","qualname":"::Protection","value":"pub enum Protection {\n\n    /// A read-only memory map. Writes to the memory map will result in a panic.\n    Read,\n\n    /// A read-write memory map. Writes to the memory map will be reflected in\n    /// the file after a call to `Mmap::flush` or after the `Mmap` is dropped.\n    ReadWrite,\n\n    /// A read, copy-on-write memory map. Writes to the memory map will not be\n    /// carried through to the underlying file. It is unspecified whether\n    /// changes made to the file after the memory map is created will be\n    /// visible.\n    ReadCopy,\n}","parent":null,"children":[{"krate":0,"index":111},{"krate":0,"index":113},{"krate":0,"index":115}],"decl_id":null,"docs":" Memory map protection.","sig":null,"attributes":[{"value":"/ Memory map protection.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":366,"byte_end":392,"line_start":23,"line_end":23,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":393,"byte_end":396,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ Determines how a memory map may be used. If the memory map is backed by a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":397,"byte_end":474,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/ file, then the file must have permissions corresponding to the operations","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":475,"byte_end":552,"line_start":26,"line_end":26,"column_start":1,"column_end":78}},{"value":"/ the protection level allows.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":553,"byte_end":585,"line_start":27,"line_end":27,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1454,"byte_end":1459,"line_start":56,"line_end":56,"column_start":12,"column_end":17},"name":"write","qualname":"<Protection>::write","value":"pub fn write(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `Protection` is writable.\n","sig":null,"attributes":[{"value":"/ Returns `true` if the `Protection` is writable.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1391,"byte_end":1442,"line_start":55,"line_end":55,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":128},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1671,"byte_end":1682,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"MmapOptions","qualname":"::MmapOptions","value":"MmapOptions { stack }","parent":null,"children":[{"krate":0,"index":129}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":129},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1839,"byte_end":1844,"line_start":69,"line_end":69,"column_start":9,"column_end":14},"name":"stack","qualname":"::MmapOptions::stack","value":"bool","parent":{"krate":0,"index":128},"children":[],"decl_id":null,"docs":" Indicates that the memory map should be suitable for a stack.","sig":null,"attributes":[{"value":"/ Indicates that the memory map should be suitable for a stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1689,"byte_end":1754,"line_start":66,"line_end":66,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1759,"byte_end":1762,"line_start":67,"line_end":67,"column_start":5,"column_end":8}},{"value":"/ This option should only be used with anonymous memory maps.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1767,"byte_end":1830,"line_start":68,"line_end":68,"column_start":5,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":50},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2856,"byte_end":2860,"line_start":95,"line_end":95,"column_start":12,"column_end":16},"name":"Mmap","qualname":"::Mmap","value":"Mmap {  }","parent":null,"children":[{"krate":0,"index":51}],"decl_id":null,"docs":" A memory-mapped buffer.","sig":null,"attributes":[{"value":"/ A memory-mapped buffer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1855,"byte_end":1882,"line_start":72,"line_end":72,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1883,"byte_end":1886,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ A file-backed `Mmap` buffer may be used to read or write data to a file. Use","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1887,"byte_end":1967,"line_start":74,"line_end":74,"column_start":1,"column_end":81}},{"value":"/ `Mmap::open(..)` to create a file-backed memory map. An anonymous `Mmap`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1968,"byte_end":2044,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/ buffer may be used any place that an in-memory byte buffer is needed, and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2045,"byte_end":2122,"line_start":76,"line_end":76,"column_start":1,"column_end":78}},{"value":"/ gives the added features of a memory map. Use `Mmap::anonymous(..)` to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2123,"byte_end":2197,"line_start":77,"line_end":77,"column_start":1,"column_end":75}},{"value":"/ create an anonymous memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2198,"byte_end":2233,"line_start":78,"line_end":78,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2234,"byte_end":2237,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ Changes written to a memory-mapped file are not guaranteed to be durable","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2238,"byte_end":2314,"line_start":80,"line_end":80,"column_start":1,"column_end":77}},{"value":"/ until the memory map is flushed, or it is dropped.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2315,"byte_end":2369,"line_start":81,"line_end":81,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2370,"byte_end":2373,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2374,"byte_end":2381,"line_start":83,"line_end":83,"column_start":1,"column_end":8}},{"value":"/ use std::io::Write;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2382,"byte_end":2405,"line_start":84,"line_end":84,"column_start":1,"column_end":24}},{"value":"/ use memmap::{Mmap, Protection};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2406,"byte_end":2441,"line_start":85,"line_end":85,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2442,"byte_end":2445,"line_start":86,"line_end":86,"column_start":1,"column_end":4}},{"value":"/ let file_mmap = Mmap::open_path(\"README.md\", Protection::Read).unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2446,"byte_end":2522,"line_start":87,"line_end":87,"column_start":1,"column_end":77}},{"value":"/ let bytes: &[u8] = unsafe { file_mmap.as_slice() };","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2523,"byte_end":2578,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/ assert_eq!(b\"# memmap\", &bytes[0..8]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2579,"byte_end":2621,"line_start":89,"line_end":89,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2622,"byte_end":2625,"line_start":90,"line_end":90,"column_start":1,"column_end":4}},{"value":"/ let mut anon_mmap = Mmap::anonymous(4096, Protection::ReadWrite).unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2626,"byte_end":2704,"line_start":91,"line_end":91,"column_start":1,"column_end":79}},{"value":"/ unsafe { anon_mmap.as_mut_slice() }.write(b\"foo\").unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2705,"byte_end":2768,"line_start":92,"line_end":92,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(b\"foo\\0\\0\", unsafe { &anon_mmap.as_slice()[0..5] });","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2769,"byte_end":2836,"line_start":93,"line_end":93,"column_start":1,"column_end":68}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2837,"byte_end":2844,"line_start":94,"line_end":94,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3115,"byte_end":3119,"line_start":105,"line_end":105,"column_start":12,"column_end":16},"name":"open","qualname":"<Mmap>::open","value":"pub fn open(&File, Protection) -> Result<Mmap>","parent":null,"children":[],"decl_id":null,"docs":" Opens a file-backed memory map.","sig":null,"attributes":[{"value":"/ Opens a file-backed memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2904,"byte_end":2939,"line_start":101,"line_end":101,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2944,"byte_end":2947,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ The file must be opened with read permissions, and write permissions if","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2952,"byte_end":3027,"line_start":103,"line_end":103,"column_start":5,"column_end":80}},{"value":"/ the supplied protection is `ReadWrite`. The file must not be empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3032,"byte_end":3103,"line_start":104,"line_end":104,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3406,"byte_end":3415,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"open_path","qualname":"<Mmap>::open_path","value":"pub fn open_path<P>(P, Protection) -> Result<Mmap> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Opens a file-backed memory map.","sig":null,"attributes":[{"value":"/ Opens a file-backed memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3315,"byte_end":3350,"line_start":110,"line_end":110,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3355,"byte_end":3358,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ The file must not be empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3363,"byte_end":3394,"line_start":112,"line_end":112,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3990,"byte_end":4006,"line_start":125,"line_end":125,"column_start":12,"column_end":28},"name":"open_with_offset","qualname":"<Mmap>::open_with_offset","value":"pub fn open_with_offset(&File, Protection, usize, usize) -> Result<Mmap>","parent":null,"children":[],"decl_id":null,"docs":" Opens a file-backed memory map with the specified offset and length.","sig":null,"attributes":[{"value":"/ Opens a file-backed memory map with the specified offset and length.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3696,"byte_end":3768,"line_start":120,"line_end":120,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3773,"byte_end":3776,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ The file must be opened with read permissions, and write permissions if","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3781,"byte_end":3856,"line_start":122,"line_end":122,"column_start":5,"column_end":80}},{"value":"/ the supplied protection is `ReadWrite`. The file must not be empty. The","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3861,"byte_end":3936,"line_start":123,"line_end":123,"column_start":5,"column_end":80}},{"value":"/ length must be greater than zero.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":3941,"byte_end":3978,"line_start":124,"line_end":124,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4362,"byte_end":4371,"line_start":135,"line_end":135,"column_start":12,"column_end":21},"name":"anonymous","qualname":"<Mmap>::anonymous","value":"pub fn anonymous(usize, Protection) -> Result<Mmap>","parent":null,"children":[],"decl_id":null,"docs":" Opens an anonymous memory map.","sig":null,"attributes":[{"value":"/ Opens an anonymous memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4262,"byte_end":4296,"line_start":132,"line_end":132,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4301,"byte_end":4304,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ The length must be greater than zero.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4309,"byte_end":4350,"line_start":134,"line_end":134,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4625,"byte_end":4647,"line_start":142,"line_end":142,"column_start":12,"column_end":34},"name":"anonymous_with_options","qualname":"<Mmap>::anonymous_with_options","value":"pub fn anonymous_with_options(usize, Protection, MmapOptions) -> Result<Mmap>","parent":null,"children":[],"decl_id":null,"docs":" Opens an anonymous memory map with the provided options.","sig":null,"attributes":[{"value":"/ Opens an anonymous memory map with the provided options.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4499,"byte_end":4559,"line_start":139,"line_end":139,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4564,"byte_end":4567,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ The length must be greater than zero.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4572,"byte_end":4613,"line_start":141,"line_end":141,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5194,"byte_end":5199,"line_start":153,"line_end":153,"column_start":12,"column_end":17},"name":"flush","qualname":"<Mmap>::flush","value":"pub fn flush(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flushes outstanding memory map modifications to disk.","sig":null,"attributes":[{"value":"/ Flushes outstanding memory map modifications to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4881,"byte_end":4938,"line_start":148,"line_end":148,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4943,"byte_end":4946,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ When this returns with a non-error result, all outstanding changes to a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":4951,"byte_end":5026,"line_start":150,"line_end":150,"column_start":5,"column_end":80}},{"value":"/ file-backed memory map are guaranteed to be durably stored. The file's","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5031,"byte_end":5105,"line_start":151,"line_end":151,"column_start":5,"column_end":79}},{"value":"/ metadata (including last modification timestamp) may not be updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5110,"byte_end":5182,"line_start":152,"line_end":152,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5632,"byte_end":5643,"line_start":163,"line_end":163,"column_start":12,"column_end":23},"name":"flush_async","qualname":"<Mmap>::flush_async","value":"pub fn flush_async(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously flushes outstanding memory map modifications to disk.","sig":null,"attributes":[{"value":"/ Asynchronously flushes outstanding memory map modifications to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5301,"byte_end":5373,"line_start":158,"line_end":158,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5378,"byte_end":5381,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ This method initiates flushing modified pages to durable storage, but it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5386,"byte_end":5462,"line_start":160,"line_end":160,"column_start":5,"column_end":81}},{"value":"/ will not wait for the operation to complete before returning. The file's","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5467,"byte_end":5543,"line_start":161,"line_end":161,"column_start":5,"column_end":81}},{"value":"/ metadata (including last modification timestamp) may not be updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5548,"byte_end":5620,"line_start":162,"line_end":162,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6323,"byte_end":6334,"line_start":178,"line_end":178,"column_start":12,"column_end":23},"name":"flush_range","qualname":"<Mmap>::flush_range","value":"pub fn flush_range(&mut Self, usize, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flushes outstanding memory map modifications in the range to disk.","sig":null,"attributes":[{"value":"/ Flushes outstanding memory map modifications in the range to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5751,"byte_end":5821,"line_start":168,"line_end":168,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5826,"byte_end":5829,"line_start":169,"line_end":169,"column_start":5,"column_end":8}},{"value":"/ The offset and length must be in the bounds of the mmap.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5834,"byte_end":5894,"line_start":170,"line_end":170,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5899,"byte_end":5902,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ When this returns with a non-error result, all outstanding changes to a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5907,"byte_end":5982,"line_start":172,"line_end":172,"column_start":5,"column_end":80}},{"value":"/ file-backed memory in the range are guaranteed to be durable stored. The","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":5987,"byte_end":6063,"line_start":173,"line_end":173,"column_start":5,"column_end":81}},{"value":"/ file's metadata (including last modification timestamp) may not be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6068,"byte_end":6138,"line_start":174,"line_end":174,"column_start":5,"column_end":75}},{"value":"/ updated. It is not guaranteed the only the changes in the specified","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6143,"byte_end":6214,"line_start":175,"line_end":175,"column_start":5,"column_end":76}},{"value":"/ range are flushed; other outstanding changes to the mmap may be flushed","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6219,"byte_end":6294,"line_start":176,"line_end":176,"column_start":5,"column_end":80}},{"value":"/ as well.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6299,"byte_end":6311,"line_start":177,"line_end":177,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":66},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7034,"byte_end":7051,"line_start":193,"line_end":193,"column_start":12,"column_end":29},"name":"flush_async_range","qualname":"<Mmap>::flush_async_range","value":"pub fn flush_async_range(&mut Self, usize, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously flushes outstanding memory map modifications in the range\n to disk.","sig":null,"attributes":[{"value":"/ Asynchronously flushes outstanding memory map modifications in the range","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6438,"byte_end":6514,"line_start":182,"line_end":182,"column_start":5,"column_end":81}},{"value":"/ to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6519,"byte_end":6531,"line_start":183,"line_end":183,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6536,"byte_end":6539,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ The offset and length must be in the bounds of the mmap.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6544,"byte_end":6604,"line_start":185,"line_end":185,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6609,"byte_end":6612,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ This method initiates flushing modified pages to durable storage, but it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6617,"byte_end":6693,"line_start":187,"line_end":187,"column_start":5,"column_end":81}},{"value":"/ will not wait for the operation to complete before returning. The file's","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6698,"byte_end":6774,"line_start":188,"line_end":188,"column_start":5,"column_end":81}},{"value":"/ metadata (including last modification timestamp) may not be updated. It","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6779,"byte_end":6854,"line_start":189,"line_end":189,"column_start":5,"column_end":80}},{"value":"/ is not guaranteed that the only changes flushed are those in the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6859,"byte_end":6927,"line_start":190,"line_end":190,"column_start":5,"column_end":73}},{"value":"/ specified range; other outstanding changes to the mmap may be flushed as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":6932,"byte_end":7008,"line_start":191,"line_end":191,"column_start":5,"column_end":81}},{"value":"/ well.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7013,"byte_end":7022,"line_start":192,"line_end":192,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":67},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7214,"byte_end":7217,"line_start":198,"line_end":198,"column_start":12,"column_end":15},"name":"len","qualname":"<Mmap>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the memory map.\n","sig":null,"attributes":[{"value":"/ Returns the length of the memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7161,"byte_end":7202,"line_start":197,"line_end":197,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":68},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7434,"byte_end":7437,"line_start":206,"line_end":206,"column_start":12,"column_end":15},"name":"ptr","qualname":"<Mmap>::ptr","value":"pub fn ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7272,"byte_end":7315,"line_start":202,"line_end":202,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7320,"byte_end":7323,"line_start":203,"line_end":203,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_slice` for invariants that must hold when dereferencing","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7328,"byte_end":7401,"line_start":204,"line_end":204,"column_start":5,"column_end":78}},{"value":"/ the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7406,"byte_end":7422,"line_start":205,"line_end":205,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7662,"byte_end":7669,"line_start":214,"line_end":214,"column_start":12,"column_end":19},"name":"mut_ptr","qualname":"<Mmap>::mut_ptr","value":"pub fn mut_ptr(&mut Self) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7496,"byte_end":7539,"line_start":210,"line_end":210,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7544,"byte_end":7547,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_mut_slice` for invariants that must hold when","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7552,"byte_end":7615,"line_start":212,"line_end":212,"column_start":5,"column_end":68}},{"value":"/ dereferencing the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7620,"byte_end":7650,"line_start":213,"line_end":213,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7921,"byte_end":7929,"line_start":223,"line_end":223,"column_start":19,"column_end":27},"name":"as_slice","qualname":"<Mmap>::as_slice","value":"pub unsafe fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as an immutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as an immutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7734,"byte_end":7791,"line_start":218,"line_end":218,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7796,"byte_end":7799,"line_start":219,"line_end":219,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7804,"byte_end":7819,"line_start":220,"line_end":220,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7824,"byte_end":7827,"line_start":221,"line_end":221,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently modified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":7832,"byte_end":7902,"line_start":222,"line_end":222,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8197,"byte_end":8209,"line_start":232,"line_end":232,"column_start":19,"column_end":31},"name":"as_mut_slice","qualname":"<Mmap>::as_mut_slice","value":"pub unsafe fn as_mut_slice(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as a mutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8013,"byte_end":8067,"line_start":227,"line_end":227,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8072,"byte_end":8075,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8080,"byte_end":8095,"line_start":229,"line_end":229,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8100,"byte_end":8103,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently accessed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8108,"byte_end":8178,"line_start":231,"line_end":231,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":72},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8370,"byte_end":8379,"line_start":237,"line_end":237,"column_start":12,"column_end":21},"name":"into_view","qualname":"<Mmap>::into_view","value":"pub fn into_view(Self) -> MmapView","parent":null,"children":[],"decl_id":null,"docs":" Creates a splittable mmap view from the mmap.\n","sig":null,"attributes":[{"value":"/ Creates a splittable mmap view from the mmap.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8309,"byte_end":8358,"line_start":236,"line_end":236,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":73},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8632,"byte_end":8646,"line_start":245,"line_end":245,"column_start":12,"column_end":26},"name":"into_view_sync","qualname":"<Mmap>::into_view_sync","value":"pub fn into_view_sync(Self) -> MmapViewSync","parent":null,"children":[],"decl_id":null,"docs":" Creates a thread-safe splittable mmap view from the mmap.\n","sig":null,"attributes":[{"value":"/ Creates a thread-safe splittable mmap view from the mmap.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8559,"byte_end":8620,"line_start":244,"line_end":244,"column_start":5,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":74},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9026,"byte_end":9034,"line_start":259,"line_end":259,"column_start":12,"column_end":20},"name":"MmapView","qualname":"::MmapView","value":"MmapView {  }","parent":null,"children":[{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77}],"decl_id":null,"docs":" A view of a memory map.","sig":null,"attributes":[{"value":"/ A view of a memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8841,"byte_end":8868,"line_start":253,"line_end":253,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8869,"byte_end":8872,"line_start":254,"line_end":254,"column_start":1,"column_end":4}},{"value":"/ The view may be split into disjoint ranges, each of which will share the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8873,"byte_end":8949,"line_start":255,"line_end":255,"column_start":1,"column_end":77}},{"value":"/ underlying memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8950,"byte_end":8976,"line_start":256,"line_end":256,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8977,"byte_end":8980,"line_start":257,"line_end":257,"column_start":1,"column_end":4}},{"value":"/ A mmap view is not cloneable.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":8981,"byte_end":9014,"line_start":258,"line_end":258,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9278,"byte_end":9286,"line_start":270,"line_end":270,"column_start":12,"column_end":20},"name":"split_at","qualname":"<MmapView>::split_at","value":"pub fn split_at(Self, usize) -> Result<(MmapView, MmapView)>","parent":null,"children":[],"decl_id":null,"docs":" Split the view into disjoint pieces at the specified offset.","sig":null,"attributes":[{"value":"/ Split the view into disjoint pieces at the specified offset.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9129,"byte_end":9193,"line_start":267,"line_end":267,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9198,"byte_end":9201,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ The provided offset must be less than the view's length.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9206,"byte_end":9266,"line_start":269,"line_end":269,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":10085,"byte_end":10093,"line_start":288,"line_end":288,"column_start":12,"column_end":20},"name":"restrict","qualname":"<MmapView>::restrict","value":"pub fn restrict(&mut Self, usize, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Restricts the range of the view to the provided offset and length.","sig":null,"attributes":[{"value":"/ Restricts the range of the view to the provided offset and length.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9891,"byte_end":9961,"line_start":284,"line_end":284,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9966,"byte_end":9969,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ The provided range must be a subset of the current range","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9974,"byte_end":10034,"line_start":286,"line_end":286,"column_start":5,"column_end":65}},{"value":"/ (`offset + len < view.len()`).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":10039,"byte_end":10073,"line_start":287,"line_end":287,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11327,"byte_end":11332,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"flush","qualname":"<MmapView>::flush","value":"pub fn flush(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flushes outstanding view modifications to disk.","sig":null,"attributes":[{"value":"/ Flushes outstanding view modifications to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11007,"byte_end":11058,"line_start":319,"line_end":319,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11063,"byte_end":11066,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ When this returns with a non-error result, all outstanding changes to a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11071,"byte_end":11146,"line_start":321,"line_end":321,"column_start":5,"column_end":80}},{"value":"/ file-backed memory map view are guaranteed to be durably stored. The","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11151,"byte_end":11223,"line_start":322,"line_end":322,"column_start":5,"column_end":77}},{"value":"/ file's metadata (including last modification timestamp) may not be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11228,"byte_end":11298,"line_start":323,"line_end":323,"column_start":5,"column_end":75}},{"value":"/ updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11303,"byte_end":11315,"line_start":324,"line_end":324,"column_start":5,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11775,"byte_end":11786,"line_start":335,"line_end":335,"column_start":12,"column_end":23},"name":"flush_async","qualname":"<MmapView>::flush_async","value":"pub fn flush_async(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously flushes outstanding memory map view modifications to\n disk.","sig":null,"attributes":[{"value":"/ Asynchronously flushes outstanding memory map view modifications to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11431,"byte_end":11502,"line_start":329,"line_end":329,"column_start":5,"column_end":76}},{"value":"/ disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11507,"byte_end":11516,"line_start":330,"line_end":330,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11521,"byte_end":11524,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ This method initiates flushing modified pages to durable storage, but it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11529,"byte_end":11605,"line_start":332,"line_end":332,"column_start":5,"column_end":81}},{"value":"/ will not wait for the operation to complete before returning. The file's","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11610,"byte_end":11686,"line_start":333,"line_end":333,"column_start":5,"column_end":81}},{"value":"/ metadata (including last modification timestamp) may not be updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11691,"byte_end":11763,"line_start":334,"line_end":334,"column_start":5,"column_end":77}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11949,"byte_end":11952,"line_start":340,"line_end":340,"column_start":12,"column_end":15},"name":"len","qualname":"<MmapView>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the memory map view.\n","sig":null,"attributes":[{"value":"/ Returns the length of the memory map view.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11891,"byte_end":11937,"line_start":339,"line_end":339,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12168,"byte_end":12171,"line_start":348,"line_end":348,"column_start":12,"column_end":15},"name":"ptr","qualname":"<MmapView>::ptr","value":"pub fn ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a shared pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":11999,"byte_end":12049,"line_start":344,"line_end":344,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12054,"byte_end":12057,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_slice` for invariants that must hold when dereferencing","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12062,"byte_end":12135,"line_start":346,"line_end":346,"column_start":5,"column_end":78}},{"value":"/ the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12140,"byte_end":12156,"line_start":347,"line_end":347,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12446,"byte_end":12453,"line_start":356,"line_end":356,"column_start":12,"column_end":19},"name":"mut_ptr","qualname":"<MmapView>::mut_ptr","value":"pub fn mut_ptr(&mut Self) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12272,"byte_end":12323,"line_start":352,"line_end":352,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12328,"byte_end":12331,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_mut_slice` for invariants that must hold when","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12336,"byte_end":12399,"line_start":354,"line_end":354,"column_start":5,"column_end":68}},{"value":"/ dereferencing the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12404,"byte_end":12434,"line_start":355,"line_end":355,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12751,"byte_end":12759,"line_start":365,"line_end":365,"column_start":19,"column_end":27},"name":"as_slice","qualname":"<MmapView>::as_slice","value":"pub unsafe fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as an immutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as an immutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12564,"byte_end":12621,"line_start":360,"line_end":360,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12626,"byte_end":12629,"line_start":361,"line_end":361,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12634,"byte_end":12649,"line_start":362,"line_end":362,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12654,"byte_end":12657,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently modified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12662,"byte_end":12732,"line_start":364,"line_end":364,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13043,"byte_end":13055,"line_start":374,"line_end":374,"column_start":19,"column_end":31},"name":"as_mut_slice","qualname":"<MmapView>::as_mut_slice","value":"pub unsafe fn as_mut_slice(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as a mutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12859,"byte_end":12913,"line_start":369,"line_end":369,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12918,"byte_end":12921,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12926,"byte_end":12941,"line_start":371,"line_end":371,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12946,"byte_end":12949,"line_start":372,"line_end":372,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently accessed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":12954,"byte_end":13024,"line_start":373,"line_end":373,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13387,"byte_end":13392,"line_start":382,"line_end":382,"column_start":19,"column_end":24},"name":"clone","qualname":"<MmapView>::clone","value":"pub unsafe fn clone(&Self) -> MmapView","parent":null,"children":[],"decl_id":null,"docs":" Clones the view of the memory map.","sig":null,"attributes":[{"value":"/ Clones the view of the memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13175,"byte_end":13213,"line_start":378,"line_end":378,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13218,"byte_end":13221,"line_start":379,"line_end":379,"column_start":5,"column_end":8}},{"value":"/ The underlying memory map is shared, and thus the caller must ensure that the memory","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13226,"byte_end":13314,"line_start":380,"line_end":380,"column_start":5,"column_end":93}},{"value":"/ underlying the view is not illegally aliased.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13319,"byte_end":13368,"line_start":381,"line_end":381,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13748,"byte_end":13760,"line_start":397,"line_end":397,"column_start":12,"column_end":24},"name":"MmapViewSync","qualname":"::MmapViewSync","value":"MmapViewSync {  }","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94}],"decl_id":null,"docs":" A thread-safe view of a memory map.","sig":null,"attributes":[{"value":"/ A thread-safe view of a memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13551,"byte_end":13590,"line_start":391,"line_end":391,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13591,"byte_end":13594,"line_start":392,"line_end":392,"column_start":1,"column_end":4}},{"value":"/ The view may be split into disjoint ranges, each of which will share the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13595,"byte_end":13671,"line_start":393,"line_end":393,"column_start":1,"column_end":77}},{"value":"/ underlying memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13672,"byte_end":13698,"line_start":394,"line_end":394,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13699,"byte_end":13702,"line_start":395,"line_end":395,"column_start":1,"column_end":4}},{"value":"/ A mmap view is not cloneable.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13703,"byte_end":13736,"line_start":396,"line_end":396,"column_start":1,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":14009,"byte_end":14017,"line_start":408,"line_end":408,"column_start":12,"column_end":20},"name":"split_at","qualname":"<MmapViewSync>::split_at","value":"pub fn split_at(Self, usize) -> Result<(MmapViewSync, MmapViewSync)>","parent":null,"children":[],"decl_id":null,"docs":" Split the view into disjoint pieces at the specified offset.","sig":null,"attributes":[{"value":"/ Split the view into disjoint pieces at the specified offset.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13860,"byte_end":13924,"line_start":405,"line_end":405,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13929,"byte_end":13932,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ The provided offset must be less than the view's length.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13937,"byte_end":13997,"line_start":407,"line_end":407,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":14849,"byte_end":14857,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"restrict","qualname":"<MmapViewSync>::restrict","value":"pub fn restrict(&mut Self, usize, usize) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Restricts the range of this view to the provided offset and length.","sig":null,"attributes":[{"value":"/ Restricts the range of this view to the provided offset and length.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":14662,"byte_end":14733,"line_start":422,"line_end":422,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":14738,"byte_end":14741,"line_start":423,"line_end":423,"column_start":5,"column_end":8}},{"value":"/ The provided range must be a subset of the current range (`offset + len < view.len()`).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":14746,"byte_end":14837,"line_start":424,"line_end":424,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16075,"byte_end":16080,"line_start":459,"line_end":459,"column_start":12,"column_end":17},"name":"flush","qualname":"<MmapViewSync>::flush","value":"pub fn flush(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Flushes outstanding view modifications to disk.","sig":null,"attributes":[{"value":"/ Flushes outstanding view modifications to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":15763,"byte_end":15814,"line_start":454,"line_end":454,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":15819,"byte_end":15822,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ When this returns with a non-error result, all outstanding changes to a file-backed memory","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":15827,"byte_end":15921,"line_start":456,"line_end":456,"column_start":5,"column_end":99}},{"value":"/ map view are guaranteed to be durably stored. The file's metadata (including last","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":15926,"byte_end":16011,"line_start":457,"line_end":457,"column_start":5,"column_end":90}},{"value":"/ modification timestamp) may not be updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16016,"byte_end":16063,"line_start":458,"line_end":458,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16515,"byte_end":16526,"line_start":468,"line_end":468,"column_start":12,"column_end":23},"name":"flush_async","qualname":"<MmapViewSync>::flush_async","value":"pub fn flush_async(&mut Self) -> Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Asynchronously flushes outstanding memory map view modifications to disk.","sig":null,"attributes":[{"value":"/ Asynchronously flushes outstanding memory map view modifications to disk.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16179,"byte_end":16256,"line_start":463,"line_end":463,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16261,"byte_end":16264,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ This method initiates flushing modified pages to durable storage, but it will not wait","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16269,"byte_end":16359,"line_start":465,"line_end":465,"column_start":5,"column_end":95}},{"value":"/ for the operation to complete before returning. The file's metadata (including last","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16364,"byte_end":16451,"line_start":466,"line_end":466,"column_start":5,"column_end":92}},{"value":"/ modification timestamp) may not be updated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16456,"byte_end":16503,"line_start":467,"line_end":467,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16689,"byte_end":16692,"line_start":473,"line_end":473,"column_start":12,"column_end":15},"name":"len","qualname":"<MmapViewSync>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the memory map view.\n","sig":null,"attributes":[{"value":"/ Returns the length of the memory map view.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16631,"byte_end":16677,"line_start":472,"line_end":472,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16900,"byte_end":16903,"line_start":480,"line_end":480,"column_start":12,"column_end":15},"name":"ptr","qualname":"<MmapViewSync>::ptr","value":"pub fn ptr(&Self) -> *const u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a shared pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a shared pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16739,"byte_end":16789,"line_start":477,"line_end":477,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16794,"byte_end":16797,"line_start":478,"line_end":478,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_slice` for invariants that must hold when dereferencing the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":16802,"byte_end":16888,"line_start":479,"line_end":479,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17170,"byte_end":17177,"line_start":487,"line_end":487,"column_start":12,"column_end":19},"name":"mut_ptr","qualname":"<MmapViewSync>::mut_ptr","value":"pub fn mut_ptr(&mut Self) -> *mut u8","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the mapped memory.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the mapped memory.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17004,"byte_end":17055,"line_start":484,"line_end":484,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17060,"byte_end":17063,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ See `Mmap::as_mut_slice` for invariants that must hold when dereferencing the pointer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17068,"byte_end":17158,"line_start":486,"line_end":486,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17475,"byte_end":17483,"line_start":496,"line_end":496,"column_start":19,"column_end":27},"name":"as_slice","qualname":"<MmapViewSync>::as_slice","value":"pub unsafe fn as_slice(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as an immutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as an immutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17288,"byte_end":17345,"line_start":491,"line_end":491,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17350,"byte_end":17353,"line_start":492,"line_end":492,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17358,"byte_end":17373,"line_start":493,"line_end":493,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17378,"byte_end":17381,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently modified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17386,"byte_end":17456,"line_start":495,"line_end":495,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17767,"byte_end":17779,"line_start":505,"line_end":505,"column_start":19,"column_end":31},"name":"as_mut_slice","qualname":"<MmapViewSync>::as_mut_slice","value":"pub unsafe fn as_mut_slice(&mut Self) -> &mut [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns the memory mapped file as a mutable slice.","sig":null,"attributes":[{"value":"/ Returns the memory mapped file as a mutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17583,"byte_end":17637,"line_start":500,"line_end":500,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17642,"byte_end":17645,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ## Unsafety","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17650,"byte_end":17665,"line_start":502,"line_end":502,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17670,"byte_end":17673,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ The caller must ensure that the file is not concurrently accessed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17678,"byte_end":17748,"line_start":504,"line_end":504,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18111,"byte_end":18116,"line_start":513,"line_end":513,"column_start":19,"column_end":24},"name":"clone","qualname":"<MmapViewSync>::clone","value":"pub unsafe fn clone(&Self) -> MmapViewSync","parent":null,"children":[],"decl_id":null,"docs":" Clones the view of the memory map.","sig":null,"attributes":[{"value":"/ Clones the view of the memory map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17899,"byte_end":17937,"line_start":509,"line_end":509,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17942,"byte_end":17945,"line_start":510,"line_end":510,"column_start":5,"column_end":8}},{"value":"/ The underlying memory map is shared, and thus the caller must ensure that the memory","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":17950,"byte_end":18038,"line_start":511,"line_end":511,"column_start":5,"column_end":93}},{"value":"/ underlying the view is not illegally aliased.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18043,"byte_end":18092,"line_start":512,"line_end":512,"column_start":5,"column_end":54}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":28310,"byte_end":28320,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":13},{"krate":0,"index":14}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":29259,"byte_end":29270,"line_start":40,"line_end":40,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":29478,"byte_end":29487,"line_start":53,"line_end":53,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":32598,"byte_end":32607,"line_start":146,"line_end":146,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":30}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":32979,"byte_end":32988,"line_start":157,"line_end":157,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":33014,"byte_end":33023,"line_start":158,"line_end":158,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1185,"byte_end":1195,"line_start":45,"line_end":45,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2892,"byte_end":2896,"line_start":99,"line_end":99,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":55},{"krate":0,"index":58},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9113,"byte_end":9121,"line_start":265,"line_end":265,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13840,"byte_end":13852,"line_start":403,"line_end":403,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18304,"byte_end":18316,"line_start":522,"line_end":522,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18341,"byte_end":18353,"line_start":523,"line_end":523,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":28310,"byte_end":28320,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":29259,"byte_end":29270,"line_start":40,"line_end":40,"column_start":6,"column_end":17},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":128},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":29478,"byte_end":29487,"line_start":53,"line_end":53,"column_start":6,"column_end":15},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":18},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":32598,"byte_end":32607,"line_start":146,"line_end":146,"column_start":15,"column_end":24},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":32979,"byte_end":32988,"line_start":157,"line_end":157,"column_start":22,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/unix.rs","byte_start":33014,"byte_end":33023,"line_start":158,"line_end":158,"column_start":22,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":18},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":1185,"byte_end":1195,"line_start":45,"line_end":45,"column_start":6,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":110},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":2892,"byte_end":2896,"line_start":99,"line_end":99,"column_start":6,"column_end":10},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":50},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":9113,"byte_end":9121,"line_start":265,"line_end":265,"column_start":6,"column_end":14},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":74},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":13840,"byte_end":13852,"line_start":403,"line_end":403,"column_start":6,"column_end":18},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":91},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18304,"byte_end":18316,"line_start":522,"line_end":522,"column_start":22,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/memmap-0.2.3/src/lib.rs","byte_start":18341,"byte_end":18353,"line_start":523,"line_end":523,"column_start":22,"column_end":34},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":2074}}]}