{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","byteorder","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=3cce95bd8543f4fa","-C","extra-filename=-3cce95bd8543f4fa","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libbyteorder-3cce95bd8543f4fa.rmeta"},"prelude":{"crate_id":{"name":"byteorder","disambiguator":[12289848276216109201,1369720591497021851]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":0,"byte_end":26742,"line_start":1,"line_end":779,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":27},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1429,"byte_end":1441,"line_start":48,"line_end":48,"column_start":15,"column_end":27},"alias_span":null,"name":"ReadBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":68},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1443,"byte_end":1456,"line_start":48,"line_end":48,"column_start":29,"column_end":42},"alias_span":null,"name":"WriteBytesExt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1458,"byte_end":1463,"line_start":48,"line_end":48,"column_start":44,"column_end":49},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":16},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1465,"byte_end":1471,"line_start":48,"line_end":48,"column_start":51,"column_end":57},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":0,"byte_end":26742,"line_start":1,"line_end":779,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":132},{"krate":0,"index":143}],"decl_id":null,"docs":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","sig":null,"attributes":[{"value":"*\nThis crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.\n\nThe organization of the crate is pretty simple. A trait, `ByteOrder`, specifies\nbyte conversion methods for each type of number in Rust (sans numbers that have\na platform dependent size like `usize` and `isize`). Two types, `BigEndian`\nand `LittleEndian` implement these methods. Finally, `ReadBytesExt` and\n`WriteBytesExt` provide convenience methods available to all types that\nimplement `Read` and `Write`.\n\n# Examples\n\nRead unsigned 16 bit big-endian integers from a `Read` type:\n\n```rust\nuse std::io::Cursor;\nuse byteorder::{BigEndian, ReadBytesExt};\n\nlet mut rdr = Cursor::new(vec![2, 5, 3, 0]);\n// Note that we use type parameters to indicate which kind of byte order\n// we want!\nassert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());\nassert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());\n```\n\nWrite unsigned 16 bit little-endian integers to a `Write` type:\n\n```rust\nuse byteorder::{LittleEndian, WriteBytesExt};\n\nlet mut wtr = vec![];\nwtr.write_u16::<LittleEndian>(517).unwrap();\nwtr.write_u16::<LittleEndian>(768).unwrap();\nassert_eq!(wtr, vec![5, 2, 0, 3]);\n```\n*/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":0,"byte_end":1199,"line_start":1,"line_end":37,"column_start":1,"column_end":3}},{"value":"crate_name = \"byteorder\"","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1201,"byte_end":1229,"line_start":39,"line_end":39,"column_start":1,"column_end":29}},{"value":"deny(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":1298,"byte_end":1320,"line_start":42,"line_end":42,"column_start":1,"column_end":23}}]},{"kind":"Type","id":{"krate":0,"index":16},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26890,"byte_end":26896,"line_start":9,"line_end":9,"column_start":10,"column_end":16},"name":"Result","qualname":"::new::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A short-hand for `result::Result<T, byteorder::Error>`.\n","sig":null,"attributes":[{"value":"/ A short-hand for `result::Result<T, byteorder::Error>`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26821,"byte_end":26880,"line_start":8,"line_end":8,"column_start":1,"column_end":60}}]},{"kind":"TupleVariant","id":{"krate":0,"index":155},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27411,"byte_end":27424,"line_start":24,"line_end":24,"column_start":5,"column_end":18},"name":"UnexpectedEOF","qualname":"::new::Error::UnexpectedEOF","value":"Error::UnexpectedEOF","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" An unexpected EOF.","sig":null,"attributes":[{"value":"/ An unexpected EOF.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27234,"byte_end":27256,"line_start":20,"line_end":20,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27261,"byte_end":27264,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ This occurs when a call to the underlying reader returns `0` bytes,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27269,"byte_end":27340,"line_start":22,"line_end":22,"column_start":5,"column_end":76}},{"value":"/ but more bytes are required to decode a meaningful value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27345,"byte_end":27406,"line_start":23,"line_end":23,"column_start":5,"column_end":66}}]},{"kind":"TupleVariant","id":{"krate":0,"index":157},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27495,"byte_end":27497,"line_start":26,"line_end":26,"column_start":5,"column_end":7},"name":"Io","qualname":"::new::Error::Io","value":"Error::Io(io::Error)","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Any underlying IO error that occurs while reading bytes.\n","sig":null,"attributes":[{"value":"/ Any underlying IO error that occurs while reading bytes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27430,"byte_end":27490,"line_start":25,"line_end":25,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27222,"byte_end":27227,"line_start":19,"line_end":19,"column_start":10,"column_end":15},"name":"Error","qualname":"::new::Error","value":"pub enum Error {\n\n    /// An unexpected EOF.\n    ///\n    /// This occurs when a call to the underlying reader returns `0` bytes,\n    /// but more bytes are required to decode a meaningful value.\n    UnexpectedEOF,\n\n    /// Any underlying IO error that occurs while reading bytes.\n    Io(io::Error),\n}","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":157}],"decl_id":null,"docs":" An error type for reading bytes.","sig":null,"attributes":[{"value":"/ An error type for reading bytes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26929,"byte_end":26965,"line_start":11,"line_end":11,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26966,"byte_end":26969,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is a thin wrapper over the standard `io::Error` type. Namely, it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":26970,"byte_end":27043,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ adds one additional error case: an unexpected EOF.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27044,"byte_end":27098,"line_start":14,"line_end":14,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27099,"byte_end":27102,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ Note that this error is also used for the `write` methods to keep things","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27103,"byte_end":27179,"line_start":16,"line_end":16,"column_start":1,"column_end":77}},{"value":"/ consistent.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27180,"byte_end":27195,"line_start":17,"line_end":17,"column_start":1,"column_end":16}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29212,"byte_end":29224,"line_start":86,"line_end":86,"column_start":11,"column_end":23},"name":"ReadBytesExt","qualname":"::new::ReadBytesExt","value":"ReadBytesExt: io::Read","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":30},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":56},{"krate":0,"index":59}],"decl_id":null,"docs":" Extends `Read` with methods for reading numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends `Read` with methods for reading numbers. (For `std::io`.)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28554,"byte_end":28623,"line_start":68,"line_end":68,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28624,"byte_end":28627,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28628,"byte_end":28706,"line_start":70,"line_end":70,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28707,"byte_end":28785,"line_start":71,"line_end":71,"column_start":1,"column_end":79}},{"value":"/ the `BigEndian` or `LittleEndian` types defined in this crate.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28786,"byte_end":28852,"line_start":72,"line_end":72,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28853,"byte_end":28856,"line_start":73,"line_end":73,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28857,"byte_end":28871,"line_start":74,"line_end":74,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28872,"byte_end":28875,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Read unsigned 16 bit big-endian integers from a `Read`:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28876,"byte_end":28935,"line_start":76,"line_end":76,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28936,"byte_end":28939,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28940,"byte_end":28951,"line_start":78,"line_end":78,"column_start":1,"column_end":12}},{"value":"/ use std::io::Cursor;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28952,"byte_end":28976,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/ use byteorder::{BigEndian, ReadBytesExt};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28977,"byte_end":29022,"line_start":80,"line_end":80,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29023,"byte_end":29026,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ let mut rdr = Cursor::new(vec![2, 5, 3, 0]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29027,"byte_end":29075,"line_start":82,"line_end":82,"column_start":1,"column_end":49}},{"value":"/ assert_eq!(517, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29076,"byte_end":29134,"line_start":83,"line_end":83,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(768, rdr.read_u16::<BigEndian>().unwrap());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29135,"byte_end":29193,"line_start":84,"line_end":84,"column_start":1,"column_end":59}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29194,"byte_end":29201,"line_start":85,"line_end":85,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29461,"byte_end":29468,"line_start":92,"line_end":92,"column_start":8,"column_end":15},"name":"read_u8","qualname":"::new::ReadBytesExt::read_u8","value":"pub fn read_u8(&mut Self) -> Result<u8>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads an unsigned 8 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29241,"byte_end":29304,"line_start":87,"line_end":87,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29309,"byte_end":29312,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29317,"byte_end":29388,"line_start":89,"line_end":89,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29393,"byte_end":29439,"line_start":90,"line_end":90,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29444,"byte_end":29453,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29814,"byte_end":29821,"line_start":103,"line_end":103,"column_start":8,"column_end":15},"name":"read_i8","qualname":"::new::ReadBytesExt::read_i8","value":"pub fn read_i8(&mut Self) -> Result<i8>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 8 bit integer from the underlying reader.","sig":null,"attributes":[{"value":"/ Reads a signed 8 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29597,"byte_end":29657,"line_start":98,"line_end":98,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29662,"byte_end":29665,"line_start":99,"line_end":99,"column_start":5,"column_end":8}},{"value":"/ Note that since this reads a single byte, no byte order conversions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29670,"byte_end":29741,"line_start":100,"line_end":100,"column_start":5,"column_end":76}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29746,"byte_end":29792,"line_start":101,"line_end":101,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29797,"byte_end":29806,"line_start":102,"line_end":102,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30042,"byte_end":30050,"line_start":111,"line_end":111,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::new::ReadBytesExt::read_u16","value":"pub fn read_u16<T: ByteOrder>(&mut Self) -> Result<u16>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29956,"byte_end":30020,"line_start":109,"line_end":109,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30025,"byte_end":30034,"line_start":110,"line_end":110,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":35},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30288,"byte_end":30296,"line_start":119,"line_end":119,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::new::ReadBytesExt::read_i16","value":"pub fn read_i16<T: ByteOrder>(&mut Self) -> Result<i16>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30205,"byte_end":30266,"line_start":117,"line_end":117,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30271,"byte_end":30280,"line_start":118,"line_end":118,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":38},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30537,"byte_end":30545,"line_start":127,"line_end":127,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::new::ReadBytesExt::read_u32","value":"pub fn read_u32<T: ByteOrder>(&mut Self) -> Result<u32>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30451,"byte_end":30515,"line_start":125,"line_end":125,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30520,"byte_end":30529,"line_start":126,"line_end":126,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":41},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30783,"byte_end":30791,"line_start":135,"line_end":135,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::new::ReadBytesExt::read_i32","value":"pub fn read_i32<T: ByteOrder>(&mut Self) -> Result<i32>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30700,"byte_end":30761,"line_start":133,"line_end":133,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30766,"byte_end":30775,"line_start":134,"line_end":134,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31032,"byte_end":31040,"line_start":143,"line_end":143,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::new::ReadBytesExt::read_u64","value":"pub fn read_u64<T: ByteOrder>(&mut Self) -> Result<u64>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":30946,"byte_end":31010,"line_start":141,"line_end":141,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31015,"byte_end":31024,"line_start":142,"line_end":142,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31278,"byte_end":31286,"line_start":151,"line_end":151,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::new::ReadBytesExt::read_i64","value":"pub fn read_i64<T: ByteOrder>(&mut Self) -> Result<i64>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31195,"byte_end":31256,"line_start":149,"line_end":149,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31261,"byte_end":31270,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31528,"byte_end":31537,"line_start":159,"line_end":159,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::new::ReadBytesExt::read_uint","value":"pub fn read_uint<T: ByteOrder>(&mut Self, usize) -> Result<u64>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31441,"byte_end":31506,"line_start":157,"line_end":157,"column_start":5,"column_end":70}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31511,"byte_end":31520,"line_start":158,"line_end":158,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31820,"byte_end":31828,"line_start":167,"line_end":167,"column_start":8,"column_end":16},"name":"read_int","qualname":"::new::ReadBytesExt::read_int","value":"pub fn read_int<T: ByteOrder>(&mut Self, usize) -> Result<i64>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31736,"byte_end":31798,"line_start":165,"line_end":165,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":31803,"byte_end":31812,"line_start":166,"line_end":166,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32152,"byte_end":32160,"line_start":176,"line_end":176,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::new::ReadBytesExt::read_f32","value":"pub fn read_f32<T: ByteOrder>(&mut Self) -> Result<f32>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32026,"byte_end":32099,"line_start":173,"line_end":173,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32104,"byte_end":32130,"line_start":174,"line_end":174,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32135,"byte_end":32144,"line_start":175,"line_end":175,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32441,"byte_end":32449,"line_start":185,"line_end":185,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::new::ReadBytesExt::read_f64","value":"pub fn read_f64<T: ByteOrder>(&mut Self) -> Result<f64>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number from\n the underlying reader.\n","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32315,"byte_end":32388,"line_start":182,"line_end":182,"column_start":5,"column_end":78}},{"value":"/ the underlying reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32393,"byte_end":32419,"line_start":183,"line_end":183,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32424,"byte_end":32433,"line_start":184,"line_end":184,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":68},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33908,"byte_end":33921,"line_start":231,"line_end":231,"column_start":11,"column_end":24},"name":"WriteBytesExt","qualname":"::new::WriteBytesExt","value":"WriteBytesExt: io::Write","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":92},{"krate":0,"index":95},{"krate":0,"index":98}],"decl_id":null,"docs":" Extends `Write` with methods for writing numbers. (For `std::io`.)","sig":null,"attributes":[{"value":"/ Extends `Write` with methods for writing numbers. (For `std::io`.)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33283,"byte_end":33353,"line_start":213,"line_end":213,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33354,"byte_end":33357,"line_start":214,"line_end":214,"column_start":1,"column_end":4}},{"value":"/ Most of the methods defined here have an unconstrained type parameter that","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33358,"byte_end":33436,"line_start":215,"line_end":215,"column_start":1,"column_end":79}},{"value":"/ must be explicitly instantiated. Typically, it is instantiated with either","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33437,"byte_end":33515,"line_start":216,"line_end":216,"column_start":1,"column_end":79}},{"value":"/ the `BigEndian` or `LittleEndian` types defined in this crate.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33516,"byte_end":33582,"line_start":217,"line_end":217,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33583,"byte_end":33586,"line_start":218,"line_end":218,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33587,"byte_end":33601,"line_start":219,"line_end":219,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33602,"byte_end":33605,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ Write unsigned 16 bit big-endian integers to a `Write`:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33606,"byte_end":33665,"line_start":221,"line_end":221,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33666,"byte_end":33669,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33670,"byte_end":33681,"line_start":223,"line_end":223,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{BigEndian, WriteBytesExt};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33682,"byte_end":33728,"line_start":224,"line_end":224,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33729,"byte_end":33732,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ let mut wtr = vec![];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33733,"byte_end":33758,"line_start":226,"line_end":226,"column_start":1,"column_end":26}},{"value":"/ wtr.write_u16::<BigEndian>(517).unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33759,"byte_end":33804,"line_start":227,"line_end":227,"column_start":1,"column_end":46}},{"value":"/ wtr.write_u16::<BigEndian>(768).unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33805,"byte_end":33850,"line_start":228,"line_end":228,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(wtr, vec![2, 5, 3, 0]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33851,"byte_end":33889,"line_start":229,"line_end":229,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33890,"byte_end":33897,"line_start":230,"line_end":230,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34159,"byte_end":34167,"line_start":237,"line_end":237,"column_start":8,"column_end":16},"name":"write_u8","qualname":"::new::WriteBytesExt::write_u8","value":"pub fn write_u8(&mut Self, u8) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes an unsigned 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned 8 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33939,"byte_end":34001,"line_start":232,"line_end":232,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34006,"byte_end":34009,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34014,"byte_end":34086,"line_start":234,"line_end":234,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34091,"byte_end":34137,"line_start":235,"line_end":235,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34142,"byte_end":34151,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34460,"byte_end":34468,"line_start":246,"line_end":246,"column_start":8,"column_end":16},"name":"write_i8","qualname":"::new::WriteBytesExt::write_i8","value":"pub fn write_i8(&mut Self, i8) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a signed 8 bit integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed 8 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34243,"byte_end":34302,"line_start":241,"line_end":241,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34307,"byte_end":34310,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Note that since this writes a single byte, no byte order conversions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34315,"byte_end":34387,"line_start":243,"line_end":243,"column_start":5,"column_end":77}},{"value":"/ are used. It is included for completeness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34392,"byte_end":34438,"line_start":244,"line_end":244,"column_start":5,"column_end":51}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34443,"byte_end":34452,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34635,"byte_end":34644,"line_start":252,"line_end":252,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::new::WriteBytesExt::write_u16","value":"pub fn write_u16<T: ByteOrder>(&mut Self, u16) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34550,"byte_end":34613,"line_start":250,"line_end":250,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34618,"byte_end":34627,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34882,"byte_end":34891,"line_start":260,"line_end":260,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::new::WriteBytesExt::write_i16","value":"pub fn write_i16<T: ByteOrder>(&mut Self, i16) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34800,"byte_end":34860,"line_start":258,"line_end":258,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":34865,"byte_end":34874,"line_start":259,"line_end":259,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35132,"byte_end":35141,"line_start":268,"line_end":268,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::new::WriteBytesExt::write_u32","value":"pub fn write_u32<T: ByteOrder>(&mut Self, u32) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35047,"byte_end":35110,"line_start":266,"line_end":266,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35115,"byte_end":35124,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35379,"byte_end":35388,"line_start":276,"line_end":276,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::new::WriteBytesExt::write_i32","value":"pub fn write_i32<T: ByteOrder>(&mut Self, i32) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35297,"byte_end":35357,"line_start":274,"line_end":274,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35362,"byte_end":35371,"line_start":275,"line_end":275,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35629,"byte_end":35638,"line_start":284,"line_end":284,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::new::WriteBytesExt::write_u64","value":"pub fn write_u64<T: ByteOrder>(&mut Self, u64) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35544,"byte_end":35607,"line_start":282,"line_end":282,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35612,"byte_end":35621,"line_start":283,"line_end":283,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35876,"byte_end":35885,"line_start":292,"line_end":292,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::new::WriteBytesExt::write_i64","value":"pub fn write_i64<T: ByteOrder>(&mut Self, i64) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer to the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35794,"byte_end":35854,"line_start":290,"line_end":290,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":35859,"byte_end":35868,"line_start":291,"line_end":291,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36280,"byte_end":36290,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::new::WriteBytesExt::write_uint","value":"pub fn write_uint<T: ByteOrder>(&mut Self, u64, usize) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes an unsigned n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes an unsigned n-bytes integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36041,"byte_end":36105,"line_start":298,"line_end":298,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36110,"byte_end":36113,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36118,"byte_end":36193,"line_start":300,"line_end":300,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36198,"byte_end":36258,"line_start":301,"line_end":301,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36263,"byte_end":36272,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36748,"byte_end":36757,"line_start":318,"line_end":318,"column_start":8,"column_end":17},"name":"write_int","qualname":"::new::WriteBytesExt::write_int","value":"pub fn write_int<T: ByteOrder>(&mut Self, i64, usize) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a signed n-bytes integer to the underlying writer.","sig":null,"attributes":[{"value":"/ Writes a signed n-bytes integer to the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36512,"byte_end":36573,"line_start":313,"line_end":313,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36578,"byte_end":36581,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ If the given integer is not representable in the given number of bytes,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36586,"byte_end":36661,"line_start":315,"line_end":315,"column_start":5,"column_end":80}},{"value":"/ this method panics. If `nbytes > 8`, this method panics.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36666,"byte_end":36726,"line_start":316,"line_end":316,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36731,"byte_end":36740,"line_start":317,"line_end":317,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37103,"byte_end":37112,"line_start":331,"line_end":331,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::new::WriteBytesExt::write_f32","value":"pub fn write_f32<T: ByteOrder>(&mut Self, f32) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":36978,"byte_end":37050,"line_start":328,"line_end":328,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37055,"byte_end":37081,"line_start":329,"line_end":329,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37086,"byte_end":37095,"line_start":330,"line_end":330,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37393,"byte_end":37402,"line_start":340,"line_end":340,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::new::WriteBytesExt::write_f64","value":"pub fn write_f64<T: ByteOrder>(&mut Self, f64) -> Result<()>","parent":{"krate":0,"index":68},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number to\n the underlying writer.\n","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37268,"byte_end":37340,"line_start":337,"line_end":337,"column_start":5,"column_end":77}},{"value":"/ the underlying writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37345,"byte_end":37371,"line_start":338,"line_end":338,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37376,"byte_end":37385,"line_start":339,"line_end":339,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":106},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3037,"byte_end":3046,"line_start":116,"line_end":116,"column_start":11,"column_end":20},"name":"ByteOrder","qualname":"::ByteOrder","value":"ByteOrder","parent":null,"children":[{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126}],"decl_id":null,"docs":" ByteOrder describes types that can serialize integers as bytes.","sig":null,"attributes":[{"value":"/ ByteOrder describes types that can serialize integers as bytes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2113,"byte_end":2180,"line_start":86,"line_end":86,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2181,"byte_end":2184,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ Note that `Self` does not appear anywhere in this trait's definition!","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2185,"byte_end":2258,"line_start":88,"line_end":88,"column_start":1,"column_end":74}},{"value":"/ Therefore, in order to use it, you'll need to use syntax like","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2259,"byte_end":2324,"line_start":89,"line_end":89,"column_start":1,"column_end":66}},{"value":"/ `T::read_u16(&[0, 1])` where `T` implements `ByteOrder`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2325,"byte_end":2385,"line_start":90,"line_end":90,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2386,"byte_end":2389,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ This crate provides two types that implement `ByteOrder`: `BigEndian`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2390,"byte_end":2463,"line_start":92,"line_end":92,"column_start":1,"column_end":74}},{"value":"/ and `LittleEndian`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2464,"byte_end":2487,"line_start":93,"line_end":93,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2488,"byte_end":2491,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2492,"byte_end":2506,"line_start":95,"line_end":95,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2507,"byte_end":2510,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ Write and read `u32` numbers in little endian order:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2511,"byte_end":2567,"line_start":97,"line_end":97,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2568,"byte_end":2571,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2572,"byte_end":2583,"line_start":99,"line_end":99,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, LittleEndian};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2584,"byte_end":2629,"line_start":100,"line_end":100,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2630,"byte_end":2633,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 4];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2634,"byte_end":2659,"line_start":102,"line_end":102,"column_start":1,"column_end":26}},{"value":"/ LittleEndian::write_u32(&mut buf, 1_000_000);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2660,"byte_end":2709,"line_start":103,"line_end":103,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(1_000_000, LittleEndian::read_u32(&buf));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2710,"byte_end":2766,"line_start":104,"line_end":104,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2767,"byte_end":2774,"line_start":105,"line_end":105,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2775,"byte_end":2778,"line_start":106,"line_end":106,"column_start":1,"column_end":4}},{"value":"/ Write and read `i16` numbers in big endian order:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2779,"byte_end":2832,"line_start":107,"line_end":107,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2833,"byte_end":2836,"line_start":108,"line_end":108,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2837,"byte_end":2848,"line_start":109,"line_end":109,"column_start":1,"column_end":12}},{"value":"/ use byteorder::{ByteOrder, BigEndian};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2849,"byte_end":2891,"line_start":110,"line_end":110,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2892,"byte_end":2895,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ let mut buf = [0; 2];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2896,"byte_end":2921,"line_start":112,"line_end":112,"column_start":1,"column_end":26}},{"value":"/ BigEndian::write_i16(&mut buf, -50_000);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2922,"byte_end":2966,"line_start":113,"line_end":113,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(-50_000, BigEndian::read_i16(&buf));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":2967,"byte_end":3018,"line_start":114,"line_end":114,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3019,"byte_end":3026,"line_start":115,"line_end":115,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3154,"byte_end":3162,"line_start":120,"line_end":120,"column_start":8,"column_end":16},"name":"read_u16","qualname":"::ByteOrder::read_u16","value":"pub fn read_u16(&[u8]) -> u16","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads an unsigned 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 16 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3053,"byte_end":3101,"line_start":117,"line_end":117,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3106,"byte_end":3109,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3114,"byte_end":3146,"line_start":119,"line_end":119,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":108},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3289,"byte_end":3297,"line_start":125,"line_end":125,"column_start":8,"column_end":16},"name":"read_u32","qualname":"::ByteOrder::read_u32","value":"pub fn read_u32(&[u8]) -> u32","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads an unsigned 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 32 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3188,"byte_end":3236,"line_start":122,"line_end":122,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3241,"byte_end":3244,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3249,"byte_end":3281,"line_start":124,"line_end":124,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3424,"byte_end":3432,"line_start":130,"line_end":130,"column_start":8,"column_end":16},"name":"read_u64","qualname":"::ByteOrder::read_u64","value":"pub fn read_u64(&[u8]) -> u64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads an unsigned 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned 64 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3323,"byte_end":3371,"line_start":127,"line_end":127,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3376,"byte_end":3379,"line_start":128,"line_end":128,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3384,"byte_end":3416,"line_start":129,"line_end":129,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3604,"byte_end":3613,"line_start":136,"line_end":136,"column_start":8,"column_end":17},"name":"read_uint","qualname":"::ByteOrder::read_uint","value":"pub fn read_uint(&[u8], usize) -> u64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads an unsigned n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads an unsigned n-bytes integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3458,"byte_end":3507,"line_start":132,"line_end":132,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3512,"byte_end":3515,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3520,"byte_end":3567,"line_start":134,"line_end":134,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3572,"byte_end":3596,"line_start":135,"line_end":135,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":111},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3758,"byte_end":3767,"line_start":141,"line_end":141,"column_start":8,"column_end":17},"name":"write_u16","qualname":"::ByteOrder::write_u16","value":"pub fn write_u16(&mut [u8], u16)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes an unsigned 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 16 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3654,"byte_end":3705,"line_start":138,"line_end":138,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3710,"byte_end":3713,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3718,"byte_end":3750,"line_start":140,"line_end":140,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3902,"byte_end":3911,"line_start":146,"line_end":146,"column_start":8,"column_end":17},"name":"write_u32","qualname":"::ByteOrder::write_u32","value":"pub fn write_u32(&mut [u8], u32)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes an unsigned 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 32 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3798,"byte_end":3849,"line_start":143,"line_end":143,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3854,"byte_end":3857,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3862,"byte_end":3894,"line_start":145,"line_end":145,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4046,"byte_end":4055,"line_start":151,"line_end":151,"column_start":8,"column_end":17},"name":"write_u64","qualname":"::ByteOrder::write_u64","value":"pub fn write_u64(&mut [u8], u64)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes an unsigned 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes an unsigned 64 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3942,"byte_end":3993,"line_start":148,"line_end":148,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":3998,"byte_end":4001,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4006,"byte_end":4038,"line_start":150,"line_end":150,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4273,"byte_end":4283,"line_start":157,"line_end":157,"column_start":8,"column_end":18},"name":"write_uint","qualname":"::ByteOrder::write_uint","value":"pub fn write_uint(&mut [u8], u64, usize)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes an unsigned integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes an unsigned integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4086,"byte_end":4150,"line_start":153,"line_end":153,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4155,"byte_end":4158,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4163,"byte_end":4237,"line_start":155,"line_end":155,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4242,"byte_end":4265,"line_start":156,"line_end":156,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":115},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4441,"byte_end":4449,"line_start":163,"line_end":163,"column_start":8,"column_end":16},"name":"read_i16","qualname":"::ByteOrder::read_i16","value":"pub fn read_i16(&[u8]) -> i16","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a signed 16 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 16 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4329,"byte_end":4374,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4379,"byte_end":4382,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4387,"byte_end":4419,"line_start":161,"line_end":161,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4424,"byte_end":4433,"line_start":162,"line_end":162,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4629,"byte_end":4637,"line_start":171,"line_end":171,"column_start":8,"column_end":16},"name":"read_i32","qualname":"::ByteOrder::read_i32","value":"pub fn read_i32(&[u8]) -> i32","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a signed 32 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 32 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4517,"byte_end":4562,"line_start":167,"line_end":167,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4567,"byte_end":4570,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4575,"byte_end":4607,"line_start":169,"line_end":169,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4612,"byte_end":4621,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":117},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4817,"byte_end":4825,"line_start":179,"line_end":179,"column_start":8,"column_end":16},"name":"read_i64","qualname":"::ByteOrder::read_i64","value":"pub fn read_i64(&[u8]) -> i64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a signed 64 bit integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed 64 bit integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4705,"byte_end":4750,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4755,"byte_end":4758,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4763,"byte_end":4795,"line_start":177,"line_end":177,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4800,"byte_end":4809,"line_start":178,"line_end":178,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":118},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5050,"byte_end":5058,"line_start":188,"line_end":188,"column_start":8,"column_end":16},"name":"read_int","qualname":"::ByteOrder::read_int","value":"pub fn read_int(&[u8], usize) -> i64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a signed n-bytes integer from `buf`.","sig":null,"attributes":[{"value":"/ Reads a signed n-bytes integer from `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4893,"byte_end":4939,"line_start":183,"line_end":183,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4944,"byte_end":4947,"line_start":184,"line_end":184,"column_start":5,"column_end":8}},{"value":"/ Panics when `nbytes < 1` or `nbytes > 8` or","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":4952,"byte_end":4999,"line_start":185,"line_end":185,"column_start":5,"column_end":52}},{"value":"/ `buf.len() < nbytes`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5004,"byte_end":5028,"line_start":186,"line_end":186,"column_start":5,"column_end":29}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5033,"byte_end":5042,"line_start":187,"line_end":187,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5300,"byte_end":5308,"line_start":196,"line_end":196,"column_start":8,"column_end":16},"name":"read_f32","qualname":"::ByteOrder::read_f32","value":"pub fn read_f32(&[u8]) -> f32","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5164,"byte_end":5233,"line_start":192,"line_end":192,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5238,"byte_end":5241,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5246,"byte_end":5278,"line_start":194,"line_end":194,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5283,"byte_end":5292,"line_start":195,"line_end":195,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":120},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5527,"byte_end":5535,"line_start":204,"line_end":204,"column_start":8,"column_end":16},"name":"read_f64","qualname":"::ByteOrder::read_f64","value":"pub fn read_f64(&[u8]) -> f64","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Reads a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Reads a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5391,"byte_end":5460,"line_start":200,"line_end":200,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5465,"byte_end":5468,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5473,"byte_end":5505,"line_start":202,"line_end":202,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5510,"byte_end":5519,"line_start":203,"line_end":203,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":121},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5733,"byte_end":5742,"line_start":212,"line_end":212,"column_start":8,"column_end":17},"name":"write_i16","qualname":"::ByteOrder::write_i16","value":"pub fn write_i16(&mut [u8], i16)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a signed 16 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 16 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5618,"byte_end":5666,"line_start":208,"line_end":208,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5671,"byte_end":5674,"line_start":209,"line_end":209,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 2`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5679,"byte_end":5711,"line_start":210,"line_end":210,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5716,"byte_end":5725,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5934,"byte_end":5943,"line_start":220,"line_end":220,"column_start":8,"column_end":17},"name":"write_i32","qualname":"::ByteOrder::write_i32","value":"pub fn write_i32(&mut [u8], i32)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a signed 32 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 32 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5819,"byte_end":5867,"line_start":216,"line_end":216,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5872,"byte_end":5875,"line_start":217,"line_end":217,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5880,"byte_end":5912,"line_start":218,"line_end":218,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":5917,"byte_end":5926,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":123},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6135,"byte_end":6144,"line_start":228,"line_end":228,"column_start":8,"column_end":17},"name":"write_i64","qualname":"::ByteOrder::write_i64","value":"pub fn write_i64(&mut [u8], i64)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a signed 64 bit integer `n` to `buf`.","sig":null,"attributes":[{"value":"/ Writes a signed 64 bit integer `n` to `buf`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6020,"byte_end":6068,"line_start":224,"line_end":224,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6073,"byte_end":6076,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6081,"byte_end":6113,"line_start":226,"line_end":226,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6118,"byte_end":6127,"line_start":227,"line_end":227,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6419,"byte_end":6428,"line_start":237,"line_end":237,"column_start":8,"column_end":17},"name":"write_int","qualname":"::ByteOrder::write_int","value":"pub fn write_int(&mut [u8], i64, usize)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a signed integer `n` to `buf` using only `nbytes`.","sig":null,"attributes":[{"value":"/ Writes a signed integer `n` to `buf` using only `nbytes`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6221,"byte_end":6282,"line_start":232,"line_end":232,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6287,"byte_end":6290,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ If `n` is not representable in `nbytes`, or if `nbytes` is `> 8`, then","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6295,"byte_end":6369,"line_start":234,"line_end":234,"column_start":5,"column_end":79}},{"value":"/ this method panics.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6374,"byte_end":6397,"line_start":235,"line_end":235,"column_start":5,"column_end":28}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6402,"byte_end":6411,"line_start":236,"line_end":236,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6682,"byte_end":6691,"line_start":245,"line_end":245,"column_start":8,"column_end":17},"name":"write_f32","qualname":"::ByteOrder::write_f32","value":"pub fn write_f32(&mut [u8], f32)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a IEEE754 single-precision (4 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 single-precision (4 bytes) floating point number.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6545,"byte_end":6615,"line_start":241,"line_end":241,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6620,"byte_end":6623,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 4`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6628,"byte_end":6660,"line_start":243,"line_end":243,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6665,"byte_end":6674,"line_start":244,"line_end":244,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6920,"byte_end":6929,"line_start":253,"line_end":253,"column_start":8,"column_end":17},"name":"write_f64","qualname":"::ByteOrder::write_f64","value":"pub fn write_f64(&mut [u8], f64)","parent":{"krate":0,"index":106},"children":[],"decl_id":null,"docs":" Writes a IEEE754 double-precision (8 bytes) floating point number.","sig":null,"attributes":[{"value":"/ Writes a IEEE754 double-precision (8 bytes) floating point number.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6783,"byte_end":6853,"line_start":249,"line_end":249,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6858,"byte_end":6861,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ Panics when `buf.len() < 8`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6866,"byte_end":6898,"line_start":251,"line_end":251,"column_start":5,"column_end":37}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":6903,"byte_end":6912,"line_start":252,"line_end":252,"column_start":5,"column_end":14}}]},{"kind":"Enum","id":{"krate":0,"index":127},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7200,"byte_end":7209,"line_start":262,"line_end":262,"column_start":49,"column_end":58},"name":"BigEndian","qualname":"::BigEndian","value":"pub enum BigEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines big-endian serialization.","sig":null,"attributes":[{"value":"/ Defines big-endian serialization.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7019,"byte_end":7056,"line_start":258,"line_end":258,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7057,"byte_end":7060,"line_start":259,"line_end":259,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7061,"byte_end":7135,"line_start":260,"line_end":260,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7136,"byte_end":7151,"line_start":261,"line_end":261,"column_start":1,"column_end":16}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7152,"byte_end":7190,"line_start":262,"line_end":262,"column_start":1,"column_end":39}}]},{"kind":"Enum","id":{"krate":0,"index":128},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7398,"byte_end":7410,"line_start":268,"line_end":268,"column_start":49,"column_end":61},"name":"LittleEndian","qualname":"::LittleEndian","value":"pub enum LittleEndian { }","parent":null,"children":[],"decl_id":null,"docs":" Defines little-endian serialization.","sig":null,"attributes":[{"value":"/ Defines little-endian serialization.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7214,"byte_end":7254,"line_start":264,"line_end":264,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7255,"byte_end":7258,"line_start":265,"line_end":265,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7259,"byte_end":7333,"line_start":266,"line_end":266,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7334,"byte_end":7349,"line_start":267,"line_end":267,"column_start":1,"column_end":16}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7350,"byte_end":7388,"line_start":268,"line_end":268,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":129},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7600,"byte_end":7612,"line_start":275,"line_end":275,"column_start":10,"column_end":22},"name":"NativeEndian","qualname":"::NativeEndian","value":"LittleEndian","parent":null,"children":[],"decl_id":null,"docs":" Defines system native-endian serialization.","sig":null,"attributes":[{"value":"/ Defines system native-endian serialization.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7415,"byte_end":7462,"line_start":270,"line_end":270,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7463,"byte_end":7466,"line_start":271,"line_end":271,"column_start":1,"column_end":4}},{"value":"/ Note that this type has no value constructor. It is used purely at the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7467,"byte_end":7541,"line_start":272,"line_end":272,"column_start":1,"column_end":75}},{"value":"/ type level.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7542,"byte_end":7557,"line_start":273,"line_end":273,"column_start":1,"column_end":16}},{"value":"cfg(target_endian = \"little\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":7558,"byte_end":7590,"line_start":274,"line_end":274,"column_start":1,"column_end":33}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27538,"byte_end":27543,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":19}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27630,"byte_end":27635,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27915,"byte_end":27920,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28165,"byte_end":28170,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":25},{"krate":0,"index":26}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32734,"byte_end":32735,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37692,"byte_end":37693,"line_start":349,"line_end":349,"column_start":47,"column_end":48},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":8457,"byte_end":8466,"line_start":304,"line_end":304,"column_start":20,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":9944,"byte_end":9956,"line_start":361,"line_end":361,"column_start":20,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":144},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27538,"byte_end":27543,"line_start":29,"line_end":29,"column_start":26,"column_end":31},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":154},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27630,"byte_end":27635,"line_start":33,"line_end":33,"column_start":26,"column_end":31},"kind":{"Impl":{"id":1}},"from":{"krate":1,"index":2785},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":27915,"byte_end":27920,"line_start":43,"line_end":43,"column_start":23,"column_end":28},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":154},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":28165,"byte_end":28170,"line_start":52,"line_end":52,"column_start":23,"column_end":28},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":154},"to":{"krate":1,"index":1751}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":29230,"byte_end":29234,"line_start":86,"line_end":86,"column_start":29,"column_end":33},"kind":"SuperTrait","from":{"krate":1,"index":3196},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":32734,"byte_end":32735,"line_start":194,"line_end":194,"column_start":45,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":63},"to":{"krate":0,"index":27}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":33927,"byte_end":33932,"line_start":231,"line_end":231,"column_start":30,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":3257},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/new.rs","byte_start":37692,"byte_end":37693,"line_start":349,"line_end":349,"column_start":47,"column_end":48},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":102},"to":{"krate":0,"index":68}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":8457,"byte_end":8466,"line_start":304,"line_end":304,"column_start":20,"column_end":29},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":127},"to":{"krate":0,"index":106}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/byteorder-0.4.2/src/lib.rs","byte_start":9944,"byte_end":9956,"line_start":361,"line_end":361,"column_start":20,"column_end":32},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":128},"to":{"krate":0,"index":106}}]}