{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","image","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"bmp\"","--cfg","feature=\"default\"","--cfg","feature=\"gif\"","--cfg","feature=\"gif_codec\"","--cfg","feature=\"ico\"","--cfg","feature=\"jpeg\"","--cfg","feature=\"png\"","--cfg","feature=\"png_codec\"","--cfg","feature=\"ppm\"","--cfg","feature=\"tga\"","--cfg","feature=\"tiff\"","--cfg","feature=\"webp\"","-C","metadata=b5fda23950f29988","-C","extra-filename=-b5fda23950f29988","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--extern","byteorder=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libbyteorder-3cce95bd8543f4fa.rmeta","--extern","enum_primitive=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libenum_primitive-b9b697092704be02.rmeta","--extern","gif=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libgif-a148acbb45146ab5.rmeta","--extern","glob=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libglob-ca4ed36fb909de11.rmeta","--extern","num=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libnum-1141a168d1df345e.rmeta","--extern","png=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libpng-a244f51d73913af5.rmeta","--cap-lints","allow","-L","native=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/miniz-sys-7d6826dd97f6dd50/out","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libimage-b5fda23950f29988.rmeta"},"prelude":{"crate_id":{"name":"image","disambiguator":[11174627109615700522,5447718451539716538]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":18,"id":{"name":"byteorder","disambiguator":[12289848276216109201,1369720591497021851]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":19,"id":{"name":"num","disambiguator":[16723509055593342059,190299314718485005]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":20,"id":{"name":"num_traits","disambiguator":[870466577841255129,13478256605891367024]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":21,"id":{"name":"num_integer","disambiguator":[13276579087369052800,13663960796768683638]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":22,"id":{"name":"num_iter","disambiguator":[993258475165615663,13736826989574935361]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":23,"id":{"name":"num_complex","disambiguator":[3062671098455844960,16649696466364840033]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":24,"id":{"name":"rustc_serialize","disambiguator":[17911034919332468352,14258196744612283311]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":25,"id":{"name":"num_bigint","disambiguator":[3427165466807514889,2435088450063240992]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":26,"id":{"name":"rand","disambiguator":[2681138644075121271,7886607485055903368]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":27,"id":{"name":"libc","disambiguator":[12211130183356822035,9476985101973045270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":28,"id":{"name":"num_rational","disambiguator":[12286271487378218204,10817775032505011637]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","num":29,"id":{"name":"enum_primitive","disambiguator":[6874540353356286357,1530514838788590602]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","num":30,"id":{"name":"png","disambiguator":[13595894482409648405,17395687234961626237]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","num":31,"id":{"name":"bitflags","disambiguator":[5656614714592619485,13367440640135249322]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","num":32,"id":{"name":"inflate","disambiguator":[11642679791107358065,4028962663860383318]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","num":33,"id":{"name":"flate2","disambiguator":[5934212303376939947,7114951448075655869]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","num":34,"id":{"name":"miniz_sys","disambiguator":[424789791439439413,506917666875451379]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","num":35,"id":{"name":"gif","disambiguator":[2865681018610207691,8578833257898127563]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","num":36,"id":{"name":"lzw","disambiguator":[13352340688120367435,6501147158707143189]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","num":37,"id":{"name":"color_quant","disambiguator":[11857391333499254392,3623758089037647263]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":0,"byte_end":2507,"line_start":1,"line_end":149,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":2470},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":393,"byte_end":402,"line_start":17,"line_end":17,"column_start":16,"column_end":25},"alias_span":null,"name":"ColorType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2471},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":420,"byte_end":424,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2472},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":420,"byte_end":424,"line_start":19,"line_end":19,"column_start":5,"column_end":9},"alias_span":null,"name":"Gray","value":"","parent":{"krate":0,"index":8}},{"kind":"Use","ref_id":{"krate":0,"index":2474},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":430,"byte_end":433,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2475},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":430,"byte_end":433,"line_start":20,"line_end":20,"column_start":5,"column_end":8},"alias_span":null,"name":"RGB","value":"","parent":{"krate":0,"index":9}},{"kind":"Use","ref_id":{"krate":0,"index":2477},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":439,"byte_end":446,"line_start":21,"line_end":21,"column_start":5,"column_end":12},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2478},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":439,"byte_end":446,"line_start":21,"line_end":21,"column_start":5,"column_end":12},"alias_span":null,"name":"Palette","value":"","parent":{"krate":0,"index":10}},{"kind":"Use","ref_id":{"krate":0,"index":2480},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":452,"byte_end":457,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2481},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":452,"byte_end":457,"line_start":22,"line_end":22,"column_start":5,"column_end":10},"alias_span":null,"name":"GrayA","value":"","parent":{"krate":0,"index":11}},{"kind":"Use","ref_id":{"krate":0,"index":2483},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":463,"byte_end":467,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2484},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":463,"byte_end":467,"line_start":23,"line_end":23,"column_start":5,"column_end":9},"alias_span":null,"name":"RGBA","value":"","parent":{"krate":0,"index":12}},{"kind":"Use","ref_id":{"krate":0,"index":2710},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":493,"byte_end":497,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2544},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":493,"byte_end":497,"line_start":27,"line_end":27,"column_start":5,"column_end":9},"alias_span":null,"name":"Luma","value":"","parent":{"krate":0,"index":14}},{"kind":"Use","ref_id":{"krate":0,"index":2766},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":503,"byte_end":508,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2636},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":503,"byte_end":508,"line_start":28,"line_end":28,"column_start":5,"column_end":10},"alias_span":null,"name":"LumaA","value":"","parent":{"krate":0,"index":15}},{"kind":"Use","ref_id":{"krate":0,"index":2682},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":514,"byte_end":517,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2498},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":514,"byte_end":517,"line_start":29,"line_end":29,"column_start":5,"column_end":8},"alias_span":null,"name":"Rgb","value":"","parent":{"krate":0,"index":16}},{"kind":"Use","ref_id":{"krate":0,"index":2738},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":523,"byte_end":527,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2590},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":523,"byte_end":527,"line_start":30,"line_end":30,"column_start":5,"column_end":9},"alias_span":null,"name":"Rgba","value":"","parent":{"krate":0,"index":17}},{"kind":"Use","ref_id":{"krate":0,"index":1296},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":553,"byte_end":565,"line_start":34,"line_end":34,"column_start":5,"column_end":17},"alias_span":null,"name":"ImageDecoder","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2344},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":571,"byte_end":581,"line_start":35,"line_end":35,"column_start":5,"column_end":15},"alias_span":null,"name":"ImageError","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1279},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":587,"byte_end":598,"line_start":36,"line_end":36,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageResult","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1350},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":604,"byte_end":612,"line_start":37,"line_end":37,"column_start":5,"column_end":13},"alias_span":null,"name":"SubImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1331},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":618,"byte_end":630,"line_start":38,"line_end":38,"column_start":5,"column_end":17},"alias_span":null,"name":"GenericImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1305},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":653,"byte_end":659,"line_start":40,"line_end":40,"column_start":5,"column_end":11},"alias_span":null,"name":"Pixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1318},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":665,"byte_end":674,"line_start":41,"line_end":41,"column_start":5,"column_end":14},"alias_span":null,"name":"MutPixels","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":697,"byte_end":707,"line_start":44,"line_end":44,"column_start":19,"column_end":29},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1915},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":725,"byte_end":733,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":725,"byte_end":733,"line_start":46,"line_end":46,"column_start":5,"column_end":13},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":28}},{"kind":"Use","ref_id":{"krate":0,"index":1913},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":739,"byte_end":746,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1914},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":739,"byte_end":746,"line_start":47,"line_end":47,"column_start":5,"column_end":12},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":29}},{"kind":"Use","ref_id":{"krate":0,"index":1917},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":752,"byte_end":762,"line_start":48,"line_end":48,"column_start":5,"column_end":15},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1918},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":752,"byte_end":762,"line_start":48,"line_end":48,"column_start":5,"column_end":15},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":30}},{"kind":"Use","ref_id":{"krate":0,"index":1919},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":768,"byte_end":776,"line_start":49,"line_end":49,"column_start":5,"column_end":13},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1920},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":768,"byte_end":776,"line_start":49,"line_end":49,"column_start":5,"column_end":13},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":31}},{"kind":"Use","ref_id":{"krate":0,"index":1921},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":782,"byte_end":790,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1922},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":782,"byte_end":790,"line_start":50,"line_end":50,"column_start":5,"column_end":13},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":32}},{"kind":"Use","ref_id":{"krate":0,"index":2365},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":810,"byte_end":821,"line_start":53,"line_end":53,"column_start":16,"column_end":27},"alias_span":null,"name":"ImageFormat","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2366},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":839,"byte_end":842,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2367},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":839,"byte_end":842,"line_start":55,"line_end":55,"column_start":5,"column_end":8},"alias_span":null,"name":"PNG","value":"","parent":{"krate":0,"index":35}},{"kind":"Use","ref_id":{"krate":0,"index":2368},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":848,"byte_end":852,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2369},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":848,"byte_end":852,"line_start":56,"line_end":56,"column_start":5,"column_end":9},"alias_span":null,"name":"JPEG","value":"","parent":{"krate":0,"index":36}},{"kind":"Use","ref_id":{"krate":0,"index":2370},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":858,"byte_end":861,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2371},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":858,"byte_end":861,"line_start":57,"line_end":57,"column_start":5,"column_end":8},"alias_span":null,"name":"GIF","value":"","parent":{"krate":0,"index":37}},{"kind":"Use","ref_id":{"krate":0,"index":2372},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":867,"byte_end":871,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2373},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":867,"byte_end":871,"line_start":58,"line_end":58,"column_start":5,"column_end":9},"alias_span":null,"name":"WEBP","value":"","parent":{"krate":0,"index":38}},{"kind":"Use","ref_id":{"krate":0,"index":2374},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":877,"byte_end":880,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"alias_span":null,"name":"PPM","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2375},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":877,"byte_end":880,"line_start":59,"line_end":59,"column_start":5,"column_end":8},"alias_span":null,"name":"PPM","value":"","parent":{"krate":0,"index":39}},{"kind":"Use","ref_id":{"krate":0,"index":2380},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":886,"byte_end":889,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2381},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":886,"byte_end":889,"line_start":60,"line_end":60,"column_start":5,"column_end":8},"alias_span":null,"name":"BMP","value":"","parent":{"krate":0,"index":40}},{"kind":"Use","ref_id":{"krate":0,"index":2382},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":895,"byte_end":898,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2383},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":895,"byte_end":898,"line_start":61,"line_end":61,"column_start":5,"column_end":8},"alias_span":null,"name":"ICO","value":"","parent":{"krate":0,"index":41}},{"kind":"Use","ref_id":{"krate":0,"index":1675},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":925,"byte_end":930,"line_start":65,"line_end":65,"column_start":5,"column_end":10},"alias_span":null,"name":"Pixel","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1839},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":936,"byte_end":949,"line_start":66,"line_end":66,"column_start":5,"column_end":18},"alias_span":null,"name":"ConvertBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1762},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":974,"byte_end":985,"line_start":68,"line_end":68,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1852},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":991,"byte_end":999,"line_start":69,"line_end":69,"column_start":5,"column_end":13},"alias_span":null,"name":"RgbImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1853},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1005,"byte_end":1014,"line_start":70,"line_end":70,"column_start":5,"column_end":14},"alias_span":null,"name":"RgbaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1854},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1020,"byte_end":1029,"line_start":71,"line_end":71,"column_start":5,"column_end":14},"alias_span":null,"name":"GrayImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1855},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1035,"byte_end":1049,"line_start":72,"line_end":72,"column_start":5,"column_end":19},"alias_span":null,"name":"GrayAlphaImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1861},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1080,"byte_end":1089,"line_start":76,"line_end":76,"column_start":17,"column_end":26},"alias_span":null,"name":"Primitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1554},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1146,"byte_end":1150,"line_start":80,"line_end":80,"column_start":5,"column_end":9},"alias_span":null,"name":"open","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1562},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1156,"byte_end":1160,"line_start":81,"line_end":81,"column_start":5,"column_end":9},"alias_span":null,"name":"load","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1566},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1166,"byte_end":1182,"line_start":82,"line_end":82,"column_start":5,"column_end":21},"alias_span":null,"name":"load_from_memory","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1567},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1188,"byte_end":1216,"line_start":83,"line_end":83,"column_start":5,"column_end":33},"alias_span":null,"name":"load_from_memory_with_format","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1558},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1222,"byte_end":1233,"line_start":84,"line_end":84,"column_start":5,"column_end":16},"alias_span":null,"name":"save_buffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2455},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1256,"byte_end":1268,"line_start":87,"line_end":87,"column_start":19,"column_end":31},"alias_span":null,"name":"DynamicImage","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2462},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1286,"byte_end":1295,"line_start":89,"line_end":89,"column_start":5,"column_end":14},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2463},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1286,"byte_end":1295,"line_start":89,"line_end":89,"column_start":5,"column_end":14},"alias_span":null,"name":"ImageRgb8","value":"","parent":{"krate":0,"index":59}},{"kind":"Use","ref_id":{"krate":0,"index":2465},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1301,"byte_end":1311,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2466},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1301,"byte_end":1311,"line_start":90,"line_end":90,"column_start":5,"column_end":15},"alias_span":null,"name":"ImageRgba8","value":"","parent":{"krate":0,"index":60}},{"kind":"Use","ref_id":{"krate":0,"index":2456},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1317,"byte_end":1327,"line_start":91,"line_end":91,"column_start":5,"column_end":15},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2457},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1317,"byte_end":1327,"line_start":91,"line_end":91,"column_start":5,"column_end":15},"alias_span":null,"name":"ImageLuma8","value":"","parent":{"krate":0,"index":61}},{"kind":"Use","ref_id":{"krate":0,"index":2459},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1333,"byte_end":1344,"line_start":92,"line_end":92,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2460},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1333,"byte_end":1344,"line_start":92,"line_end":92,"column_start":5,"column_end":16},"alias_span":null,"name":"ImageLumaA8","value":"","parent":{"krate":0,"index":62}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1374,"byte_end":1379,"line_start":96,"line_end":96,"column_start":5,"column_end":10},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1877},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1385,"byte_end":1391,"line_start":97,"line_end":97,"column_start":5,"column_end":11},"alias_span":null,"name":"Frames","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1912},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16526,"byte_end":16536,"line_start":11,"line_end":11,"column_start":23,"column_end":33},"alias_span":null,"name":"FilterType","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1915},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16580,"byte_end":16588,"line_start":14,"line_end":14,"column_start":5,"column_end":13},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1916},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16580,"byte_end":16588,"line_start":14,"line_end":14,"column_start":5,"column_end":13},"alias_span":null,"name":"Triangle","value":"","parent":{"krate":0,"index":116}},{"kind":"Use","ref_id":{"krate":0,"index":1913},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16594,"byte_end":16601,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1914},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16594,"byte_end":16601,"line_start":15,"line_end":15,"column_start":5,"column_end":12},"alias_span":null,"name":"Nearest","value":"","parent":{"krate":0,"index":117}},{"kind":"Use","ref_id":{"krate":0,"index":1917},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16607,"byte_end":16617,"line_start":16,"line_end":16,"column_start":5,"column_end":15},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1918},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16607,"byte_end":16617,"line_start":16,"line_end":16,"column_start":5,"column_end":15},"alias_span":null,"name":"CatmullRom","value":"","parent":{"krate":0,"index":118}},{"kind":"Use","ref_id":{"krate":0,"index":1919},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16623,"byte_end":16631,"line_start":17,"line_end":17,"column_start":5,"column_end":13},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1920},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16623,"byte_end":16631,"line_start":17,"line_end":17,"column_start":5,"column_end":13},"alias_span":null,"name":"Gaussian","value":"","parent":{"krate":0,"index":119}},{"kind":"Use","ref_id":{"krate":0,"index":1921},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16637,"byte_end":16645,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1922},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16637,"byte_end":16645,"line_start":18,"line_end":18,"column_start":5,"column_end":13},"alias_span":null,"name":"Lanczos3","value":"","parent":{"krate":0,"index":120}},{"kind":"Use","ref_id":{"krate":0,"index":146},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16706,"byte_end":16714,"line_start":23,"line_end":23,"column_start":5,"column_end":13},"alias_span":null,"name":"rotate90","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":148},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16720,"byte_end":16729,"line_start":24,"line_end":24,"column_start":5,"column_end":14},"alias_span":null,"name":"rotate180","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":150},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16735,"byte_end":16744,"line_start":25,"line_end":25,"column_start":5,"column_end":14},"alias_span":null,"name":"rotate270","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":152},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16750,"byte_end":16765,"line_start":26,"line_end":26,"column_start":5,"column_end":20},"alias_span":null,"name":"flip_horizontal","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16771,"byte_end":16784,"line_start":27,"line_end":27,"column_start":5,"column_end":18},"alias_span":null,"name":"flip_vertical","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":243},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16838,"byte_end":16847,"line_start":32,"line_end":32,"column_start":5,"column_end":14},"alias_span":null,"name":"filter3x3","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":248},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16853,"byte_end":16859,"line_start":33,"line_end":33,"column_start":5,"column_end":11},"alias_span":null,"name":"resize","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16865,"byte_end":16869,"line_start":34,"line_end":34,"column_start":5,"column_end":9},"alias_span":null,"name":"blur","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":253},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16875,"byte_end":16884,"line_start":35,"line_end":35,"column_start":5,"column_end":14},"alias_span":null,"name":"unsharpen","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":171},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16942,"byte_end":16951,"line_start":40,"line_end":40,"column_start":5,"column_end":14},"alias_span":null,"name":"grayscale","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":174},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16957,"byte_end":16963,"line_start":41,"line_end":41,"column_start":5,"column_end":11},"alias_span":null,"name":"invert","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":176},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16969,"byte_end":16977,"line_start":42,"line_end":42,"column_start":5,"column_end":13},"alias_span":null,"name":"contrast","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":181},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16983,"byte_end":16991,"line_start":43,"line_end":43,"column_start":5,"column_end":13},"alias_span":null,"name":"brighten","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":187},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16997,"byte_end":17005,"line_start":44,"line_end":44,"column_start":5,"column_end":13},"alias_span":null,"name":"ColorMap","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1907},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17011,"byte_end":17018,"line_start":45,"line_end":45,"column_start":5,"column_end":12},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":1908},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17011,"byte_end":17018,"line_start":45,"line_end":45,"column_start":5,"column_end":12},"alias_span":null,"name":"BiLevel","value":"","parent":{"krate":0,"index":138}},{"kind":"Use","ref_id":{"krate":0,"index":203},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17024,"byte_end":17030,"line_start":46,"line_end":46,"column_start":5,"column_end":11},"alias_span":null,"name":"dither","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17036,"byte_end":17048,"line_start":47,"line_end":47,"column_start":5,"column_end":17},"alias_span":null,"name":"index_colors","value":"","parent":{"krate":0,"index":108}},{"kind":"Use","ref_id":{"krate":0,"index":279},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/mod.rs","byte_start":49419,"byte_end":49430,"line_start":3,"line_end":3,"column_start":24,"column_end":35},"alias_span":null,"name":"WebpDecoder","value":"","parent":{"krate":0,"index":264}},{"kind":"Use","ref_id":{"krate":0,"index":482},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/mod.rs","byte_start":119636,"byte_end":119646,"line_start":3,"line_end":3,"column_start":24,"column_end":34},"alias_span":null,"name":"PPMEncoder","value":"","parent":{"krate":0,"index":470}},{"kind":"Use","ref_id":{"krate":0,"index":569},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127403,"byte_end":127413,"line_start":9,"line_end":9,"column_start":24,"column_end":34},"alias_span":null,"name":"ICODecoder","value":"","parent":{"krate":0,"index":548}},{"kind":"Use","ref_id":{"krate":0,"index":742},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":135026,"byte_end":135037,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGDecoder","value":"","parent":{"krate":0,"index":607}},{"kind":"Use","ref_id":{"krate":0,"index":658},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":135062,"byte_end":135073,"line_start":11,"line_end":11,"column_start":24,"column_end":35},"alias_span":null,"name":"JPEGEncoder","value":"","parent":{"krate":0,"index":607}},{"kind":"Use","ref_id":{"krate":0,"index":1985},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":135098,"byte_end":135107,"line_start":12,"line_end":12,"column_start":24,"column_end":33},"alias_span":null,"name":"Component","value":"","parent":{"krate":0,"index":607}},{"kind":"Use","ref_id":{"krate":35,"index":320},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192174,"byte_end":192179,"line_start":12,"line_end":12,"column_start":20,"column_end":25},"alias_span":null,"name":"Frame","value":"","parent":{"krate":0,"index":841}},{"kind":"Use","ref_id":{"krate":0,"index":2261},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195577,"byte_end":195588,"line_start":10,"line_end":10,"column_start":24,"column_end":35},"alias_span":null,"name":"TIFFDecoder","value":"","parent":{"krate":0,"index":890}},{"kind":"Use","ref_id":{"krate":0,"index":1079},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":223441,"byte_end":223451,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"TGADecoder","value":"","parent":{"krate":0,"index":1025}},{"kind":"Use","ref_id":{"krate":0,"index":1178},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":237019,"byte_end":237029,"line_start":10,"line_end":10,"column_start":24,"column_end":34},"alias_span":null,"name":"BMPDecoder","value":"","parent":{"krate":0,"index":1113}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":0,"byte_end":2507,"line_start":1,"line_end":149,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":2803},{"krate":0,"index":9},{"krate":0,"index":2805},{"krate":0,"index":10},{"krate":0,"index":2807},{"krate":0,"index":11},{"krate":0,"index":2809},{"krate":0,"index":12},{"krate":0,"index":2811},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":2813},{"krate":0,"index":15},{"krate":0,"index":2815},{"krate":0,"index":16},{"krate":0,"index":2817},{"krate":0,"index":17},{"krate":0,"index":2819},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":2837},{"krate":0,"index":29},{"krate":0,"index":2839},{"krate":0,"index":30},{"krate":0,"index":2841},{"krate":0,"index":31},{"krate":0,"index":2843},{"krate":0,"index":32},{"krate":0,"index":2845},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":2849},{"krate":0,"index":36},{"krate":0,"index":2851},{"krate":0,"index":37},{"krate":0,"index":2853},{"krate":0,"index":38},{"krate":0,"index":2855},{"krate":0,"index":39},{"krate":0,"index":2857},{"krate":0,"index":40},{"krate":0,"index":2859},{"krate":0,"index":41},{"krate":0,"index":2861},{"krate":0,"index":42},{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":2891},{"krate":0,"index":60},{"krate":0,"index":2893},{"krate":0,"index":61},{"krate":0,"index":2895},{"krate":0,"index":62},{"krate":0,"index":2897},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":108},{"krate":0,"index":264},{"krate":0,"index":470},{"krate":0,"index":495},{"krate":0,"index":548},{"krate":0,"index":607},{"krate":0,"index":841},{"krate":0,"index":890},{"krate":0,"index":1025},{"krate":0,"index":1113},{"krate":0,"index":1255},{"krate":0,"index":1375},{"krate":0,"index":1453},{"krate":0,"index":1568},{"krate":0,"index":1651},{"krate":0,"index":1856},{"krate":0,"index":1874},{"krate":0,"index":1895}],"decl_id":null,"docs":" This crate provides native rust implementations of\n image encoders and decoders and basic image manipulation\n functions.\n","sig":null,"attributes":[{"value":"/ This crate provides native rust implementations of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":0,"byte_end":54,"line_start":1,"line_end":1,"column_start":1,"column_end":55}},{"value":"/ image encoders and decoders and basic image manipulation","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":55,"byte_end":115,"line_start":2,"line_end":2,"column_start":1,"column_end":61}},{"value":"/ functions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":116,"byte_end":130,"line_start":3,"line_end":3,"column_start":1,"column_end":15}},{"value":"warn(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":132,"byte_end":154,"line_start":5,"line_end":5,"column_start":1,"column_end":23}},{"value":"warn(unused_qualifications)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":155,"byte_end":186,"line_start":6,"line_end":6,"column_start":1,"column_end":32}},{"value":"deny(missing_copy_implementations)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":187,"byte_end":225,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Mod","id":{"krate":0,"index":66},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"math","qualname":"::math","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/mod.rs","parent":null,"children":[{"krate":0,"index":67},{"krate":0,"index":70}],"decl_id":null,"docs":" Mathematical helper functions and types.\n","sig":null,"attributes":[{"value":"/ Mathematical helper functions and types.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/mod.rs","byte_start":2509,"byte_end":2553,"line_start":1,"line_end":1,"column_start":1,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":67},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"utils","qualname":"::math::utils","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","parent":null,"children":[{"krate":0,"index":68}],"decl_id":null,"docs":" Shared mathematical utility functions.\n","sig":null,"attributes":[{"value":"/ Shared mathematical utility functions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2582,"byte_end":2624,"line_start":1,"line_end":1,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":68},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2869,"byte_end":2874,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"clamp","qualname":"::math::utils::clamp","value":"pub fn clamp<N>(N, N, N) -> N where N: PartialOrd","parent":null,"children":[],"decl_id":null,"docs":" Cut value to be inside given range","sig":null,"attributes":[{"value":"/ Cut value to be inside given range","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2626,"byte_end":2664,"line_start":3,"line_end":3,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2665,"byte_end":2668,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2669,"byte_end":2676,"line_start":5,"line_end":5,"column_start":1,"column_end":8}},{"value":"/ use image::math::utils;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2677,"byte_end":2704,"line_start":6,"line_end":6,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2705,"byte_end":2708,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(utils::clamp(-5, 0, 10),  0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2709,"byte_end":2753,"line_start":8,"line_end":8,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp( 6, 0, 10),  6);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2754,"byte_end":2798,"line_start":9,"line_end":9,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(utils::clamp(15, 0, 10), 10);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2799,"byte_end":2843,"line_start":10,"line_end":10,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2844,"byte_end":2851,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/utils.rs","byte_start":2852,"byte_end":2861,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":70},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nq","qualname":"::math::nq","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":1896},{"krate":0,"index":1904},{"krate":0,"index":1902},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":94}],"decl_id":null,"docs":" NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.\n See \"Kohonen neural networks for optimal colour quantization\"\n in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.\n for a discussion of the algorithm.\n See also  http://www.acm.org/~dekker/NEUQUANT.HTML\n","sig":null,"attributes":[{"value":"/ NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":2996,"byte_end":3067,"line_start":1,"line_end":1,"column_start":1,"column_end":72}},{"value":"/ See \"Kohonen neural networks for optimal colour quantization\"","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":3068,"byte_end":3133,"line_start":2,"line_end":2,"column_start":1,"column_end":66}},{"value":"/ in \"Network: Computation in Neural Systems\" Vol. 5 (1994) pp 351-367.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":3134,"byte_end":3207,"line_start":3,"line_end":3,"column_start":1,"column_end":74}},{"value":"/ for a discussion of the algorithm.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":3208,"byte_end":3246,"line_start":4,"line_end":4,"column_start":1,"column_end":39}},{"value":"/ See also  http://www.acm.org/~dekker/NEUQUANT.HTML","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":3247,"byte_end":3301,"line_start":5,"line_end":5,"column_start":1,"column_end":55}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5151,"byte_end":5159,"line_start":66,"line_end":66,"column_start":12,"column_end":20},"name":"NeuQuant","qualname":"::math::nq::NeuQuant","value":"NeuQuant {  }","parent":null,"children":[{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" Neural network color quantizer\n","sig":null,"attributes":[{"value":"/ Neural network color quantizer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5105,"byte_end":5139,"line_start":65,"line_end":65,"column_start":1,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5463,"byte_end":5466,"line_start":78,"line_end":78,"column_start":12,"column_end":15},"name":"new","qualname":"<NeuQuant>::new","value":"pub fn new(i32, usize, &[u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new neuronal network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Creates a new neuronal network and trains it with the supplied data","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5380,"byte_end":5451,"line_start":77,"line_end":77,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":6027,"byte_end":6031,"line_start":94,"line_end":94,"column_start":12,"column_end":16},"name":"init","qualname":"<NeuQuant>::init","value":"pub fn init(&mut Self, &[u8])","parent":null,"children":[],"decl_id":null,"docs":" Initializes the neuronal network and trains it with the supplied data\n","sig":null,"attributes":[{"value":"/ Initializes the neuronal network and trains it with the supplied data","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5942,"byte_end":6015,"line_start":93,"line_end":93,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":6863,"byte_end":6872,"line_start":116,"line_end":116,"column_start":12,"column_end":21},"name":"map_pixel","qualname":"<NeuQuant>::map_pixel","value":"pub fn map_pixel(&Self, &mut [u8])","parent":null,"children":[],"decl_id":null,"docs":" Maps the pixel in-place to the best-matching color in the color map\n","sig":null,"attributes":[{"value":"/ Maps the pixel in-place to the best-matching color in the color map","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":6758,"byte_end":6829,"line_start":114,"line_end":114,"column_start":5,"column_end":76}},{"value":"inline(always)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":6834,"byte_end":6851,"line_start":115,"line_end":115,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":7417,"byte_end":7425,"line_start":131,"line_end":131,"column_start":12,"column_end":20},"name":"index_of","qualname":"<NeuQuant>::index_of","value":"pub fn index_of(&Self, &[u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Finds the best-matching index in the color map for `pixel`\n","sig":null,"attributes":[{"value":"/ Finds the best-matching index in the color map for `pixel`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":7321,"byte_end":7383,"line_start":129,"line_end":129,"column_start":5,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":7388,"byte_end":7405,"line_start":130,"line_end":130,"column_start":5,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":108},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"imageops","qualname":"::imageops","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","parent":null,"children":[{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":111},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":2921},{"krate":0,"index":117},{"krate":0,"index":2923},{"krate":0,"index":118},{"krate":0,"index":2925},{"krate":0,"index":119},{"krate":0,"index":2927},{"krate":0,"index":120},{"krate":0,"index":2929},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":2959},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":156},{"krate":0,"index":211},{"krate":0,"index":258},{"krate":0,"index":260},{"krate":0,"index":262}],"decl_id":null,"docs":" Image Processing Functions\n","sig":null,"attributes":[{"value":"/ Image Processing Functions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":16388,"byte_end":16418,"line_start":1,"line_end":1,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":146},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":20785,"byte_end":20793,"line_start":8,"line_end":8,"column_start":8,"column_end":16},"name":"rotate90","qualname":"::imageops::affine::rotate90","value":"pub fn rotate90<I: GenericImage + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 90 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":20665,"byte_end":20706,"line_start":6,"line_end":6,"column_start":1,"column_end":42}}]},{"kind":"Function","id":{"krate":0,"index":148},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":21370,"byte_end":21379,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"rotate180","qualname":"::imageops::affine::rotate180","value":"pub fn rotate180<I: GenericImage + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 180 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":21249,"byte_end":21291,"line_start":25,"line_end":25,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":150},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":21968,"byte_end":21977,"line_start":46,"line_end":46,"column_start":8,"column_end":17},"name":"rotate270","qualname":"::imageops::affine::rotate270","value":"pub fn rotate270<I: GenericImage + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Rotate an image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate an image 270 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":21847,"byte_end":21889,"line_start":44,"line_end":44,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":152},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":22541,"byte_end":22556,"line_start":65,"line_end":65,"column_start":8,"column_end":23},"name":"flip_horizontal","qualname":"::imageops::affine::flip_horizontal","value":"pub fn flip_horizontal<I: GenericImage + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image horizontally\n","sig":null,"attributes":[{"value":"/ Flip an image horizontally","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":22432,"byte_end":22462,"line_start":63,"line_end":63,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":23118,"byte_end":23131,"line_start":84,"line_end":84,"column_start":8,"column_end":21},"name":"flip_vertical","qualname":"::imageops::affine::flip_vertical","value":"pub fn flip_vertical<I: GenericImage + 'static>(&I)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Flip an image vertically\n","sig":null,"attributes":[{"value":"/ Flip an image vertically","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/affine.rs","byte_start":23011,"byte_end":23039,"line_start":82,"line_end":82,"column_start":1,"column_end":29}}]},{"kind":"Mod","id":{"krate":0,"index":156},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"colorops","qualname":"::imageops::colorops","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","parent":null,"children":[{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":2975},{"krate":0,"index":162},{"krate":0,"index":2977},{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":181},{"krate":0,"index":187},{"krate":0,"index":1907},{"krate":0,"index":1910},{"krate":0,"index":1909},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":203},{"krate":0,"index":208}],"decl_id":null,"docs":" Public only because of Rust bug:\n https://github.com/rust-lang/rust/issues/18241\n Functions for altering and converting the color of pixelbufs\n","sig":null,"attributes":[{"value":"/ Public only because of Rust bug:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17066,"byte_end":17102,"line_start":51,"line_end":51,"column_start":1,"column_end":37}},{"value":"/ https://github.com/rust-lang/rust/issues/18241","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17103,"byte_end":17153,"line_start":52,"line_end":52,"column_start":1,"column_end":51}},{"value":"/ Functions for altering and converting the color of pixelbufs","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":26940,"byte_end":27004,"line_start":1,"line_end":1,"column_start":1,"column_end":65}}]},{"kind":"Function","id":{"krate":0,"index":171},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":27256,"byte_end":27265,"line_start":16,"line_end":16,"column_start":8,"column_end":17},"name":"grayscale","qualname":"::imageops::colorops::grayscale","value":"pub fn grayscale<'a, I: GenericImage>(&I)\n->\n    ImageBuffer<Luma<<I::Pixel as Pixel>::Subpixel>,\n                Vec<<I::Pixel as Pixel>::Subpixel>> where\n<I::Pixel as Pixel>::Subpixel: 'static,\n<<I::Pixel as Pixel>::Subpixel as Num>::FromStrRadixErr: 'static","parent":null,"children":[],"decl_id":null,"docs":" Convert the supplied image to grayscale\n","sig":null,"attributes":[{"value":"/ Convert the supplied image to grayscale","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":27205,"byte_end":27248,"line_start":15,"line_end":15,"column_start":1,"column_end":44}}]},{"kind":"Function","id":{"krate":0,"index":174},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":27878,"byte_end":27884,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"invert","qualname":"::imageops::colorops::invert","value":"pub fn invert<I: GenericImage>(&mut I)","parent":null,"children":[],"decl_id":null,"docs":" Invert each pixel within the supplied image.\n This function operates in place.\n","sig":null,"attributes":[{"value":"/ Invert each pixel within the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":27785,"byte_end":27833,"line_start":33,"line_end":33,"column_start":1,"column_end":49}},{"value":"/ This function operates in place.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":27834,"byte_end":27870,"line_start":34,"line_end":34,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":28347,"byte_end":28355,"line_start":51,"line_end":51,"column_start":8,"column_end":16},"name":"contrast","qualname":"::imageops::colorops::contrast","value":"pub fn contrast<I, P, S>(&I, f32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of the supplied image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":28148,"byte_end":28194,"line_start":48,"line_end":48,"column_start":1,"column_end":47}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":28195,"byte_end":28254,"line_start":49,"line_end":49,"column_start":1,"column_end":60}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":28255,"byte_end":28339,"line_start":50,"line_end":50,"column_start":1,"column_end":85}}]},{"kind":"Function","id":{"krate":0,"index":181},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":29339,"byte_end":29347,"line_start":86,"line_end":86,"column_start":8,"column_end":16},"name":"brighten","qualname":"::imageops::colorops::brighten","value":"pub fn brighten<I, P, S>(&I, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImage<Pixel = P>, P: Pixel<Subpixel = S> + 'static, S: Primitive +\n'static","parent":null,"children":[],"decl_id":null,"docs":" Brighten the supplied image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":29165,"byte_end":29197,"line_start":83,"line_end":83,"column_start":1,"column_end":33}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":29198,"byte_end":29254,"line_start":84,"line_end":84,"column_start":1,"column_end":57}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":29255,"byte_end":29331,"line_start":85,"line_end":85,"column_start":1,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":187},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30088,"byte_end":30096,"line_start":115,"line_end":115,"column_start":11,"column_end":19},"name":"ColorMap","qualname":"::imageops::colorops::ColorMap","value":"ColorMap","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190}],"decl_id":null,"docs":" A color map\n","sig":null,"attributes":[{"value":"/ A color map","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30062,"byte_end":30077,"line_start":114,"line_end":114,"column_start":1,"column_end":16}}]},{"kind":"Type","id":{"krate":0,"index":188},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30160,"byte_end":30165,"line_start":117,"line_end":117,"column_start":10,"column_end":15},"name":"Color","qualname":"::imageops::colorops::ColorMap::Color","value":"type Color;","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" The color type on which the map operates on\n","sig":null,"attributes":[{"value":"/ The color type on which the map operates on","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30103,"byte_end":30150,"line_start":116,"line_end":116,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30257,"byte_end":30265,"line_start":120,"line_end":120,"column_start":8,"column_end":16},"name":"index_of","qualname":"::imageops::colorops::ColorMap::index_of","value":"pub fn index_of(&Self, &Self::Color) -> usize","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Returns the index of the closed match of `color`\n in the color map.\n","sig":null,"attributes":[{"value":"/ Returns the index of the closed match of `color`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30171,"byte_end":30223,"line_start":118,"line_end":118,"column_start":5,"column_end":57}},{"value":"/ in the color map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30228,"byte_end":30249,"line_start":119,"line_end":119,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30371,"byte_end":30380,"line_start":122,"line_end":122,"column_start":8,"column_end":17},"name":"map_color","qualname":"::imageops::colorops::ColorMap::map_color","value":"pub fn map_color(&Self, &mut Self::Color)","parent":{"krate":0,"index":187},"children":[],"decl_id":null,"docs":" Maps `color` to the closest color in the color map.\n","sig":null,"attributes":[{"value":"/ Maps `color` to the closest color in the color map.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30308,"byte_end":30363,"line_start":121,"line_end":121,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":1907},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30476,"byte_end":30483,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"BiLevel","qualname":"::imageops::colorops::BiLevel","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bi-level color map\n","sig":null,"attributes":[{"value":"/ A bi-level color map","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30417,"byte_end":30441,"line_start":125,"line_end":125,"column_start":1,"column_end":25}}]},{"kind":"Function","id":{"krate":0,"index":203},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":32359,"byte_end":32365,"line_start":198,"line_end":198,"column_start":8,"column_end":14},"name":"dither","qualname":"::imageops::colorops::dither","value":"pub fn dither<Pix, Map>(&mut ImageBuffer<Pix, Vec<u8>>, &Map) where\nMap: ColorMap<Color = Pix>, Pix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors of the image using the supplied `color_map` while applying\n Floyd-Steinberg dithering to improve the visual conception\n","sig":null,"attributes":[{"value":"/ Reduces the colors of the image using the supplied `color_map` while applying","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":32207,"byte_end":32288,"line_start":196,"line_end":196,"column_start":1,"column_end":82}},{"value":"/ Floyd-Steinberg dithering to improve the visual conception","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":32289,"byte_end":32351,"line_start":197,"line_end":197,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":33876,"byte_end":33888,"line_start":235,"line_end":235,"column_start":8,"column_end":20},"name":"index_colors","qualname":"::imageops::colorops::index_colors","value":"pub fn index_colors<Pix, Map>(&ImageBuffer<Pix, Vec<u8>>, &Map)\n-> ImageBuffer<Luma<u8>, Vec<u8>> where Map: ColorMap<Color = Pix>,\nPix: Pixel<Subpixel = u8> + 'static","parent":null,"children":[],"decl_id":null,"docs":" Reduces the colors using the supplied `color_map` and returns an image of the indices\n","sig":null,"attributes":[{"value":"/ Reduces the colors using the supplied `color_map` and returns an image of the indices","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":33779,"byte_end":33868,"line_start":234,"line_end":234,"column_start":1,"column_end":90}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1913},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35124,"byte_end":35131,"line_start":22,"line_end":22,"column_start":5,"column_end":12},"name":"Nearest","qualname":"::imageops::sample::FilterType::Nearest","value":"FilterType::Nearest","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" Nearest Neighbor\n","sig":null,"attributes":[{"value":"/ Nearest Neighbor","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35099,"byte_end":35119,"line_start":21,"line_end":21,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1915},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35160,"byte_end":35168,"line_start":25,"line_end":25,"column_start":5,"column_end":13},"name":"Triangle","qualname":"::imageops::sample::FilterType::Triangle","value":"FilterType::Triangle","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" Linear Filter\n","sig":null,"attributes":[{"value":"/ Linear Filter","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35138,"byte_end":35155,"line_start":24,"line_end":24,"column_start":5,"column_end":22}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1917},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35196,"byte_end":35206,"line_start":28,"line_end":28,"column_start":5,"column_end":15},"name":"CatmullRom","qualname":"::imageops::sample::FilterType::CatmullRom","value":"FilterType::CatmullRom","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" Cubic Filter\n","sig":null,"attributes":[{"value":"/ Cubic Filter","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35175,"byte_end":35191,"line_start":27,"line_end":27,"column_start":5,"column_end":21}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1919},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35237,"byte_end":35245,"line_start":31,"line_end":31,"column_start":5,"column_end":13},"name":"Gaussian","qualname":"::imageops::sample::FilterType::Gaussian","value":"FilterType::Gaussian","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" Gaussian Filter\n","sig":null,"attributes":[{"value":"/ Gaussian Filter","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35213,"byte_end":35232,"line_start":30,"line_end":30,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1921},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35282,"byte_end":35290,"line_start":34,"line_end":34,"column_start":5,"column_end":13},"name":"Lanczos3","qualname":"::imageops::sample::FilterType::Lanczos3","value":"FilterType::Lanczos3","parent":{"krate":0,"index":1912},"children":[],"decl_id":null,"docs":" Lanczos with window 3\n","sig":null,"attributes":[{"value":"/ Lanczos with window 3","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35252,"byte_end":35277,"line_start":33,"line_end":33,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":1912},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35082,"byte_end":35092,"line_start":20,"line_end":20,"column_start":10,"column_end":20},"name":"FilterType","qualname":"::imageops::sample::FilterType","value":"pub enum FilterType {\n\n    /// Nearest Neighbor\n    Nearest,\n\n    /// Linear Filter\n    Triangle,\n\n    /// Cubic Filter\n    CatmullRom,\n\n    /// Gaussian Filter\n    Gaussian,\n\n    /// Lanczos with window 3\n    Lanczos3,\n}","parent":null,"children":[{"krate":0,"index":1913},{"krate":0,"index":1915},{"krate":0,"index":1917},{"krate":0,"index":1919},{"krate":0,"index":1921}],"decl_id":null,"docs":" Available Sampling Filters\n","sig":null,"attributes":[{"value":"/ Available Sampling Filters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":35019,"byte_end":35049,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":243},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":43117,"byte_end":43126,"line_start":293,"line_end":293,"column_start":8,"column_end":17},"name":"filter3x3","qualname":"::imageops::sample::filter3x3","value":"pub fn filter3x3<I, P, S>(&I, &[f32]) -> ImageBuffer<P, Vec<S>> where\nI: GenericImage<Pixel = P> + 'static, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Perform a 3x3 box filter on the supplied image.\n ```kernel``` is an array of the filter weights of length 9.\n","sig":null,"attributes":[{"value":"/ Perform a 3x3 box filter on the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":42924,"byte_end":42975,"line_start":290,"line_end":290,"column_start":1,"column_end":52}},{"value":"/ ```kernel``` is an array of the filter weights of length 9.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":42976,"byte_end":43039,"line_start":291,"line_end":291,"column_start":1,"column_end":64}}]},{"kind":"Function","id":{"krate":0,"index":248},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":45559,"byte_end":45565,"line_start":367,"line_end":367,"column_start":8,"column_end":14},"name":"resize","qualname":"::imageops::sample::resize","value":"pub fn resize<I: GenericImage + 'static>(&I, u32, u32, FilterType)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Resize the supplied image to the specified dimensions.\n ```nwidth``` and ```nheight``` are the new dimensions.\n ```filter``` is the sampling filter to use.\n","sig":null,"attributes":[{"value":"/ Resize the supplied image to the specified dimensions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":45316,"byte_end":45374,"line_start":363,"line_end":363,"column_start":1,"column_end":59}},{"value":"/ ```nwidth``` and ```nheight``` are the new dimensions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":45375,"byte_end":45433,"line_start":364,"line_end":364,"column_start":1,"column_end":59}},{"value":"/ ```filter``` is the sampling filter to use.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":45434,"byte_end":45481,"line_start":365,"line_end":365,"column_start":1,"column_end":48}}]},{"kind":"Function","id":{"krate":0,"index":250},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":46801,"byte_end":46805,"line_start":403,"line_end":403,"column_start":8,"column_end":12},"name":"blur","qualname":"::imageops::sample::blur","value":"pub fn blur<I: GenericImage + 'static>(&I, f32)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>> where\nI::Pixel: 'static, <I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on the supplied image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":46619,"byte_end":46670,"line_start":400,"line_end":400,"column_start":1,"column_end":52}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":46671,"byte_end":46723,"line_start":401,"line_end":401,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":253},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47768,"byte_end":47777,"line_start":433,"line_end":433,"column_start":8,"column_end":17},"name":"unsharpen","qualname":"::imageops::sample::unsharpen","value":"pub fn unsharpen<I, P, S>(&I, f32, i32) -> ImageBuffer<P, Vec<S>> where\nI: GenericImage<Pixel = P> + 'static, P: Pixel<Subpixel = S> + 'static,\nS: Primitive + 'static","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on the supplied image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is the threshold for the difference between","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on the supplied image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47439,"byte_end":47492,"line_start":427,"line_end":427,"column_start":1,"column_end":54}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47493,"byte_end":47544,"line_start":428,"line_end":428,"column_start":1,"column_end":52}},{"value":"/ ```threshold``` is the threshold for the difference between","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47545,"byte_end":47608,"line_start":429,"line_end":429,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47609,"byte_end":47612,"line_start":430,"line_end":430,"column_start":1,"column_end":4}},{"value":"/ See https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/sample.rs","byte_start":47613,"byte_end":47690,"line_start":431,"line_end":431,"column_start":1,"column_end":78}}]},{"kind":"Function","id":{"krate":0,"index":258},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17301,"byte_end":17305,"line_start":58,"line_end":58,"column_start":8,"column_end":12},"name":"crop","qualname":"::imageops::crop","value":"pub fn crop<I: GenericImage + 'static>(&mut I, u32, u32, u32, u32)\n-> SubImage<, I> where I::Pixel: 'static,\n<I::Pixel as Pixel>::Subpixel: 'static","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable view into an image\n","sig":null,"attributes":[{"value":"/ Return a mutable view into an image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17185,"byte_end":17224,"line_start":56,"line_end":56,"column_start":1,"column_end":40}}]},{"kind":"Function","id":{"krate":0,"index":260},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17881,"byte_end":17888,"line_start":76,"line_end":76,"column_start":8,"column_end":15},"name":"overlay","qualname":"::imageops::overlay","value":"pub fn overlay<I: GenericImage>(&mut I, &I, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Overlay an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Overlay an image at a given coordinate (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17824,"byte_end":17873,"line_start":75,"line_end":75,"column_start":1,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":262},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":18642,"byte_end":18649,"line_start":102,"line_end":102,"column_start":8,"column_end":15},"name":"replace","qualname":"::imageops::replace","value":"pub fn replace<I: GenericImage>(&mut I, &I, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Replace the contents of an image at a given coordinate (x, y)\n","sig":null,"attributes":[{"value":"/ Replace the contents of an image at a given coordinate (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":18569,"byte_end":18634,"line_start":101,"line_end":101,"column_start":1,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":264},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"webp","qualname":"::webp","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/mod.rs","parent":null,"children":[{"krate":0,"index":265},{"krate":0,"index":266},{"krate":0,"index":299},{"krate":0,"index":304}],"decl_id":null,"docs":" Decoding of Webp Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"webp\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1490,"byte_end":1514,"line_start":107,"line_end":107,"column_start":1,"column_end":25}},{"value":"/ Decoding of Webp Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/mod.rs","byte_start":49367,"byte_end":49394,"line_start":1,"line_end":1,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":279},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49786,"byte_end":49797,"line_start":18,"line_end":18,"column_start":12,"column_end":23},"name":"WebpDecoder","qualname":"::webp::decoder::WebpDecoder","value":"WebpDecoder {  }","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":283},{"krate":0,"index":284}],"decl_id":null,"docs":" A Representation of a Webp Image format decoder.\n","sig":null,"attributes":[{"value":"/ A Representation of a Webp Image format decoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49722,"byte_end":49774,"line_start":17,"line_end":17,"column_start":1,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":50032,"byte_end":50035,"line_start":28,"line_end":28,"column_start":12,"column_end":15},"name":"new","qualname":"<WebpDecoder<R>>::new","value":"pub fn new(R) -> WebpDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new WebpDecoder from the Reader ```r```.\n This function takes ownership of the Reader.\n","sig":null,"attributes":[{"value":"/ Create a new WebpDecoder from the Reader ```r```.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49914,"byte_end":49967,"line_start":26,"line_end":26,"column_start":5,"column_end":58}},{"value":"/ This function takes ownership of the Reader.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49972,"byte_end":50020,"line_start":27,"line_end":27,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":304},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"vp8","qualname":"::webp::vp8","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","parent":null,"children":[{"krate":0,"index":305},{"krate":0,"index":306},{"krate":0,"index":307},{"krate":0,"index":3037},{"krate":0,"index":308},{"krate":0,"index":309},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":337},{"krate":0,"index":339},{"krate":0,"index":343},{"krate":0,"index":345},{"krate":0,"index":347},{"krate":0,"index":352},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357},{"krate":0,"index":358},{"krate":0,"index":359},{"krate":0,"index":360},{"krate":0,"index":361},{"krate":0,"index":362},{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":366},{"krate":0,"index":368},{"krate":0,"index":371},{"krate":0,"index":373},{"krate":0,"index":375},{"krate":0,"index":377},{"krate":0,"index":379},{"krate":0,"index":381},{"krate":0,"index":387},{"krate":0,"index":1926},{"krate":0,"index":1935},{"krate":0,"index":1934},{"krate":0,"index":395},{"krate":0,"index":1939},{"krate":0,"index":1954},{"krate":0,"index":1952},{"krate":0,"index":1950},{"krate":0,"index":1956},{"krate":0,"index":1969},{"krate":0,"index":1968},{"krate":0,"index":1966},{"krate":0,"index":399},{"krate":0,"index":422},{"krate":0,"index":443},{"krate":0,"index":446},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451},{"krate":0,"index":452},{"krate":0,"index":453},{"krate":0,"index":454},{"krate":0,"index":455},{"krate":0,"index":456},{"krate":0,"index":457},{"krate":0,"index":458},{"krate":0,"index":459},{"krate":0,"index":460},{"krate":0,"index":461},{"krate":0,"index":462},{"krate":0,"index":463},{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":466},{"krate":0,"index":467},{"krate":0,"index":468},{"krate":0,"index":469}],"decl_id":null,"docs":" An implementation of the VP8 Video Codec","sig":null,"attributes":[{"value":"/ An implementation of the VP8 Video Codec","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55293,"byte_end":55337,"line_start":1,"line_end":1,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55338,"byte_end":55341,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains a partial implementation of the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55342,"byte_end":55398,"line_start":3,"line_end":3,"column_start":1,"column_end":57}},{"value":"/ VP8 video format as defined in RFC-6386.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55399,"byte_end":55443,"line_start":4,"line_end":4,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55444,"byte_end":55447,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ It decodes Keyframes only sans Loop Filtering.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55448,"byte_end":55498,"line_start":6,"line_end":6,"column_start":1,"column_end":51}},{"value":"/ VP8 is the underpinning of the Webp image format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55499,"byte_end":55551,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55552,"byte_end":55555,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55556,"byte_end":55575,"line_start":9,"line_end":9,"column_start":1,"column_end":20}},{"value":"/ * [rfc-6386](http://tools.ietf.org/html/rfc6386) - The VP8 Data Format and Decoding Guide","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55576,"byte_end":55669,"line_start":10,"line_end":10,"column_start":1,"column_end":94}},{"value":"/ * [VP8.pdf](http://static.googleusercontent.com/media/research.google.com/en//pubs/archive/37073.pdf) - An overview of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55670,"byte_end":55792,"line_start":11,"line_end":11,"column_start":1,"column_end":123}},{"value":"/ of the VP8 format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55793,"byte_end":55814,"line_start":12,"line_end":12,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":55815,"byte_end":55818,"line_start":13,"line_end":13,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1939},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83446,"byte_end":83451,"line_start":753,"line_end":753,"column_start":12,"column_end":17},"name":"Frame","qualname":"::webp::vp8::Frame","value":"Frame { width, height, ybuf, keyframe, for_display, pixel_type }","parent":null,"children":[{"krate":0,"index":1940},{"krate":0,"index":1941},{"krate":0,"index":1942},{"krate":0,"index":1943},{"krate":0,"index":1944},{"krate":0,"index":1945},{"krate":0,"index":1946},{"krate":0,"index":1947},{"krate":0,"index":1948},{"krate":0,"index":1949}],"decl_id":null,"docs":" A Representation of the last decoded video frame\n","sig":null,"attributes":[{"value":"/ A Representation of the last decoded video frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83349,"byte_end":83401,"line_start":751,"line_end":751,"column_start":1,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1940},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83498,"byte_end":83503,"line_start":755,"line_end":755,"column_start":9,"column_end":14},"name":"width","qualname":"::webp::vp8::Frame::width","value":"u16","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" The width of the luma plane\n","sig":null,"attributes":[{"value":"/ The width of the luma plane","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83458,"byte_end":83489,"line_start":754,"line_end":754,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1941},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83556,"byte_end":83562,"line_start":758,"line_end":758,"column_start":9,"column_end":15},"name":"height","qualname":"::webp::vp8::Frame::height","value":"u16","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" The height of the luma plane\n","sig":null,"attributes":[{"value":"/ The height of the luma plane","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83515,"byte_end":83547,"line_start":757,"line_end":757,"column_start":5,"column_end":37}}]},{"kind":"Field","id":{"krate":0,"index":1942},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83614,"byte_end":83618,"line_start":761,"line_end":761,"column_start":9,"column_end":13},"name":"ybuf","qualname":"::webp::vp8::Frame::ybuf","value":"std::vec::Vec<u8>","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" The luma plane of the frame\n","sig":null,"attributes":[{"value":"/ The luma plane of the frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83574,"byte_end":83605,"line_start":760,"line_end":760,"column_start":5,"column_end":36}}]},{"kind":"Field","id":{"krate":0,"index":1943},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83689,"byte_end":83697,"line_start":764,"line_end":764,"column_start":9,"column_end":17},"name":"keyframe","qualname":"::webp::vp8::Frame::keyframe","value":"bool","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" Indicates whether this frame is a keyframe\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is a keyframe","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83634,"byte_end":83680,"line_start":763,"line_end":763,"column_start":5,"column_end":51}}]},{"kind":"Field","id":{"krate":0,"index":1945},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83793,"byte_end":83804,"line_start":769,"line_end":769,"column_start":9,"column_end":20},"name":"for_display","qualname":"::webp::vp8::Frame::for_display","value":"bool","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" Indicates whether this frame is intended for display\n","sig":null,"attributes":[{"value":"/ Indicates whether this frame is intended for display","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83728,"byte_end":83784,"line_start":768,"line_end":768,"column_start":5,"column_end":61}}]},{"kind":"Field","id":{"krate":0,"index":1946},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83935,"byte_end":83945,"line_start":774,"line_end":774,"column_start":9,"column_end":19},"name":"pixel_type","qualname":"::webp::vp8::Frame::pixel_type","value":"u8","parent":{"krate":0,"index":1939},"children":[],"decl_id":null,"docs":" The pixel type of the frame as defined by Section 9.2\n of the VP8 Specification\n","sig":null,"attributes":[{"value":"/ The pixel type of the frame as defined by Section 9.2","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83836,"byte_end":83893,"line_start":772,"line_end":772,"column_start":5,"column_end":62}},{"value":"/ of the VP8 Specification","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83898,"byte_end":83926,"line_start":773,"line_end":773,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":399},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84322,"byte_end":84332,"line_start":802,"line_end":802,"column_start":12,"column_end":22},"name":"VP8Decoder","qualname":"::webp::vp8::VP8Decoder","value":"VP8Decoder {  }","parent":null,"children":[{"krate":0,"index":401},{"krate":0,"index":402},{"krate":0,"index":403},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":410},{"krate":0,"index":412},{"krate":0,"index":413},{"krate":0,"index":415},{"krate":0,"index":416},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":419},{"krate":0,"index":420},{"krate":0,"index":421}],"decl_id":null,"docs":" VP8 Decoder","sig":null,"attributes":[{"value":"/ VP8 Decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84264,"byte_end":84279,"line_start":799,"line_end":799,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84280,"byte_end":84283,"line_start":800,"line_end":800,"column_start":1,"column_end":4}},{"value":"/ Only decodes keyframes","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84284,"byte_end":84310,"line_start":801,"line_end":801,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":424},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84996,"byte_end":84999,"line_start":837,"line_end":837,"column_start":12,"column_end":15},"name":"new","qualname":"<VP8Decoder<R>>::new","value":"pub fn new(R) -> VP8Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder.\n The reader must present a raw vp8 bitstream to the decoder\n","sig":null,"attributes":[{"value":"/ Create a new decoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84892,"byte_end":84917,"line_start":835,"line_end":835,"column_start":5,"column_end":30}},{"value":"/ The reader must present a raw vp8 bitstream to the decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84922,"byte_end":84984,"line_start":836,"line_end":836,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":441},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":103734,"byte_end":103746,"line_start":1394,"line_end":1394,"column_start":12,"column_end":24},"name":"decode_frame","qualname":"<VP8Decoder<R>>::decode_frame","value":"pub fn decode_frame(&mut Self) -> io::Result<&Frame>","parent":null,"children":[],"decl_id":null,"docs":" Decodes the current frame and returns a reference to it\n","sig":null,"attributes":[{"value":"/ Decodes the current frame and returns a reference to it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":103663,"byte_end":103722,"line_start":1393,"line_end":1393,"column_start":5,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":470},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ppm","qualname":"::ppm","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/mod.rs","parent":null,"children":[{"krate":0,"index":471},{"krate":0,"index":472}],"decl_id":null,"docs":" Encoding of portable pixmap Images\n","sig":null,"attributes":[{"value":"cfg(feature = \"ppm\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1529,"byte_end":1552,"line_start":109,"line_end":109,"column_start":1,"column_end":24}},{"value":"/ Encoding of portable pixmap Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/mod.rs","byte_start":119573,"byte_end":119611,"line_start":1,"line_end":1,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":482},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":119880,"byte_end":119890,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"PPMEncoder","qualname":"::ppm::encoder::PPMEncoder","value":"PPMEncoder {  }","parent":null,"children":[{"krate":0,"index":485}],"decl_id":null,"docs":" A representation of a PPM encoder.\n","sig":null,"attributes":[{"value":"/ A representation of a PPM encoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":119830,"byte_end":119868,"line_start":15,"line_end":15,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":489},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120084,"byte_end":120087,"line_start":23,"line_end":23,"column_start":12,"column_end":15},"name":"new","qualname":"<PPMEncoder>::new","value":"pub fn new(&mut W) -> PPMEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new PPMEncoder from the Writer ```w```.\n This function takes ownership of the Writer.\n","sig":null,"attributes":[{"value":"/ Create a new PPMEncoder from the Writer ```w```.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":119967,"byte_end":120019,"line_start":21,"line_end":21,"column_start":5,"column_end":57}},{"value":"/ This function takes ownership of the Writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120024,"byte_end":120072,"line_start":22,"line_end":22,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120332,"byte_end":120338,"line_start":30,"line_end":30,"column_start":12,"column_end":18},"name":"encode","qualname":"<PPMEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode the buffer ```im``` as a PPM image.\n ```width``` and ```height``` are the dimensions of the buffer.\n ```color``` is the buffers ColorType.\n","sig":null,"attributes":[{"value":"/ Encode the buffer ```im``` as a PPM image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120157,"byte_end":120203,"line_start":27,"line_end":27,"column_start":5,"column_end":51}},{"value":"/ ```width``` and ```height``` are the dimensions of the buffer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120208,"byte_end":120274,"line_start":28,"line_end":28,"column_start":5,"column_end":71}},{"value":"/ ```color``` is the buffers ColorType.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":120279,"byte_end":120320,"line_start":29,"line_end":29,"column_start":5,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":495},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"png","qualname":"::png","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498},{"krate":0,"index":499},{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":506},{"krate":0,"index":507},{"krate":0,"index":508},{"krate":0,"index":517},{"krate":0,"index":520},{"krate":0,"index":524},{"krate":0,"index":531},{"krate":0,"index":534},{"krate":0,"index":539},{"krate":0,"index":542},{"krate":0,"index":545}],"decl_id":null,"docs":" Decoding and Encoding of PNG Images","sig":null,"attributes":[{"value":"cfg(feature = \"png_codec\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1566,"byte_end":1595,"line_start":111,"line_end":111,"column_start":1,"column_end":30}},{"value":"/ Decoding and Encoding of PNG Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122244,"byte_end":122283,"line_start":2,"line_end":2,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122284,"byte_end":122287,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ PNG (Portable Network Graphics) is an image format that supports lossless compression.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122288,"byte_end":122378,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122379,"byte_end":122382,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122383,"byte_end":122402,"line_start":6,"line_end":6,"column_start":1,"column_end":20}},{"value":"/ * http://www.w3.org/TR/PNG/ - The PNG Specification","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122403,"byte_end":122458,"line_start":7,"line_end":7,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122459,"byte_end":122462,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122716,"byte_end":122726,"line_start":25,"line_end":25,"column_start":12,"column_end":22},"name":"PNGDecoder","qualname":"::png::PNGDecoder","value":"PNGDecoder {  }","parent":null,"children":[{"krate":0,"index":519}],"decl_id":null,"docs":" PNG decoder\n","sig":null,"attributes":[{"value":"/ PNG decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122689,"byte_end":122704,"line_start":24,"line_end":24,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122908,"byte_end":122911,"line_start":31,"line_end":31,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGDecoder<R>>::new","value":"pub fn new(R) -> PNGDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122834,"byte_end":122896,"line_start":30,"line_end":30,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124767,"byte_end":124777,"line_start":90,"line_end":90,"column_start":12,"column_end":22},"name":"PNGEncoder","qualname":"::png::PNGEncoder","value":"PNGEncoder {  }","parent":null,"children":[{"krate":0,"index":533}],"decl_id":null,"docs":" PNG encoder\n","sig":null,"attributes":[{"value":"/ PNG encoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124740,"byte_end":124755,"line_start":89,"line_end":89,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124907,"byte_end":124910,"line_start":96,"line_end":96,"column_start":12,"column_end":15},"name":"new","qualname":"<PNGEncoder<W>>::new","value":"pub fn new(W) -> PNGEncoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124837,"byte_end":124895,"line_start":95,"line_end":95,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":537},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":125133,"byte_end":125139,"line_start":105,"line_end":105,"column_start":12,"column_end":18},"name":"encode","qualname":"<PNGEncoder<W>>::encode","value":"pub fn encode(Self, &[u8], u32, u32, ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```\n","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124995,"byte_end":125028,"line_start":102,"line_end":102,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":125033,"byte_end":125085,"line_start":103,"line_end":103,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":125090,"byte_end":125121,"line_start":104,"line_end":104,"column_start":5,"column_end":36}}]},{"kind":"Mod","id":{"krate":0,"index":548},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ico","qualname":"::ico","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550}],"decl_id":null,"docs":"  Decoding of ICO files","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1609,"byte_end":1632,"line_start":113,"line_end":113,"column_start":1,"column_end":24}},{"value":"/  Decoding of ICO files","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127142,"byte_end":127168,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127169,"byte_end":127172,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder for ICO (Windows Icon) image container files","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127173,"byte_end":127232,"line_start":3,"line_end":3,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127233,"byte_end":127236,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127237,"byte_end":127257,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * https://msdn.microsoft.com/en-us/library/ms997538.aspx","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127258,"byte_end":127319,"line_start":6,"line_end":6,"column_start":1,"column_end":62}},{"value":"/  * https://en.wikipedia.org/wiki/ICO_%28file_format%29","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/mod.rs","byte_start":127320,"byte_end":127378,"line_start":7,"line_end":7,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":569},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":127900,"byte_end":127910,"line_start":16,"line_end":16,"column_start":12,"column_end":22},"name":"ICODecoder","qualname":"::ico::decoder::ICODecoder","value":"ICODecoder {  }","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"decl_id":null,"docs":" An ico decoder\n","sig":null,"attributes":[{"value":"/ An ico decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":127870,"byte_end":127888,"line_start":15,"line_end":15,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":583},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":128407,"byte_end":128410,"line_start":42,"line_end":42,"column_start":12,"column_end":15},"name":"new","qualname":"<ICODecoder<R>>::new","value":"pub fn new(R) -> ImageResult<ICODecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":128334,"byte_end":128395,"line_start":41,"line_end":41,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":607},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"jpeg","qualname":"::jpeg","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","parent":null,"children":[{"krate":0,"index":608},{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611},{"krate":0,"index":706},{"krate":0,"index":798},{"krate":0,"index":822}],"decl_id":null,"docs":" Decoding and Encoding of JPEG Images","sig":null,"attributes":[{"value":"cfg(feature = \"jpeg\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1646,"byte_end":1670,"line_start":115,"line_end":115,"column_start":1,"column_end":25}},{"value":"/ Decoding and Encoding of JPEG Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134704,"byte_end":134744,"line_start":1,"line_end":1,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134745,"byte_end":134748,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ JPEG (Joint Photographic Experts Group) is an image format that supports lossy compression.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134749,"byte_end":134844,"line_start":3,"line_end":3,"column_start":1,"column_end":96}},{"value":"/ This module implements the Baseline JPEG standard.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134845,"byte_end":134899,"line_start":4,"line_end":4,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134900,"byte_end":134903,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ #Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134904,"byte_end":134922,"line_start":6,"line_end":6,"column_start":1,"column_end":19}},{"value":"/ * http://www.w3.org/Graphics/JPEG/itu-t81.pdf - The JPEG specification","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134923,"byte_end":134997,"line_start":7,"line_end":7,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/mod.rs","byte_start":134998,"byte_end":135001,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":658},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":139886,"byte_end":139897,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"JPEGEncoder","qualname":"::jpeg::encoder::JPEGEncoder","value":"JPEGEncoder {  }","parent":null,"children":[{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":663},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":666},{"krate":0,"index":667},{"krate":0,"index":668},{"krate":0,"index":669}],"decl_id":null,"docs":" The representation of a JPEG encoder\n","sig":null,"attributes":[{"value":"/ The representation of a JPEG encoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":139834,"byte_end":139874,"line_start":125,"line_end":125,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":673},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":140279,"byte_end":140282,"line_start":143,"line_end":143,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGEncoder>::new","value":"pub fn new(&mut W) -> JPEGEncoder<, W>","parent":null,"children":[],"decl_id":null,"docs":" Create a new encoder that writes its output to ```w```\n","sig":null,"attributes":[{"value":"/ Create a new encoder that writes its output to ```w```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":140209,"byte_end":140267,"line_start":142,"line_end":142,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141782,"byte_end":141788,"line_start":181,"line_end":181,"column_start":12,"column_end":18},"name":"encode","qualname":"<JPEGEncoder>::encode","value":"pub fn encode(&mut Self, &[u8], u32, u32, color::ColorType) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes the image ```image```\n that has dimensions ```width``` and ```height```\n and ```ColorType``` ```c```","sig":null,"attributes":[{"value":"/ Encodes the image ```image```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141578,"byte_end":141611,"line_start":176,"line_end":176,"column_start":5,"column_end":38}},{"value":"/ that has dimensions ```width``` and ```height```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141616,"byte_end":141668,"line_start":177,"line_end":177,"column_start":5,"column_end":57}},{"value":"/ and ```ColorType``` ```c```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141673,"byte_end":141704,"line_start":178,"line_end":178,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141709,"byte_end":141712,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ The Image in encoded with subsampling ratio 4:2:2","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":141717,"byte_end":141770,"line_start":180,"line_end":180,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":1985},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155780,"byte_end":155789,"line_start":36,"line_end":36,"column_start":12,"column_end":21},"name":"Component","qualname":"::jpeg::decoder::Component","value":"Component { id, h, v, tq, dc_table, ac_table, dc_pred }","parent":null,"children":[{"krate":0,"index":1986},{"krate":0,"index":1987},{"krate":0,"index":1988},{"krate":0,"index":1989},{"krate":0,"index":1990},{"krate":0,"index":1991},{"krate":0,"index":1992}],"decl_id":null,"docs":" A representation of a JPEG component\n","sig":null,"attributes":[{"value":"/ A representation of a JPEG component","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155705,"byte_end":155745,"line_start":34,"line_end":34,"column_start":1,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1986},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155835,"byte_end":155837,"line_start":38,"line_end":38,"column_start":9,"column_end":11},"name":"id","qualname":"::jpeg::decoder::Component::id","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" The Component's identifier\n","sig":null,"attributes":[{"value":"/ The Component's identifier","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155796,"byte_end":155826,"line_start":37,"line_end":37,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1987},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155887,"byte_end":155888,"line_start":41,"line_end":41,"column_start":9,"column_end":10},"name":"h","qualname":"::jpeg::decoder::Component::h","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" Horizontal sampling factor\n","sig":null,"attributes":[{"value":"/ Horizontal sampling factor","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155848,"byte_end":155878,"line_start":40,"line_end":40,"column_start":5,"column_end":35}}]},{"kind":"Field","id":{"krate":0,"index":1988},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155936,"byte_end":155937,"line_start":44,"line_end":44,"column_start":9,"column_end":10},"name":"v","qualname":"::jpeg::decoder::Component::v","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" Vertical sampling factor\n","sig":null,"attributes":[{"value":"/ Vertical sampling factor","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155899,"byte_end":155927,"line_start":43,"line_end":43,"column_start":5,"column_end":33}}]},{"kind":"Field","id":{"krate":0,"index":1989},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155992,"byte_end":155994,"line_start":47,"line_end":47,"column_start":9,"column_end":11},"name":"tq","qualname":"::jpeg::decoder::Component::tq","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" The quantization table selector\n","sig":null,"attributes":[{"value":"/ The quantization table selector","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":155948,"byte_end":155983,"line_start":46,"line_end":46,"column_start":5,"column_end":40}}]},{"kind":"Field","id":{"krate":0,"index":1990},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156047,"byte_end":156055,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"name":"dc_table","qualname":"::jpeg::decoder::Component::dc_table","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" Index to the Huffman DC Table\n","sig":null,"attributes":[{"value":"/ Index to the Huffman DC Table","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156005,"byte_end":156038,"line_start":49,"line_end":49,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1991},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156108,"byte_end":156116,"line_start":53,"line_end":53,"column_start":9,"column_end":17},"name":"ac_table","qualname":"::jpeg::decoder::Component::ac_table","value":"u8","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" Index to the AC Huffman Table\n","sig":null,"attributes":[{"value":"/ Index to the AC Huffman Table","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156066,"byte_end":156099,"line_start":52,"line_end":52,"column_start":5,"column_end":38}}]},{"kind":"Field","id":{"krate":0,"index":1992},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156174,"byte_end":156181,"line_start":56,"line_end":56,"column_start":9,"column_end":16},"name":"dc_pred","qualname":"::jpeg::decoder::Component::dc_pred","value":"i32","parent":{"krate":0,"index":1985},"children":[],"decl_id":null,"docs":" The dc prediction of the component\n","sig":null,"attributes":[{"value":"/ The dc prediction of the component","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156127,"byte_end":156165,"line_start":55,"line_end":55,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":742},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157084,"byte_end":157095,"line_start":102,"line_end":102,"column_start":12,"column_end":23},"name":"JPEGDecoder","qualname":"::jpeg::decoder::JPEGDecoder","value":"JPEGDecoder {  }","parent":null,"children":[{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":758},{"krate":0,"index":759},{"krate":0,"index":760},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" The representation of a JPEG decoder","sig":null,"attributes":[{"value":"/ The representation of a JPEG decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":156974,"byte_end":157014,"line_start":99,"line_end":99,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157015,"byte_end":157018,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ Does not support decoding progressive JPEG images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157019,"byte_end":157072,"line_start":101,"line_end":101,"column_start":1,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157715,"byte_end":157718,"line_start":135,"line_end":135,"column_start":12,"column_end":15},"name":"new","qualname":"<JPEGDecoder<R>>::new","value":"pub fn new(R) -> JPEGDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157642,"byte_end":157703,"line_start":134,"line_end":134,"column_start":5,"column_end":66}}]},{"kind":"Mod","id":{"krate":0,"index":841},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gif","qualname":"::gif","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","parent":null,"children":[{"krate":0,"index":842},{"krate":0,"index":843},{"krate":0,"index":844},{"krate":0,"index":845},{"krate":0,"index":846},{"krate":0,"index":847},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":872},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":887}],"decl_id":null,"docs":"  Decoding of GIF Images","sig":null,"attributes":[{"value":"cfg(feature = \"gif_codec\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1685,"byte_end":1714,"line_start":117,"line_end":117,"column_start":1,"column_end":30}},{"value":"/  Decoding of GIF Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":191874,"byte_end":191901,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":191902,"byte_end":191905,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  GIF (Graphics Interchange Format) is an image format that supports lossless compression.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":191906,"byte_end":191999,"line_start":3,"line_end":3,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192000,"byte_end":192003,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192004,"byte_end":192024,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * http://www.w3.org/Graphics/GIF/spec-gif89a.txt - The GIF Specification","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192025,"byte_end":192102,"line_start":6,"line_end":6,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192103,"byte_end":192106,"line_start":7,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":865},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192382,"byte_end":192389,"line_start":24,"line_end":24,"column_start":12,"column_end":19},"name":"Decoder","qualname":"::gif::Decoder","value":"Decoder {  }","parent":null,"children":[{"krate":0,"index":867}],"decl_id":null,"docs":" GIF decoder\n","sig":null,"attributes":[{"value":"/ GIF decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192355,"byte_end":192370,"line_start":23,"line_end":23,"column_start":1,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192568,"byte_end":192571,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<Decoder<R>>::new","value":"pub fn new(R) -> Decoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new decoder that decodes the input steam ```r```\n","sig":null,"attributes":[{"value":"/ Creates a new decoder that decodes the input steam ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192494,"byte_end":192556,"line_start":29,"line_end":29,"column_start":5,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":879},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194450,"byte_end":194457,"line_start":91,"line_end":91,"column_start":12,"column_end":19},"name":"Encoder","qualname":"::gif::Encoder","value":"Encoder {  }","parent":null,"children":[{"krate":0,"index":881}],"decl_id":null,"docs":" GIF encoder.\n","sig":null,"attributes":[{"value":"/ GIF encoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194422,"byte_end":194438,"line_start":90,"line_end":90,"column_start":1,"column_end":17}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194557,"byte_end":194560,"line_start":97,"line_end":97,"column_start":12,"column_end":15},"name":"new","qualname":"<Encoder<W>>::new","value":"pub fn new(W) -> Encoder<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new GIF encoder.\n","sig":null,"attributes":[{"value":"/ Creates a new GIF encoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194515,"byte_end":194545,"line_start":96,"line_end":96,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":885},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194670,"byte_end":194676,"line_start":103,"line_end":103,"column_start":12,"column_end":18},"name":"encode","qualname":"<Encoder<W>>::encode","value":"pub fn encode(Self, Frame) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encodes a frame.\n","sig":null,"attributes":[{"value":"/ Encodes a frame.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194638,"byte_end":194658,"line_start":102,"line_end":102,"column_start":5,"column_end":25}}]},{"kind":"Mod","id":{"krate":0,"index":890},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tiff","qualname":"::tiff","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","parent":null,"children":[{"krate":0,"index":891},{"krate":0,"index":892}],"decl_id":null,"docs":"  Decoding and Encoding of TIFF Images","sig":null,"attributes":[{"value":"cfg(feature = \"tiff\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1728,"byte_end":1752,"line_start":119,"line_end":119,"column_start":1,"column_end":25}},{"value":"/  Decoding and Encoding of TIFF Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195271,"byte_end":195312,"line_start":1,"line_end":1,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195313,"byte_end":195316,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  TIFF (Tagged Image File Format) is a versatile image format that supports","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195317,"byte_end":195395,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/  lossless and lossy compression.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195396,"byte_end":195432,"line_start":4,"line_end":4,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195433,"byte_end":195436,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195437,"byte_end":195457,"line_start":6,"line_end":6,"column_start":1,"column_end":21}},{"value":"/  * http://partners.adobe.com/public/developer/tiff/index.html - The TIFF specification","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195458,"byte_end":195548,"line_start":7,"line_end":7,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/mod.rs","byte_start":195549,"byte_end":195552,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2149},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220514,"byte_end":220526,"line_start":12,"line_end":12,"column_start":5,"column_end":17},"name":"LittleEndian","qualname":"::tiff::decoder::stream::ByteOrder::LittleEndian","value":"ByteOrder::LittleEndian","parent":{"krate":0,"index":2148},"children":[],"decl_id":null,"docs":" little endian byte order\n","sig":null,"attributes":[{"value":"/ little endian byte order","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220481,"byte_end":220509,"line_start":11,"line_end":11,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2151},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220562,"byte_end":220571,"line_start":14,"line_end":14,"column_start":5,"column_end":14},"name":"BigEndian","qualname":"::tiff::decoder::stream::ByteOrder::BigEndian","value":"ByteOrder::BigEndian","parent":{"krate":0,"index":2148},"children":[],"decl_id":null,"docs":" big endian byte order\n","sig":null,"attributes":[{"value":"/ big endian byte order","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220532,"byte_end":220557,"line_start":13,"line_end":13,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":2148},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220465,"byte_end":220474,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ByteOrder","qualname":"::tiff::decoder::stream::ByteOrder","value":"pub enum ByteOrder {\n\n    /// little endian byte order\n    LittleEndian,\n\n    /// big endian byte order\n    BigEndian,\n}","parent":null,"children":[{"krate":0,"index":2149},{"krate":0,"index":2151}],"decl_id":null,"docs":" Byte order of the TIFF file.\n","sig":null,"attributes":[{"value":"/ Byte order of the TIFF file.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220393,"byte_end":220425,"line_start":8,"line_end":8,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":2261},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":196808,"byte_end":196819,"line_start":78,"line_end":78,"column_start":12,"column_end":23},"name":"TIFFDecoder","qualname":"::tiff::decoder::TIFFDecoder","value":"TIFFDecoder {  }","parent":null,"children":[{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2268},{"krate":0,"index":2269},{"krate":0,"index":2270},{"krate":0,"index":2271},{"krate":0,"index":2272}],"decl_id":null,"docs":" The representation of a TIFF decoder","sig":null,"attributes":[{"value":"/ The representation of a TIFF decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":196674,"byte_end":196714,"line_start":74,"line_end":74,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":196715,"byte_end":196718,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ Currently does not support decoding of interlaced images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":196719,"byte_end":196779,"line_start":76,"line_end":76,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":993},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":198560,"byte_end":198563,"line_start":129,"line_end":129,"column_start":12,"column_end":15},"name":"new","qualname":"<TIFFDecoder<R>>::new","value":"pub fn new(R) -> ImageResult<TIFFDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":198487,"byte_end":198548,"line_start":128,"line_end":128,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":200026,"byte_end":200030,"line_start":169,"line_end":169,"column_start":12,"column_end":16},"name":"init","qualname":"<TIFFDecoder<R>>::init","value":"pub fn init(Self) -> ImageResult<TIFFDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Initializes the decoder.\n","sig":null,"attributes":[{"value":"/ Initializes the decoder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":199986,"byte_end":200014,"line_start":168,"line_end":168,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":200319,"byte_end":200329,"line_start":176,"line_end":176,"column_start":12,"column_end":22},"name":"next_image","qualname":"<TIFFDecoder<R>>::next_image","value":"pub fn next_image(Self) -> ImageResult<TIFFDecoder<R>>","parent":null,"children":[],"decl_id":null,"docs":" Reads in the next image.\n If there is no further image in the TIFF file a format error is return.\n To determine whether there are more images call `TIFFDecoder::more_images` instead.\n","sig":null,"attributes":[{"value":"/ Reads in the next image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":200107,"byte_end":200135,"line_start":173,"line_end":173,"column_start":5,"column_end":33}},{"value":"/ If there is no further image in the TIFF file a format error is return.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":200140,"byte_end":200215,"line_start":174,"line_end":174,"column_start":5,"column_end":80}},{"value":"/ To determine whether there are more images call `TIFFDecoder::more_images` instead.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":200220,"byte_end":200307,"line_start":175,"line_end":175,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202460,"byte_end":202471,"line_start":232,"line_end":232,"column_start":12,"column_end":23},"name":"more_images","qualname":"<TIFFDecoder<R>>::more_images","value":"pub fn more_images(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if there is at least one more image available.\n","sig":null,"attributes":[{"value":"/ Returns `true` if there is at least one more image available.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202383,"byte_end":202448,"line_start":231,"line_end":231,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202633,"byte_end":202643,"line_start":240,"line_end":240,"column_start":12,"column_end":22},"name":"byte_order","qualname":"<TIFFDecoder<R>>::byte_order","value":"pub fn byte_order(&Self) -> ByteOrder","parent":null,"children":[],"decl_id":null,"docs":" Returns the byte_order\n","sig":null,"attributes":[{"value":"/ Returns the byte_order","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202595,"byte_end":202621,"line_start":239,"line_end":239,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202755,"byte_end":202765,"line_start":246,"line_end":246,"column_start":12,"column_end":22},"name":"read_short","qualname":"<TIFFDecoder<R>>::read_short","value":"pub fn read_short(&mut Self) -> Result<u16, byteorder::Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a TIFF short value\n","sig":null,"attributes":[{"value":"/ Reads a TIFF short value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202701,"byte_end":202729,"line_start":244,"line_end":244,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202734,"byte_end":202743,"line_start":245,"line_end":245,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202907,"byte_end":202916,"line_start":252,"line_end":252,"column_start":12,"column_end":21},"name":"read_long","qualname":"<TIFFDecoder<R>>::read_long","value":"pub fn read_long(&mut Self) -> Result<u32, byteorder::Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a TIFF long value\n","sig":null,"attributes":[{"value":"/ Reads a TIFF long value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202854,"byte_end":202881,"line_start":250,"line_end":250,"column_start":5,"column_end":32}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":202886,"byte_end":202895,"line_start":251,"line_end":251,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203070,"byte_end":203081,"line_start":258,"line_end":258,"column_start":12,"column_end":23},"name":"read_offset","qualname":"<TIFFDecoder<R>>::read_offset","value":"pub fn read_offset(&mut Self) -> Result<[u8; ], byteorder::Error>","parent":null,"children":[],"decl_id":null,"docs":" Reads a TIFF IFA offset/value field\n","sig":null,"attributes":[{"value":"/ Reads a TIFF IFA offset/value field","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203005,"byte_end":203044,"line_start":256,"line_end":256,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203049,"byte_end":203058,"line_start":257,"line_end":257,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203377,"byte_end":203388,"line_start":268,"line_end":268,"column_start":12,"column_end":23},"name":"goto_offset","qualname":"<TIFFDecoder<R>>::goto_offset","value":"pub fn goto_offset(&mut Self, u32) -> io::Result<()>","parent":null,"children":[],"decl_id":null,"docs":" Moves the cursor to the specified offset\n","sig":null,"attributes":[{"value":"/ Moves the cursor to the specified offset","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203307,"byte_end":203351,"line_start":266,"line_end":266,"column_start":5,"column_end":49}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":203356,"byte_end":203365,"line_start":267,"line_end":267,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":1025},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"tga","qualname":"::tga","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","parent":null,"children":[{"krate":0,"index":1026},{"krate":0,"index":1027}],"decl_id":null,"docs":" Decoding of TGA Images","sig":null,"attributes":[{"value":"cfg(feature = \"tga\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1767,"byte_end":1790,"line_start":121,"line_end":121,"column_start":1,"column_end":24}},{"value":"/ Decoding of TGA Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":223168,"byte_end":223194,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":223195,"byte_end":223198,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":223199,"byte_end":223218,"line_start":3,"line_end":3,"column_start":1,"column_end":20}},{"value":"/ http://googlesites.inequation.org/tgautilities","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/mod.rs","byte_start":223219,"byte_end":223269,"line_start":4,"line_end":4,"column_start":1,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":1079},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228198,"byte_end":228208,"line_start":163,"line_end":163,"column_start":12,"column_end":22},"name":"TGADecoder","qualname":"::tga::decoder::TGADecoder","value":"TGADecoder {  }","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089}],"decl_id":null,"docs":" The representation of a TGA decoder\n","sig":null,"attributes":[{"value":"/ The representation of a TGA decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228147,"byte_end":228186,"line_start":162,"line_end":162,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228543,"byte_end":228546,"line_start":180,"line_end":180,"column_start":12,"column_end":15},"name":"new","qualname":"<TGADecoder<R>>::new","value":"pub fn new(R) -> TGADecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream `r`\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream `r`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228474,"byte_end":228531,"line_start":179,"line_end":179,"column_start":5,"column_end":62}}]},{"kind":"Mod","id":{"krate":0,"index":1113},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bmp","qualname":"::bmp","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","parent":null,"children":[{"krate":0,"index":1114},{"krate":0,"index":1115}],"decl_id":null,"docs":"  Decoding of BMP Images","sig":null,"attributes":[{"value":"cfg(feature = \"bmp\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1804,"byte_end":1827,"line_start":123,"line_end":123,"column_start":1,"column_end":24}},{"value":"/  Decoding of BMP Images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236743,"byte_end":236770,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236771,"byte_end":236774,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/  A decoder for BMP (Windows Bitmap) images","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236775,"byte_end":236821,"line_start":3,"line_end":3,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236822,"byte_end":236825,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/  # Related Links","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236826,"byte_end":236846,"line_start":5,"line_end":5,"column_start":1,"column_end":21}},{"value":"/  * https://msdn.microsoft.com/en-us/library/windows/desktop/dd183375%28v=vs.85%29.aspx","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236847,"byte_end":236937,"line_start":6,"line_end":6,"column_start":1,"column_end":91}},{"value":"/  * https://en.wikipedia.org/wiki/BMP_file_format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236938,"byte_end":236990,"line_start":7,"line_end":7,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/mod.rs","byte_start":236991,"byte_end":236994,"line_start":8,"line_end":8,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1178},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":240692,"byte_end":240702,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"BMPDecoder","qualname":"::bmp::decoder::BMPDecoder","value":"BMPDecoder {  }","parent":null,"children":[{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188},{"krate":0,"index":1189},{"krate":0,"index":1190},{"krate":0,"index":1191},{"krate":0,"index":1192},{"krate":0,"index":1193}],"decl_id":null,"docs":" A bmp decoder\n","sig":null,"attributes":[{"value":"/ A bmp decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":240663,"byte_end":240680,"line_start":122,"line_end":122,"column_start":1,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":1223},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":243571,"byte_end":243574,"line_start":218,"line_end":218,"column_start":12,"column_end":15},"name":"new","qualname":"<BMPDecoder<R>>::new","value":"pub fn new(R) -> BMPDecoder<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new decoder that decodes from the stream ```r```\n","sig":null,"attributes":[{"value":"/ Create a new decoder that decodes from the stream ```r```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":243498,"byte_end":243559,"line_start":217,"line_end":217,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1224},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":244138,"byte_end":244144,"line_start":242,"line_end":242,"column_start":12,"column_end":18},"name":"reader","qualname":"<BMPDecoder<R>>::reader","value":"pub fn reader(&mut Self) -> &mut R","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":244084,"byte_end":244107,"line_start":240,"line_end":240,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":250894,"byte_end":250921,"line_start":412,"line_end":412,"column_start":12,"column_end":39},"name":"read_metadata_in_ico_format","qualname":"<BMPDecoder<R>>::read_metadata_in_ico_format","value":"pub fn read_metadata_in_ico_format(&mut Self, u32) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"ico\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":250840,"byte_end":250863,"line_start":410,"line_end":410,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2345},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268566,"byte_end":268577,"line_start":19,"line_end":19,"column_start":5,"column_end":16},"name":"FormatError","qualname":"::image::ImageError::FormatError","value":"ImageError::FormatError(String)","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" The Image is not formatted properly\n","sig":null,"attributes":[{"value":"/ The Image is not formatted properly","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268522,"byte_end":268561,"line_start":18,"line_end":18,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2348},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268657,"byte_end":268671,"line_start":22,"line_end":22,"column_start":5,"column_end":19},"name":"DimensionError","qualname":"::image::ImageError::DimensionError","value":"ImageError::DimensionError","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" The Image's dimensions are either too small or too large\n","sig":null,"attributes":[{"value":"/ The Image's dimensions are either too small or too large","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268592,"byte_end":268652,"line_start":21,"line_end":21,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2350},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268733,"byte_end":268749,"line_start":25,"line_end":25,"column_start":5,"column_end":21},"name":"UnsupportedError","qualname":"::image::ImageError::UnsupportedError","value":"ImageError::UnsupportedError(String)","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" The Decoder does not support this image format\n","sig":null,"attributes":[{"value":"/ The Decoder does not support this image format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268678,"byte_end":268728,"line_start":24,"line_end":24,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2353},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268817,"byte_end":268833,"line_start":28,"line_end":28,"column_start":5,"column_end":21},"name":"UnsupportedColor","qualname":"::image::ImageError::UnsupportedColor","value":"ImageError::UnsupportedColor(ColorType)","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" The Decoder does not support this color type\n","sig":null,"attributes":[{"value":"/ The Decoder does not support this color type","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268764,"byte_end":268812,"line_start":27,"line_end":27,"column_start":5,"column_end":53}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2356},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268931,"byte_end":268944,"line_start":32,"line_end":32,"column_start":5,"column_end":18},"name":"NotEnoughData","qualname":"::image::ImageError::NotEnoughData","value":"ImageError::NotEnoughData","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" Not enough data was provided to the Decoder\n to decode the image\n","sig":null,"attributes":[{"value":"/ Not enough data was provided to the Decoder","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268851,"byte_end":268898,"line_start":30,"line_end":30,"column_start":5,"column_end":52}},{"value":"/ to decode the image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268903,"byte_end":268926,"line_start":31,"line_end":31,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2358},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":269006,"byte_end":269013,"line_start":35,"line_end":35,"column_start":5,"column_end":12},"name":"IoError","qualname":"::image::ImageError::IoError","value":"ImageError::IoError(io::Error)","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" An I/O Error occurred while decoding the image\n","sig":null,"attributes":[{"value":"/ An I/O Error occurred while decoding the image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268951,"byte_end":269001,"line_start":34,"line_end":34,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2361},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":269077,"byte_end":269085,"line_start":38,"line_end":38,"column_start":5,"column_end":13},"name":"ImageEnd","qualname":"::image::ImageError::ImageEnd","value":"ImageError::ImageEnd","parent":{"krate":0,"index":2344},"children":[],"decl_id":null,"docs":" The end of the image has been reached\n","sig":null,"attributes":[{"value":"/ The end of the image has been reached","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":269031,"byte_end":269072,"line_start":37,"line_end":37,"column_start":5,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":2344},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268505,"byte_end":268515,"line_start":17,"line_end":17,"column_start":10,"column_end":20},"name":"ImageError","qualname":"::image::ImageError","value":"pub enum ImageError {\n\n    /// The Image is not formatted properly\n    FormatError(String),\n\n    /// The Image's dimensions are either too small or too large\n    DimensionError,\n\n    /// The Decoder does not support this image format\n    UnsupportedError(String),\n\n    /// The Decoder does not support this color type\n    UnsupportedColor(ColorType),\n\n    /// Not enough data was provided to the Decoder\n    /// to decode the image\n    NotEnoughData,\n\n    /// An I/O Error occurred while decoding the image\n    IoError(io::Error),\n\n    /// The end of the image has been reached\n    ImageEnd,\n}","parent":null,"children":[{"krate":0,"index":2345},{"krate":0,"index":2348},{"krate":0,"index":2350},{"krate":0,"index":2353},{"krate":0,"index":2356},{"krate":0,"index":2358},{"krate":0,"index":2361}],"decl_id":null,"docs":" An enumeration of Image errors\n","sig":null,"attributes":[{"value":"/ An enumeration of Image errors","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":268444,"byte_end":268478,"line_start":15,"line_end":15,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":1279},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271332,"byte_end":271343,"line_start":97,"line_end":97,"column_start":10,"column_end":21},"name":"ImageResult","qualname":"::image::ImageResult","value":"Result<T, ImageError>","parent":null,"children":[],"decl_id":null,"docs":" Result of an image decoding/encoding process\n","sig":null,"attributes":[{"value":"/ Result of an image decoding/encoding process","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271274,"byte_end":271322,"line_start":96,"line_end":96,"column_start":1,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1282},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271471,"byte_end":271473,"line_start":102,"line_end":102,"column_start":5,"column_end":7},"name":"U8","qualname":"::image::DecodingResult::U8","value":"DecodingResult::U8(Vec<u8>)","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" A vector of unsigned bytes\n","sig":null,"attributes":[{"value":"/ A vector of unsigned bytes","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271436,"byte_end":271466,"line_start":101,"line_end":101,"column_start":5,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1285},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271523,"byte_end":271526,"line_start":104,"line_end":104,"column_start":5,"column_end":8},"name":"U16","qualname":"::image::DecodingResult::U16","value":"DecodingResult::U16(Vec<u16>)","parent":{"krate":0,"index":1281},"children":[],"decl_id":null,"docs":" A vector of unsigned words\n","sig":null,"attributes":[{"value":"/ A vector of unsigned words","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271488,"byte_end":271518,"line_start":103,"line_end":103,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":1281},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271415,"byte_end":271429,"line_start":100,"line_end":100,"column_start":10,"column_end":24},"name":"DecodingResult","qualname":"::image::DecodingResult","value":"pub enum DecodingResult {\n\n    /// A vector of unsigned bytes\n    U8(Vec<u8>),\n\n    /// A vector of unsigned words\n    U16(Vec<u16>),\n}","parent":null,"children":[{"krate":0,"index":1282},{"krate":0,"index":1285}],"decl_id":null,"docs":" Result of a decoding process\n","sig":null,"attributes":[{"value":"/ Result of a decoding process","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271373,"byte_end":271405,"line_start":99,"line_end":99,"column_start":1,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2366},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271923,"byte_end":271926,"line_start":120,"line_end":120,"column_start":5,"column_end":8},"name":"PNG","qualname":"::image::ImageFormat::PNG","value":"ImageFormat::PNG","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in PNG Format\n","sig":null,"attributes":[{"value":"/ An Image in PNG Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271892,"byte_end":271918,"line_start":119,"line_end":119,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2368},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271965,"byte_end":271969,"line_start":123,"line_end":123,"column_start":5,"column_end":9},"name":"JPEG","qualname":"::image::ImageFormat::JPEG","value":"ImageFormat::JPEG","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in JPEG Format\n","sig":null,"attributes":[{"value":"/ An Image in JPEG Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271933,"byte_end":271960,"line_start":122,"line_end":122,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2370},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272007,"byte_end":272010,"line_start":126,"line_end":126,"column_start":5,"column_end":8},"name":"GIF","qualname":"::image::ImageFormat::GIF","value":"ImageFormat::GIF","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in GIF Format\n","sig":null,"attributes":[{"value":"/ An Image in GIF Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271976,"byte_end":272002,"line_start":125,"line_end":125,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2372},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272049,"byte_end":272053,"line_start":129,"line_end":129,"column_start":5,"column_end":9},"name":"WEBP","qualname":"::image::ImageFormat::WEBP","value":"ImageFormat::WEBP","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in WEBP Format\n","sig":null,"attributes":[{"value":"/ An Image in WEBP Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272017,"byte_end":272044,"line_start":128,"line_end":128,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2374},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272091,"byte_end":272094,"line_start":132,"line_end":132,"column_start":5,"column_end":8},"name":"PPM","qualname":"::image::ImageFormat::PPM","value":"ImageFormat::PPM","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in PPM Format\n","sig":null,"attributes":[{"value":"/ An Image in PPM Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272060,"byte_end":272086,"line_start":131,"line_end":131,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2376},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272133,"byte_end":272137,"line_start":135,"line_end":135,"column_start":5,"column_end":9},"name":"TIFF","qualname":"::image::ImageFormat::TIFF","value":"ImageFormat::TIFF","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in TIFF Format\n","sig":null,"attributes":[{"value":"/ An Image in TIFF Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272101,"byte_end":272128,"line_start":134,"line_end":134,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2378},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272175,"byte_end":272178,"line_start":138,"line_end":138,"column_start":5,"column_end":8},"name":"TGA","qualname":"::image::ImageFormat::TGA","value":"ImageFormat::TGA","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in TGA Format\n","sig":null,"attributes":[{"value":"/ An Image in TGA Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272144,"byte_end":272170,"line_start":137,"line_end":137,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2380},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272216,"byte_end":272219,"line_start":141,"line_end":141,"column_start":5,"column_end":8},"name":"BMP","qualname":"::image::ImageFormat::BMP","value":"ImageFormat::BMP","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in BMP Format\n","sig":null,"attributes":[{"value":"/ An Image in BMP Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272185,"byte_end":272211,"line_start":140,"line_end":140,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2382},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272257,"byte_end":272260,"line_start":144,"line_end":144,"column_start":5,"column_end":8},"name":"ICO","qualname":"::image::ImageFormat::ICO","value":"ImageFormat::ICO","parent":{"krate":0,"index":2365},"children":[],"decl_id":null,"docs":" An Image in ICO Format\n","sig":null,"attributes":[{"value":"/ An Image in ICO Format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272226,"byte_end":272252,"line_start":143,"line_end":143,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":2365},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271874,"byte_end":271885,"line_start":118,"line_end":118,"column_start":10,"column_end":21},"name":"ImageFormat","qualname":"::image::ImageFormat","value":"pub enum ImageFormat {\n\n    /// An Image in PNG Format\n    PNG,\n\n    /// An Image in JPEG Format\n    JPEG,\n\n    /// An Image in GIF Format\n    GIF,\n\n    /// An Image in WEBP Format\n    WEBP,\n\n    /// An Image in PPM Format\n    PPM,\n\n    /// An Image in TIFF Format\n    TIFF,\n\n    /// An Image in TGA Format\n    TGA,\n\n    /// An Image in BMP Format\n    BMP,\n\n    /// An Image in ICO Format\n    ICO,\n}","parent":null,"children":[{"krate":0,"index":2366},{"krate":0,"index":2368},{"krate":0,"index":2370},{"krate":0,"index":2372},{"krate":0,"index":2374},{"krate":0,"index":2376},{"krate":0,"index":2378},{"krate":0,"index":2380},{"krate":0,"index":2382}],"decl_id":null,"docs":" An enumeration of supported image formats.\n Not all formats support both encoding and decoding.\n","sig":null,"attributes":[{"value":"/ An enumeration of supported image formats.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271717,"byte_end":271763,"line_start":115,"line_end":115,"column_start":1,"column_end":47}},{"value":"/ Not all formats support both encoding and decoding.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271764,"byte_end":271819,"line_start":116,"line_end":116,"column_start":1,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":1296},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272316,"byte_end":272328,"line_start":148,"line_end":148,"column_start":11,"column_end":23},"name":"ImageDecoder","qualname":"::image::ImageDecoder","value":"ImageDecoder: Sized","parent":null,"children":[{"krate":0,"index":1297},{"krate":0,"index":1298},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1302},{"krate":0,"index":1303},{"krate":0,"index":1304}],"decl_id":null,"docs":" The trait that all decoders implement\n","sig":null,"attributes":[{"value":"/ The trait that all decoders implement","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272264,"byte_end":272305,"line_start":147,"line_end":147,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1297},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272414,"byte_end":272424,"line_start":150,"line_end":150,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::ImageDecoder::dimensions","value":"pub fn dimensions(&mut Self) -> ImageResult<(u32, u32)>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Returns a tuple containing the width and height of the image\n","sig":null,"attributes":[{"value":"/ Returns a tuple containing the width and height of the image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272342,"byte_end":272406,"line_start":149,"line_end":149,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":1298},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272539,"byte_end":272548,"line_start":153,"line_end":153,"column_start":8,"column_end":17},"name":"colortype","qualname":"::image::ImageDecoder::colortype","value":"pub fn colortype(&mut Self) -> ImageResult<ColorType>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Returns the color type of the image e.g. RGB(8) (8bit RGB)\n","sig":null,"attributes":[{"value":"/ Returns the color type of the image e.g. RGB(8) (8bit RGB)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272469,"byte_end":272531,"line_start":152,"line_end":152,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1299},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272663,"byte_end":272670,"line_start":156,"line_end":156,"column_start":8,"column_end":15},"name":"row_len","qualname":"::image::ImageDecoder::row_len","value":"pub fn row_len(&mut Self) -> ImageResult<usize>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Returns the length in bytes of one decoded row of the image\n","sig":null,"attributes":[{"value":"/ Returns the length in bytes of one decoded row of the image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272592,"byte_end":272655,"line_start":155,"line_end":155,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1300},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272791,"byte_end":272804,"line_start":159,"line_end":159,"column_start":8,"column_end":21},"name":"read_scanline","qualname":"::image::ImageDecoder::read_scanline","value":"pub fn read_scanline(&mut Self, &mut [u8]) -> ImageResult<u32>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Reads one row from the image into ```buf``` and returns the row index\n","sig":null,"attributes":[{"value":"/ Reads one row from the image into ```buf``` and returns the row index","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272710,"byte_end":272783,"line_start":158,"line_end":158,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1301},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272920,"byte_end":272930,"line_start":162,"line_end":162,"column_start":8,"column_end":18},"name":"read_image","qualname":"::image::ImageDecoder::read_image","value":"pub fn read_image(&mut Self) -> ImageResult<DecodingResult>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Decodes the entire image and return it as a Vector\n","sig":null,"attributes":[{"value":"/ Decodes the entire image and return it as a Vector","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272858,"byte_end":272912,"line_start":161,"line_end":161,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1302},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273028,"byte_end":273039,"line_start":165,"line_end":165,"column_start":8,"column_end":19},"name":"is_animated","qualname":"::image::ImageDecoder::is_animated","value":"pub fn is_animated(&mut Self) -> ImageResult<bool>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Returns true if the image is animated\n","sig":null,"attributes":[{"value":"/ Returns true if the image is animated","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272979,"byte_end":273020,"line_start":164,"line_end":164,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1303},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273325,"byte_end":273336,"line_start":174,"line_end":174,"column_start":8,"column_end":19},"name":"into_frames","qualname":"::image::ImageDecoder::into_frames","value":"pub fn into_frames(Self) -> ImageResult<Frames>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Returns the frames of the image","sig":null,"attributes":[{"value":"/ Returns the frames of the image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273211,"byte_end":273246,"line_start":171,"line_end":171,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273251,"byte_end":273254,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ If the image is not animated it returns a single frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273259,"byte_end":273317,"line_start":173,"line_end":173,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":1304},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273645,"byte_end":273654,"line_start":182,"line_end":182,"column_start":8,"column_end":17},"name":"load_rect","qualname":"::image::ImageDecoder::load_rect","value":"pub fn load_rect(&mut Self, u32, u32, u32, u32) -> ImageResult<Vec<u8>>","parent":{"krate":0,"index":1296},"children":[],"decl_id":null,"docs":" Decodes a specific region of the image, represented by the rectangle\n starting from ```x``` and ```y``` and having ```length``` and ```width```\n","sig":null,"attributes":[{"value":"/ Decodes a specific region of the image, represented by the rectangle","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273483,"byte_end":273555,"line_start":180,"line_end":180,"column_start":5,"column_end":77}},{"value":"/ starting from ```x``` and ```y``` and having ```length``` and ```width```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":273560,"byte_end":273637,"line_start":181,"line_end":181,"column_start":5,"column_end":82}}]},{"kind":"Struct","id":{"krate":0,"index":1305},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":274699,"byte_end":274705,"line_start":224,"line_end":224,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::image::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1308},{"krate":0,"index":1309},{"krate":0,"index":1310},{"krate":0,"index":1311},{"krate":0,"index":1312}],"decl_id":null,"docs":" Immutable pixel iterator\n","sig":null,"attributes":[{"value":"/ Immutable pixel iterator","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":274659,"byte_end":274687,"line_start":223,"line_end":223,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1318},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275486,"byte_end":275495,"line_start":257,"line_end":257,"column_start":12,"column_end":21},"name":"MutPixels","qualname":"::image::MutPixels","value":"MutPixels {  }","parent":null,"children":[{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325}],"decl_id":null,"docs":" Mutable pixel iterator","sig":null,"attributes":[{"value":"/ Mutable pixel iterator","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275296,"byte_end":275322,"line_start":254,"line_end":254,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275323,"byte_end":275326,"line_start":255,"line_end":255,"column_start":1,"column_end":4}},{"value":"/ DEPRECATED: It is currently not possible to create a safe iterator for this in Rust. You have to use an iterator over the image buffer instead.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275327,"byte_end":275474,"line_start":256,"line_end":256,"column_start":1,"column_end":148}}]},{"kind":"Trait","id":{"krate":0,"index":1331},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276539,"byte_end":276551,"line_start":298,"line_end":298,"column_start":11,"column_end":23},"name":"GenericImage","qualname":"::image::GenericImage","value":"GenericImage: Sized","parent":null,"children":[{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1334},{"krate":0,"index":1335},{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338},{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343},{"krate":0,"index":1344},{"krate":0,"index":1345},{"krate":0,"index":1346},{"krate":0,"index":1348}],"decl_id":null,"docs":" A trait for manipulating images.\n","sig":null,"attributes":[{"value":"/ A trait for manipulating images.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276492,"byte_end":276528,"line_start":297,"line_end":297,"column_start":1,"column_end":37}}]},{"kind":"Type","id":{"krate":0,"index":1332},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276597,"byte_end":276602,"line_start":300,"line_end":300,"column_start":10,"column_end":15},"name":"Pixel","qualname":"::image::GenericImage::Pixel","value":"type Pixel: Pixel;","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" The type of pixel.\n","sig":null,"attributes":[{"value":"/ The type of pixel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276565,"byte_end":276587,"line_start":299,"line_end":299,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":1333},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276663,"byte_end":276673,"line_start":303,"line_end":303,"column_start":8,"column_end":18},"name":"dimensions","qualname":"::image::GenericImage::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276616,"byte_end":276655,"line_start":302,"line_end":302,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1334},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276737,"byte_end":276742,"line_start":306,"line_end":306,"column_start":8,"column_end":13},"name":"width","qualname":"::image::GenericImage::width","value":"pub fn width(&Self) -> u32","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276701,"byte_end":276729,"line_start":305,"line_end":305,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1335},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276857,"byte_end":276863,"line_start":312,"line_end":312,"column_start":8,"column_end":14},"name":"height","qualname":"::image::GenericImage::height","value":"pub fn height(&Self) -> u32","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276820,"byte_end":276849,"line_start":311,"line_end":311,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1336},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276990,"byte_end":276996,"line_start":318,"line_end":318,"column_start":8,"column_end":14},"name":"bounds","qualname":"::image::GenericImage::bounds","value":"pub fn bounds(&Self) -> (u32, u32, u32, u32)","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" The bounding rectangle of this image.\n","sig":null,"attributes":[{"value":"/ The bounding rectangle of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276941,"byte_end":276982,"line_start":317,"line_end":317,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1337},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277113,"byte_end":277122,"line_start":321,"line_end":321,"column_start":8,"column_end":17},"name":"in_bounds","qualname":"::image::GenericImage::in_bounds","value":"pub fn in_bounds(&Self, u32, u32) -> bool","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns true if this x, y coordinate is contained inside the image.\n","sig":null,"attributes":[{"value":"/ Returns true if this x, y coordinate is contained inside the image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277034,"byte_end":277105,"line_start":320,"line_end":320,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1338},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277547,"byte_end":277556,"line_start":339,"line_end":339,"column_start":8,"column_end":17},"name":"get_pixel","qualname":"::image::GenericImage::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277372,"byte_end":277411,"line_start":332,"line_end":332,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277416,"byte_end":277419,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277424,"byte_end":277436,"line_start":334,"line_end":334,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277441,"byte_end":277444,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277449,"byte_end":277489,"line_start":336,"line_end":336,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277494,"byte_end":277497,"line_start":337,"line_end":337,"column_start":5,"column_end":8}},{"value":"/ TODO: change this signature to &P","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277502,"byte_end":277539,"line_start":338,"line_end":338,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1339},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277722,"byte_end":277735,"line_start":346,"line_end":346,"column_start":8,"column_end":21},"name":"get_pixel_mut","qualname":"::image::GenericImage::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut Self::Pixel","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277601,"byte_end":277636,"line_start":341,"line_end":341,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277641,"byte_end":277644,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277649,"byte_end":277661,"line_start":343,"line_end":343,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277666,"byte_end":277669,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277674,"byte_end":277714,"line_start":345,"line_end":345,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277931,"byte_end":277947,"line_start":351,"line_end":351,"column_start":15,"column_end":31},"name":"unsafe_get_pixel","qualname":"::image::GenericImage::unsafe_get_pixel","value":"pub unsafe fn unsafe_get_pixel(&Self, u32, u32) -> Self::Pixel","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns the pixel located at (x, y)","sig":null,"attributes":[{"value":"/ Returns the pixel located at (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277789,"byte_end":277828,"line_start":348,"line_end":348,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277833,"byte_end":277836,"line_start":349,"line_end":349,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":277841,"byte_end":277916,"line_start":350,"line_end":350,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1341},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278148,"byte_end":278157,"line_start":360,"line_end":360,"column_start":8,"column_end":17},"name":"put_pixel","qualname":"::image::GenericImage::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278028,"byte_end":278062,"line_start":355,"line_end":355,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278067,"byte_end":278070,"line_start":356,"line_end":356,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278075,"byte_end":278087,"line_start":357,"line_end":357,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278092,"byte_end":278095,"line_start":358,"line_end":358,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278100,"byte_end":278140,"line_start":359,"line_end":359,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":1342},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278349,"byte_end":278365,"line_start":365,"line_end":365,"column_start":15,"column_end":31},"name":"unsafe_put_pixel","qualname":"::image::GenericImage::unsafe_put_pixel","value":"pub unsafe fn unsafe_put_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Puts a pixel at location (x, y)","sig":null,"attributes":[{"value":"/ Puts a pixel at location (x, y)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278211,"byte_end":278246,"line_start":362,"line_end":362,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278251,"byte_end":278254,"line_start":363,"line_end":363,"column_start":5,"column_end":8}},{"value":"/ This function can be implemented in a way that ignores bounds checking.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278259,"byte_end":278334,"line_start":364,"line_end":364,"column_start":5,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":1343},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278632,"byte_end":278643,"line_start":372,"line_end":372,"column_start":8,"column_end":19},"name":"blend_pixel","qualname":"::image::GenericImage::blend_pixel","value":"pub fn blend_pixel(&mut Self, u32, u32, Self::Pixel)","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Put a pixel at location (x, y), taking into account alpha channels","sig":null,"attributes":[{"value":"/ Put a pixel at location (x, y), taking into account alpha channels","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278463,"byte_end":278533,"line_start":369,"line_end":369,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278538,"byte_end":278541,"line_start":370,"line_end":370,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This method will be removed. Blend the pixel directly instead.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278546,"byte_end":278624,"line_start":371,"line_end":371,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278848,"byte_end":278854,"line_start":377,"line_end":377,"column_start":8,"column_end":14},"name":"pixels","qualname":"::image::GenericImage::pixels","value":"pub fn pixels(&Self) -> Pixels<, Self>","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns an Iterator over the pixels of this image.\n The iterator yields the coordinates of each pixel\n along with their value\n","sig":null,"attributes":[{"value":"/ Returns an Iterator over the pixels of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278697,"byte_end":278751,"line_start":374,"line_end":374,"column_start":5,"column_end":59}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278756,"byte_end":278809,"line_start":375,"line_end":375,"column_start":5,"column_end":58}},{"value":"/ along with their value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":278814,"byte_end":278840,"line_start":376,"line_end":376,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1345},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279376,"byte_end":279386,"line_start":394,"line_end":394,"column_start":8,"column_end":18},"name":"pixels_mut","qualname":"::image::GenericImage::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> MutPixels<, Self>","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns an Iterator over mutable pixels of this image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.","sig":null,"attributes":[{"value":"/ Returns an Iterator over mutable pixels of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279095,"byte_end":279153,"line_start":389,"line_end":389,"column_start":5,"column_end":63}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279158,"byte_end":279211,"line_start":390,"line_end":390,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279216,"byte_end":279259,"line_start":391,"line_end":391,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279264,"byte_end":279267,"line_start":392,"line_end":392,"column_start":5,"column_end":8}},{"value":"/ DEPRECATED: This cannot be implemented safely in Rust. Please use the image buffer directly.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279272,"byte_end":279368,"line_start":393,"line_end":393,"column_start":5,"column_end":101}}]},{"kind":"Method","id":{"krate":0,"index":1346},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":280046,"byte_end":280055,"line_start":416,"line_end":416,"column_start":8,"column_end":17},"name":"copy_from","qualname":"::image::GenericImage::copy_from","value":"pub fn copy_from<O>(&mut Self, &O, u32, u32) -> bool where\nO: GenericImage<Pixel = Self::Pixel>","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Copies all of the pixels from another image into this image.","sig":null,"attributes":[{"value":"/ Copies all of the pixels from another image into this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279637,"byte_end":279701,"line_start":406,"line_end":406,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279706,"byte_end":279709,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ The other image is copied with the top-left corner of the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279714,"byte_end":279775,"line_start":408,"line_end":408,"column_start":5,"column_end":66}},{"value":"/ other image placed at (x, y).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279780,"byte_end":279813,"line_start":409,"line_end":409,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279818,"byte_end":279821,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ In order to copy only a pice of the other image, use `sub_image`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279826,"byte_end":279895,"line_start":411,"line_end":411,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279900,"byte_end":279903,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279908,"byte_end":279921,"line_start":413,"line_end":413,"column_start":5,"column_end":18}},{"value":"/ `true` if the copy was successful, `false` if the image could not","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":279926,"byte_end":279995,"line_start":414,"line_end":414,"column_start":5,"column_end":74}},{"value":"/ be copied due to size constraints.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":280000,"byte_end":280038,"line_start":415,"line_end":415,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":280777,"byte_end":280786,"line_start":438,"line_end":438,"column_start":8,"column_end":17},"name":"sub_image","qualname":"::image::GenericImage::sub_image","value":"pub fn sub_image<'a>(&'a mut Self, u32, u32, u32, u32) -> SubImage where\nSelf: 'static, <Self::Pixel as Pixel>::Subpixel: 'static, Self::Pixel: 'static","parent":{"krate":0,"index":1331},"children":[],"decl_id":null,"docs":" Returns a subimage that is a view into this image.\n","sig":null,"attributes":[{"value":"/ Returns a subimage that is a view into this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":280715,"byte_end":280769,"line_start":437,"line_end":437,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1350},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281066,"byte_end":281074,"line_start":447,"line_end":447,"column_start":12,"column_end":20},"name":"SubImage","qualname":"::image::SubImage","value":"SubImage {  }","parent":null,"children":[{"krate":0,"index":1353},{"krate":0,"index":1354},{"krate":0,"index":1355},{"krate":0,"index":1356},{"krate":0,"index":1357}],"decl_id":null,"docs":" A View into another image\n","sig":null,"attributes":[{"value":"/ A View into another image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281025,"byte_end":281054,"line_start":446,"line_end":446,"column_start":1,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1361},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281435,"byte_end":281438,"line_start":461,"line_end":461,"column_start":12,"column_end":15},"name":"new","qualname":"<SubImage>::new","value":"pub fn new(&mut I, u32, u32, u32, u32) -> SubImage<, I>","parent":null,"children":[],"decl_id":null,"docs":" Construct a new subimage\n","sig":null,"attributes":[{"value":"/ Construct a new subimage","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281395,"byte_end":281423,"line_start":460,"line_end":460,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1362},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281750,"byte_end":281759,"line_start":472,"line_end":472,"column_start":12,"column_end":21},"name":"inner_mut","qualname":"<SubImage>::inner_mut","value":"pub fn inner_mut(&mut Self) -> &mut I","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the wrapped image.\n","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the wrapped image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281685,"byte_end":281738,"line_start":471,"line_end":471,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1363},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281877,"byte_end":281890,"line_start":477,"line_end":477,"column_start":12,"column_end":25},"name":"change_bounds","qualname":"<SubImage>::change_bounds","value":"pub fn change_bounds(&mut Self, u32, u32, u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Change the coordinates of this subimage.\n","sig":null,"attributes":[{"value":"/ Change the coordinates of this subimage.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281821,"byte_end":281865,"line_start":476,"line_end":476,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1364},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":282124,"byte_end":282132,"line_start":485,"line_end":485,"column_start":12,"column_end":20},"name":"to_image","qualname":"<SubImage>::to_image","value":"pub fn to_image(&Self)\n-> ImageBuffer<I::Pixel, Vec<<I::Pixel as Pixel>::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Convert this subimage to an ImageBuffer\n","sig":null,"attributes":[{"value":"/ Convert this subimage to an ImageBuffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":282069,"byte_end":282112,"line_start":484,"line_end":484,"column_start":5,"column_end":48}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2456},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301257,"byte_end":301267,"line_start":45,"line_end":45,"column_start":5,"column_end":15},"name":"ImageLuma8","qualname":"::dynimage::DynamicImage::ImageLuma8","value":"DynamicImage::ImageLuma8(GrayImage)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301210,"byte_end":301252,"line_start":44,"line_end":44,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2459},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301343,"byte_end":301354,"line_start":48,"line_end":48,"column_start":5,"column_end":16},"name":"ImageLumaA8","qualname":"::dynimage::DynamicImage::ImageLumaA8","value":"DynamicImage::ImageLumaA8(GrayAlphaImage)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Luma with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Luma with alpha","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301285,"byte_end":301338,"line_start":47,"line_end":47,"column_start":5,"column_end":58}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2462},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301423,"byte_end":301432,"line_start":51,"line_end":51,"column_start":5,"column_end":14},"name":"ImageRgb8","qualname":"::dynimage::DynamicImage::ImageRgb8","value":"DynamicImage::ImageRgb8(RgbImage)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301377,"byte_end":301418,"line_start":50,"line_end":50,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2465},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301506,"byte_end":301516,"line_start":54,"line_end":54,"column_start":5,"column_end":15},"name":"ImageRgba8","qualname":"::dynimage::DynamicImage::ImageRgba8","value":"DynamicImage::ImageRgba8(RgbaImage)","parent":{"krate":0,"index":2455},"children":[],"decl_id":null,"docs":" Each pixel in this image is 8-bit Rgb with alpha\n","sig":null,"attributes":[{"value":"/ Each pixel in this image is 8-bit Rgb with alpha","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301449,"byte_end":301501,"line_start":53,"line_end":53,"column_start":5,"column_end":57}}]},{"kind":"Enum","id":{"krate":0,"index":2455},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301191,"byte_end":301203,"line_start":43,"line_end":43,"column_start":10,"column_end":22},"name":"DynamicImage","qualname":"::dynimage::DynamicImage","value":"pub enum DynamicImage {\n\n    /// Each pixel in this image is 8-bit Luma\n    ImageLuma8(GrayImage),\n\n    /// Each pixel in this image is 8-bit Luma with alpha\n    ImageLumaA8(GrayAlphaImage),\n\n    /// Each pixel in this image is 8-bit Rgb\n    ImageRgb8(RgbImage),\n\n    /// Each pixel in this image is 8-bit Rgb with alpha\n    ImageRgba8(RgbaImage),\n}","parent":null,"children":[{"krate":0,"index":2456},{"krate":0,"index":2459},{"krate":0,"index":2462},{"krate":0,"index":2465}],"decl_id":null,"docs":" A Dynamic Image\n","sig":null,"attributes":[{"value":"/ A Dynamic Image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":301145,"byte_end":301164,"line_start":41,"line_end":41,"column_start":1,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":1494},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303599,"byte_end":303608,"line_start":97,"line_end":97,"column_start":12,"column_end":21},"name":"new_luma8","qualname":"<DynamicImage>::new_luma8","value":"pub fn new_luma8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey pixels.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303525,"byte_end":303587,"line_start":96,"line_end":96,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1495},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303811,"byte_end":303822,"line_start":103,"line_end":103,"column_start":12,"column_end":23},"name":"new_luma_a8","qualname":"<DynamicImage>::new_luma_a8","value":"pub fn new_luma_a8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of grey\n pixels with transparency.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of grey","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303711,"byte_end":303765,"line_start":101,"line_end":101,"column_start":5,"column_end":59}},{"value":"/ pixels with transparency.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303770,"byte_end":303799,"line_start":102,"line_end":102,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1496},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303999,"byte_end":304007,"line_start":108,"line_end":108,"column_start":12,"column_end":20},"name":"new_rgb8","qualname":"<DynamicImage>::new_rgb8","value":"pub fn new_rgb8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGB pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGB pixels.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303926,"byte_end":303987,"line_start":107,"line_end":107,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1497},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304183,"byte_end":304192,"line_start":113,"line_end":113,"column_start":12,"column_end":21},"name":"new_rgba8","qualname":"<DynamicImage>::new_rgba8","value":"pub fn new_rgba8(u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Creates a dynamic image backed by a buffer of RGBA pixels.\n","sig":null,"attributes":[{"value":"/ Creates a dynamic image backed by a buffer of RGBA pixels.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304109,"byte_end":304171,"line_start":112,"line_end":112,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1498},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304356,"byte_end":304362,"line_start":118,"line_end":118,"column_start":12,"column_end":18},"name":"to_rgb","qualname":"<DynamicImage>::to_rgb","value":"pub fn to_rgb(&Self) -> RgbImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGB image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGB image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304295,"byte_end":304344,"line_start":117,"line_end":117,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1499},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304531,"byte_end":304538,"line_start":125,"line_end":125,"column_start":12,"column_end":19},"name":"to_rgba","qualname":"<DynamicImage>::to_rgba","value":"pub fn to_rgba(&Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as an RGBA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as an RGBA image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304469,"byte_end":304519,"line_start":124,"line_end":124,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1500},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304707,"byte_end":304714,"line_start":132,"line_end":132,"column_start":12,"column_end":19},"name":"to_luma","qualname":"<DynamicImage>::to_luma","value":"pub fn to_luma(&Self) -> GrayImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a Luma image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a Luma image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304646,"byte_end":304695,"line_start":131,"line_end":131,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1501},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304884,"byte_end":304897,"line_start":139,"line_end":139,"column_start":12,"column_end":25},"name":"to_luma_alpha","qualname":"<DynamicImage>::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> GrayAlphaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns a copy of this image as a LumaA image.\n","sig":null,"attributes":[{"value":"/ Returns a copy of this image as a LumaA image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":304822,"byte_end":304872,"line_start":138,"line_end":138,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":1502},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305093,"byte_end":305097,"line_start":146,"line_end":146,"column_start":12,"column_end":16},"name":"crop","qualname":"<DynamicImage>::crop","value":"pub fn crop(&mut Self, u32, u32, u32, u32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a cut out of this image delimited by the bounding rectangle.\n","sig":null,"attributes":[{"value":"/ Return a cut out of this image delimited by the bounding rectangle.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305010,"byte_end":305081,"line_start":145,"line_end":145,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1503},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305391,"byte_end":305398,"line_start":156,"line_end":156,"column_start":12,"column_end":19},"name":"as_rgb8","qualname":"<DynamicImage>::as_rgb8","value":"pub fn as_rgb8(&Self) -> Option<&RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGB image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305336,"byte_end":305379,"line_start":155,"line_end":155,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1504},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305641,"byte_end":305652,"line_start":164,"line_end":164,"column_start":12,"column_end":23},"name":"as_mut_rgb8","qualname":"<DynamicImage>::as_mut_rgb8","value":"pub fn as_mut_rgb8(&mut Self) -> Option<&mut RgbImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGB image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGB image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305578,"byte_end":305629,"line_start":163,"line_end":163,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1505},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305904,"byte_end":305912,"line_start":172,"line_end":172,"column_start":12,"column_end":20},"name":"as_rgba8","qualname":"<DynamicImage>::as_rgba8","value":"pub fn as_rgba8(&Self) -> Option<&RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit RGBA image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":305848,"byte_end":305892,"line_start":171,"line_end":171,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1506},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306160,"byte_end":306172,"line_start":180,"line_end":180,"column_start":12,"column_end":24},"name":"as_mut_rgba8","qualname":"<DynamicImage>::as_mut_rgba8","value":"pub fn as_mut_rgba8(&mut Self) -> Option<&mut RgbaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit RGBA image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit RGBA image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306096,"byte_end":306148,"line_start":179,"line_end":179,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1507},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306432,"byte_end":306440,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"as_luma8","qualname":"<DynamicImage>::as_luma8","value":"pub fn as_luma8(&Self) -> Option<&GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306371,"byte_end":306420,"line_start":187,"line_end":187,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1508},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306694,"byte_end":306706,"line_start":196,"line_end":196,"column_start":12,"column_end":24},"name":"as_mut_luma8","qualname":"<DynamicImage>::as_mut_luma8","value":"pub fn as_mut_luma8(&mut Self) -> Option<&mut GrayImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306625,"byte_end":306682,"line_start":195,"line_end":195,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1509},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306988,"byte_end":307002,"line_start":204,"line_end":204,"column_start":12,"column_end":26},"name":"as_luma_alpha8","qualname":"<DynamicImage>::as_luma_alpha8","value":"pub fn as_luma_alpha8(&Self) -> Option<&GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":306905,"byte_end":306976,"line_start":203,"line_end":203,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1510},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307284,"byte_end":307302,"line_start":212,"line_end":212,"column_start":12,"column_end":30},"name":"as_mut_luma_alpha8","qualname":"<DynamicImage>::as_mut_luma_alpha8","value":"pub fn as_mut_luma_alpha8(&mut Self) -> Option<&mut GrayAlphaImage>","parent":null,"children":[],"decl_id":null,"docs":" Return a mutable reference to an 8bit Grayscale image with an alpha channel\n","sig":null,"attributes":[{"value":"/ Return a mutable reference to an 8bit Grayscale image with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307193,"byte_end":307272,"line_start":211,"line_end":211,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1511},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307568,"byte_end":307578,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"raw_pixels","qualname":"<DynamicImage>::raw_pixels","value":"pub fn raw_pixels(&Self) -> Vec<u8>","parent":null,"children":[],"decl_id":null,"docs":" Return this image's pixels as a byte vector.\n","sig":null,"attributes":[{"value":"/ Return this image's pixels as a byte vector.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307508,"byte_end":307556,"line_start":219,"line_end":219,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":1512},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307686,"byte_end":307691,"line_start":225,"line_end":225,"column_start":12,"column_end":17},"name":"color","qualname":"<DynamicImage>::color","value":"pub fn color(&Self) -> color::ColorType","parent":null,"children":[],"decl_id":null,"docs":" Return this image's color type.\n","sig":null,"attributes":[{"value":"/ Return this image's color type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":307639,"byte_end":307674,"line_start":224,"line_end":224,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1513},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308101,"byte_end":308110,"line_start":235,"line_end":235,"column_start":12,"column_end":21},"name":"grayscale","qualname":"<DynamicImage>::grayscale","value":"pub fn grayscale(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Return a grayscale version of this image.\n","sig":null,"attributes":[{"value":"/ Return a grayscale version of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308044,"byte_end":308089,"line_start":234,"line_end":234,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1514},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308640,"byte_end":308646,"line_start":246,"line_end":246,"column_start":12,"column_end":18},"name":"invert","qualname":"<DynamicImage>::invert","value":"pub fn invert(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Invert the colors of this image.\n This method operates inplace.\n","sig":null,"attributes":[{"value":"/ Invert the colors of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308554,"byte_end":308590,"line_start":244,"line_end":244,"column_start":5,"column_end":41}},{"value":"/ This method operates inplace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308595,"byte_end":308628,"line_start":245,"line_end":245,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1515},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308942,"byte_end":308948,"line_start":253,"line_end":253,"column_start":12,"column_end":18},"name":"resize","qualname":"<DynamicImage>::resize","value":"pub fn resize(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. The image's aspect ratio is preserved.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308733,"byte_end":308792,"line_start":250,"line_end":250,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. The image's aspect ratio is preserved.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308797,"byte_end":308860,"line_start":251,"line_end":251,"column_start":5,"column_end":68}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":308865,"byte_end":308930,"line_start":252,"line_end":252,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":309766,"byte_end":309778,"line_start":278,"line_end":278,"column_start":12,"column_end":24},"name":"resize_exact","qualname":"<DynamicImage>::resize_exact","value":"pub fn resize_exact(&Self, u32, u32, imageops::FilterType) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Resize this image using the specified filter algorithm.\n Returns a new image. Does not preserve aspect ratio.\n ```nwidth``` and ```nheight``` are the new image's dimensions\n","sig":null,"attributes":[{"value":"/ Resize this image using the specified filter algorithm.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":309564,"byte_end":309623,"line_start":275,"line_end":275,"column_start":5,"column_end":64}},{"value":"/ Returns a new image. Does not preserve aspect ratio.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":309628,"byte_end":309684,"line_start":276,"line_end":276,"column_start":5,"column_end":61}},{"value":"/ ```nwidth``` and ```nheight``` are the new image's dimensions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":309689,"byte_end":309754,"line_start":277,"line_end":277,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310140,"byte_end":310144,"line_start":288,"line_end":288,"column_start":12,"column_end":16},"name":"blur","qualname":"<DynamicImage>::blur","value":"pub fn blur(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs a Gaussian blur on this image.\n ```sigma``` is a measure of how much to blur by.\n","sig":null,"attributes":[{"value":"/ Performs a Gaussian blur on this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310028,"byte_end":310071,"line_start":286,"line_end":286,"column_start":5,"column_end":48}},{"value":"/ ```sigma``` is a measure of how much to blur by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310076,"byte_end":310128,"line_start":287,"line_end":287,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310520,"byte_end":310529,"line_start":297,"line_end":297,"column_start":12,"column_end":21},"name":"unsharpen","qualname":"<DynamicImage>::unsharpen","value":"pub fn unsharpen(&Self, f32, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Performs an unsharpen mask on this image.\n ```sigma``` is the amount to blur the image by.\n ```threshold``` is a control of how much to sharpen.","sig":null,"attributes":[{"value":"/ Performs an unsharpen mask on this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310256,"byte_end":310301,"line_start":292,"line_end":292,"column_start":5,"column_end":50}},{"value":"/ ```sigma``` is the amount to blur the image by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310306,"byte_end":310357,"line_start":293,"line_end":293,"column_start":5,"column_end":56}},{"value":"/ ```threshold``` is a control of how much to sharpen.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310362,"byte_end":310418,"line_start":294,"line_end":294,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310423,"byte_end":310426,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ See https://en.wikipedia.org/wiki/Unsharp_masking#Digital_unsharp_masking","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310431,"byte_end":310508,"line_start":296,"line_end":296,"column_start":5,"column_end":82}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310738,"byte_end":310747,"line_start":302,"line_end":302,"column_start":12,"column_end":21},"name":"filter3x3","qualname":"<DynamicImage>::filter3x3","value":"pub fn filter3x3(&Self, &[f32]) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Filters this image with the specified 3x3 kernel.\n","sig":null,"attributes":[{"value":"/ Filters this image with the specified 3x3 kernel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310673,"byte_end":310726,"line_start":301,"line_end":301,"column_start":5,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1520},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311157,"byte_end":311172,"line_start":313,"line_end":313,"column_start":12,"column_end":27},"name":"adjust_contrast","qualname":"<DynamicImage>::adjust_contrast","value":"pub fn adjust_contrast(&Self, f32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Adjust the contrast of this image.\n ```contrast``` is the amount to adjust the contrast by.\n Negative values decrease the contrast and positive values increase the contrast.\n","sig":null,"attributes":[{"value":"/ Adjust the contrast of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310954,"byte_end":310992,"line_start":310,"line_end":310,"column_start":5,"column_end":43}},{"value":"/ ```contrast``` is the amount to adjust the contrast by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":310997,"byte_end":311056,"line_start":311,"line_end":311,"column_start":5,"column_end":64}},{"value":"/ Negative values decrease the contrast and positive values increase the contrast.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311061,"byte_end":311145,"line_start":312,"line_end":312,"column_start":5,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":1521},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311472,"byte_end":311480,"line_start":320,"line_end":320,"column_start":12,"column_end":20},"name":"brighten","qualname":"<DynamicImage>::brighten","value":"pub fn brighten(&Self, i32) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Brighten the pixels of this image.\n ```value``` is the amount to brighten each pixel by.\n Negative values decrease the brightness and positive values increase it.\n","sig":null,"attributes":[{"value":"/ Brighten the pixels of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311280,"byte_end":311318,"line_start":317,"line_end":317,"column_start":5,"column_end":43}},{"value":"/ ```value``` is the amount to brighten each pixel by.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311323,"byte_end":311379,"line_start":318,"line_end":318,"column_start":5,"column_end":61}},{"value":"/ Negative values decrease the brightness and positive values increase it.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311384,"byte_end":311460,"line_start":319,"line_end":319,"column_start":5,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1522},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311638,"byte_end":311643,"line_start":325,"line_end":325,"column_start":12,"column_end":17},"name":"flipv","qualname":"<DynamicImage>::flipv","value":"pub fn flipv(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image vertically\n","sig":null,"attributes":[{"value":"/ Flip this image vertically","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311596,"byte_end":311626,"line_start":324,"line_end":324,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1523},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311789,"byte_end":311794,"line_start":330,"line_end":330,"column_start":12,"column_end":17},"name":"fliph","qualname":"<DynamicImage>::fliph","value":"pub fn fliph(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Flip this image horizontally\n","sig":null,"attributes":[{"value":"/ Flip this image horizontally","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311745,"byte_end":311777,"line_start":329,"line_end":329,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":1524},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311953,"byte_end":311961,"line_start":335,"line_end":335,"column_start":12,"column_end":20},"name":"rotate90","qualname":"<DynamicImage>::rotate90","value":"pub fn rotate90(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 90 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 90 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":311898,"byte_end":311941,"line_start":334,"line_end":334,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1525},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312114,"byte_end":312123,"line_start":340,"line_end":340,"column_start":12,"column_end":21},"name":"rotate180","qualname":"<DynamicImage>::rotate180","value":"pub fn rotate180(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 180 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 180 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312058,"byte_end":312102,"line_start":339,"line_end":339,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1526},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312277,"byte_end":312286,"line_start":345,"line_end":345,"column_start":12,"column_end":21},"name":"rotate270","qualname":"<DynamicImage>::rotate270","value":"pub fn rotate270(&Self) -> DynamicImage","parent":null,"children":[],"decl_id":null,"docs":" Rotate this image 270 degrees clockwise.\n","sig":null,"attributes":[{"value":"/ Rotate this image 270 degrees clockwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312221,"byte_end":312265,"line_start":344,"line_end":344,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1527},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312441,"byte_end":312445,"line_start":350,"line_end":350,"column_start":12,"column_end":16},"name":"save","qualname":"<DynamicImage>::save","value":"pub fn save<W: Write>(&Self, &mut W, ImageFormat) -> ImageResult<()>","parent":null,"children":[],"decl_id":null,"docs":" Encode this image and write it to ```w```\n","sig":null,"attributes":[{"value":"/ Encode this image and write it to ```w```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":312384,"byte_end":312429,"line_start":349,"line_end":349,"column_start":5,"column_end":50}}]},{"kind":"Function","id":{"krate":0,"index":1554},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":318554,"byte_end":318558,"line_start":517,"line_end":517,"column_start":8,"column_end":12},"name":"open","qualname":"::dynimage::open","value":"pub fn open<P>(P) -> ImageResult<DynamicImage> where P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Open the image located at the path specified.\n The image's format is determined from the path's file extension.\n","sig":null,"attributes":[{"value":"/ Open the image located at the path specified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":318428,"byte_end":318477,"line_start":515,"line_end":515,"column_start":1,"column_end":50}},{"value":"/ The image's format is determined from the path's file extension.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":318478,"byte_end":318546,"line_start":516,"line_end":516,"column_start":1,"column_end":69}}]},{"kind":"Function","id":{"krate":0,"index":1558},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319873,"byte_end":319884,"line_start":555,"line_end":555,"column_start":8,"column_end":19},"name":"save_buffer","qualname":"::dynimage::save_buffer","value":"pub fn save_buffer<P>(P, &[u8], u32, u32, color::ColorType) -> io::Result<()>\nwhere P: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the supplied buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the supplied buffer to a file at the path specified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319519,"byte_end":319581,"line_start":548,"line_end":548,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319582,"byte_end":319585,"line_start":549,"line_end":549,"column_start":1,"column_end":4}},{"value":"/ The image format is derived from the file extension. The buffer is assumed to have","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319586,"byte_end":319672,"line_start":550,"line_end":550,"column_start":1,"column_end":87}},{"value":"/ the correct format according to the specified color type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319673,"byte_end":319734,"line_start":551,"line_end":551,"column_start":1,"column_end":62}},{"value":"/ This will lead to corrupted files if the buffer contains malformed data. Currently only","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319736,"byte_end":319827,"line_start":553,"line_end":553,"column_start":1,"column_end":92}},{"value":"/ jpeg and png files are supported.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":319828,"byte_end":319865,"line_start":554,"line_end":554,"column_start":1,"column_end":38}}]},{"kind":"Function","id":{"krate":0,"index":1562},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":320824,"byte_end":320828,"line_start":578,"line_end":578,"column_start":8,"column_end":12},"name":"load","qualname":"::dynimage::load","value":"pub fn load<R: Read + Seek>(R, ImageFormat) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a Reader\n","sig":null,"attributes":[{"value":"/ Create a new image from a Reader","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":320780,"byte_end":320816,"line_start":577,"line_end":577,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":1566},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322563,"byte_end":322579,"line_start":616,"line_end":616,"column_start":8,"column_end":24},"name":"load_from_memory","qualname":"::dynimage::load_from_memory","value":"pub fn load_from_memory(&[u8]) -> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322416,"byte_end":322456,"line_start":612,"line_end":612,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322457,"byte_end":322460,"line_start":613,"line_end":613,"column_start":1,"column_end":4}},{"value":"/ Makes an educated guess about the image format.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322461,"byte_end":322512,"line_start":614,"line_end":614,"column_start":1,"column_end":52}},{"value":"/ TGA is not supported by this function.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322513,"byte_end":322555,"line_start":615,"line_end":615,"column_start":1,"column_end":43}}]},{"kind":"Function","id":{"krate":0,"index":1567},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322971,"byte_end":322999,"line_start":630,"line_end":630,"column_start":8,"column_end":36},"name":"load_from_memory_with_format","qualname":"::dynimage::load_from_memory_with_format","value":"pub fn load_from_memory_with_format(&[u8], ImageFormat)\n-> ImageResult<DynamicImage>","parent":null,"children":[],"decl_id":null,"docs":" Create a new image from a byte slice\n","sig":null,"attributes":[{"value":"/ Create a new image from a byte slice","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322905,"byte_end":322945,"line_start":628,"line_end":628,"column_start":1,"column_end":41}},{"value":"inline(always)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":322946,"byte_end":322963,"line_start":629,"line_end":629,"column_start":1,"column_end":18}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2471},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323811,"byte_end":323815,"line_start":12,"line_end":12,"column_start":5,"column_end":9},"name":"Gray","qualname":"::color::ColorType::Gray","value":"ColorType::Gray(u8)","parent":{"krate":0,"index":2470},"children":[],"decl_id":null,"docs":" Pixel is grayscale\n","sig":null,"attributes":[{"value":"/ Pixel is grayscale","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323784,"byte_end":323806,"line_start":11,"line_end":11,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2474},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323869,"byte_end":323872,"line_start":15,"line_end":15,"column_start":5,"column_end":8},"name":"RGB","qualname":"::color::ColorType::RGB","value":"ColorType::RGB(u8)","parent":{"krate":0,"index":2470},"children":[],"decl_id":null,"docs":" Pixel contains R, G and B channels\n","sig":null,"attributes":[{"value":"/ Pixel contains R, G and B channels","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323826,"byte_end":323864,"line_start":14,"line_end":14,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2477},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323930,"byte_end":323937,"line_start":18,"line_end":18,"column_start":5,"column_end":12},"name":"Palette","qualname":"::color::ColorType::Palette","value":"ColorType::Palette(u8)","parent":{"krate":0,"index":2470},"children":[],"decl_id":null,"docs":" Pixel is an index into a color palette\n","sig":null,"attributes":[{"value":"/ Pixel is an index into a color palette","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323883,"byte_end":323925,"line_start":17,"line_end":17,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2480},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323997,"byte_end":324002,"line_start":21,"line_end":21,"column_start":5,"column_end":10},"name":"GrayA","qualname":"::color::ColorType::GrayA","value":"ColorType::GrayA(u8)","parent":{"krate":0,"index":2470},"children":[],"decl_id":null,"docs":" Pixel is grayscale with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is grayscale with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323948,"byte_end":323992,"line_start":20,"line_end":20,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2483},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":324056,"byte_end":324060,"line_start":24,"line_end":24,"column_start":5,"column_end":9},"name":"RGBA","qualname":"::color::ColorType::RGBA","value":"ColorType::RGBA(u8)","parent":{"krate":0,"index":2470},"children":[],"decl_id":null,"docs":" Pixel is RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Pixel is RGB with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":324013,"byte_end":324051,"line_start":23,"line_end":23,"column_start":5,"column_end":43}}]},{"kind":"Enum","id":{"krate":0,"index":2470},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323768,"byte_end":323777,"line_start":10,"line_end":10,"column_start":10,"column_end":19},"name":"ColorType","qualname":"::color::ColorType","value":"pub enum ColorType {\n\n    /// Pixel is grayscale\n    Gray(u8),\n\n    /// Pixel contains R, G and B channels\n    RGB(u8),\n\n    /// Pixel is an index into a color palette\n    Palette(u8),\n\n    /// Pixel is grayscale with an alpha channel\n    GrayA(u8),\n\n    /// Pixel is RGB with an alpha channel\n    RGBA(u8),\n}","parent":null,"children":[{"krate":0,"index":2471},{"krate":0,"index":2474},{"krate":0,"index":2477},{"krate":0,"index":2480},{"krate":0,"index":2483}],"decl_id":null,"docs":" An enumeration over supported color types and their bit depths\n","sig":null,"attributes":[{"value":"/ An enumeration over supported color types and their bit depths","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":323647,"byte_end":323713,"line_start":8,"line_end":8,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2682},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329310,"byte_end":329313,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"Rgb { data }","parent":null,"children":[{"krate":0,"index":2684}],"decl_id":null,"docs":"RGB colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325063,"byte_end":325073,"line_start":63,"line_end":63,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325074,"byte_end":325096,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":2498},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329310,"byte_end":329313,"line_start":229,"line_end":229,"column_start":5,"column_end":8},"name":"Rgb","qualname":"::color::Rgb","value":"pub fn Rgb<T: Primitive>([T; ]) -> Rgb<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325158,"byte_end":325196,"line_start":66,"line_end":66,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2710},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329360,"byte_end":329364,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"Luma { data }","parent":null,"children":[{"krate":0,"index":2712}],"decl_id":null,"docs":"Grayscale colors\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325063,"byte_end":325073,"line_start":63,"line_end":63,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325074,"byte_end":325096,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":2544},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329360,"byte_end":329364,"line_start":230,"line_end":230,"column_start":5,"column_end":9},"name":"Luma","qualname":"::color::Luma","value":"pub fn Luma<T: Primitive>([T; ]) -> Luma<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325158,"byte_end":325196,"line_start":66,"line_end":66,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2738},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329416,"byte_end":329420,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"Rgba { data }","parent":null,"children":[{"krate":0,"index":2740}],"decl_id":null,"docs":"RGB colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325063,"byte_end":325073,"line_start":63,"line_end":63,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325074,"byte_end":325096,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":2590},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329416,"byte_end":329420,"line_start":231,"line_end":231,"column_start":5,"column_end":9},"name":"Rgba","qualname":"::color::Rgba","value":"pub fn Rgba<T: Primitive>([T; ]) -> Rgba<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325158,"byte_end":325196,"line_start":66,"line_end":66,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2766},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329485,"byte_end":329490,"line_start":232,"line_end":232,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"LumaA { data }","parent":null,"children":[{"krate":0,"index":2768}],"decl_id":null,"docs":"Grayscale colors + alpha channel\n","sig":null,"attributes":[{"value":"repr(C)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325063,"byte_end":325073,"line_start":63,"line_end":63,"column_start":1,"column_end":11}},{"value":"allow(missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325074,"byte_end":325096,"line_start":64,"line_end":64,"column_start":1,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":2636},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329485,"byte_end":329490,"line_start":232,"line_end":232,"column_start":5,"column_end":10},"name":"LumaA","qualname":"::color::LumaA","value":"pub fn LumaA<T: Primitive>([T; ]) -> LumaA<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"allow(non_snake_case, missing_docs)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":325158,"byte_end":325196,"line_start":66,"line_end":66,"column_start":1,"column_end":39}}]},{"kind":"Trait","id":{"krate":0,"index":1581},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329632,"byte_end":329641,"line_start":237,"line_end":237,"column_start":11,"column_end":20},"name":"FromColor","qualname":"::color::FromColor","value":"FromColor<Other>","parent":null,"children":[{"krate":0,"index":1583}],"decl_id":null,"docs":" Provides color conversions for the different pixel types.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for the different pixel types.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329560,"byte_end":329621,"line_start":236,"line_end":236,"column_start":1,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":1583},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329731,"byte_end":329741,"line_start":239,"line_end":239,"column_start":8,"column_end":18},"name":"from_color","qualname":"::color::FromColor::from_color","value":"pub fn from_color(&mut Self, &Other)","parent":{"krate":0,"index":1581},"children":[],"decl_id":null,"docs":" Changes `self` to represent `Other` in the color space of `Self`\n","sig":null,"attributes":[{"value":"/ Changes `self` to represent `Other` in the color space of `Self`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329655,"byte_end":329723,"line_start":238,"line_end":238,"column_start":5,"column_end":73}}]},{"kind":"Trait","id":{"krate":0,"index":1675},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338504,"byte_end":338509,"line_start":17,"line_end":17,"column_start":11,"column_end":16},"name":"Pixel","qualname":"::buffer::Pixel","value":"Pixel: Copy + Clone","parent":null,"children":[{"krate":0,"index":1676},{"krate":0,"index":1677},{"krate":0,"index":1678},{"krate":0,"index":1679},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1688},{"krate":0,"index":1689},{"krate":0,"index":1690},{"krate":0,"index":1691},{"krate":0,"index":1692},{"krate":0,"index":1694},{"krate":0,"index":1696},{"krate":0,"index":1699},{"krate":0,"index":1702},{"krate":0,"index":1704},{"krate":0,"index":1706},{"krate":0,"index":1707}],"decl_id":null,"docs":" A generalized pixel.","sig":null,"attributes":[{"value":"/ A generalized pixel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338379,"byte_end":338403,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338404,"byte_end":338407,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ A pixel object is usually not used standalone but as a view into an image buffer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338408,"byte_end":338493,"line_start":16,"line_end":16,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":1676},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338573,"byte_end":338581,"line_start":19,"line_end":19,"column_start":10,"column_end":18},"name":"Subpixel","qualname":"::buffer::Pixel::Subpixel","value":"type Subpixel: Primitive;","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" The underlying subpixel type.\n","sig":null,"attributes":[{"value":"/ The underlying subpixel type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338530,"byte_end":338563,"line_start":18,"line_end":18,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1677},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338661,"byte_end":338674,"line_start":22,"line_end":22,"column_start":8,"column_end":21},"name":"channel_count","qualname":"::buffer::Pixel::channel_count","value":"pub fn channel_count() -> u8","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns the number of channels of this pixel type.\n","sig":null,"attributes":[{"value":"/ Returns the number of channels of this pixel type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338599,"byte_end":338653,"line_start":21,"line_end":21,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1678},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338735,"byte_end":338743,"line_start":25,"line_end":25,"column_start":8,"column_end":16},"name":"channels","qualname":"::buffer::Pixel::channels","value":"pub fn channels(&Self) -> &[Self::Subpixel]","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns the components as a slice.\n","sig":null,"attributes":[{"value":"/ Returns the components as a slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338689,"byte_end":338727,"line_start":24,"line_end":24,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1679},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338831,"byte_end":338843,"line_start":28,"line_end":28,"column_start":8,"column_end":20},"name":"channels_mut","qualname":"::buffer::Pixel::channels_mut","value":"pub fn channels_mut(&mut Self) -> &mut [Self::Subpixel]","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns the components as a mutable slice\n","sig":null,"attributes":[{"value":"/ Returns the components as a mutable slice","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338778,"byte_end":338823,"line_start":27,"line_end":27,"column_start":5,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":1680},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339015,"byte_end":339026,"line_start":32,"line_end":32,"column_start":8,"column_end":19},"name":"color_model","qualname":"::buffer::Pixel::color_model","value":"pub fn color_model() -> &'static str","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns a string that can help to interprete the meaning each channel\n See [gimp babl](http://gegl.org/babl/).\n","sig":null,"attributes":[{"value":"/ Returns a string that can help to interprete the meaning each channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338886,"byte_end":338959,"line_start":30,"line_end":30,"column_start":5,"column_end":78}},{"value":"/ See [gimp babl](http://gegl.org/babl/).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338964,"byte_end":339007,"line_start":31,"line_end":31,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1681},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339106,"byte_end":339116,"line_start":35,"line_end":35,"column_start":8,"column_end":18},"name":"color_type","qualname":"::buffer::Pixel::color_type","value":"pub fn color_type() -> ColorType","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns the ColorType for this pixel format\n","sig":null,"attributes":[{"value":"/ Returns the ColorType for this pixel format","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339051,"byte_end":339098,"line_start":34,"line_end":34,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":1682},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339322,"byte_end":339331,"line_start":41,"line_end":41,"column_start":8,"column_end":17},"name":"channels4","qualname":"::buffer::Pixel::channels4","value":"pub fn channels4(&Self)\n-> (Self::Subpixel, Self::Subpixel, Self::Subpixel, Self::Subpixel)","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns the channels of this pixel as a 4 tuple. If the pixel\n has less than 4 channels the remainder is filled with the maximum value","sig":null,"attributes":[{"value":"/ Returns the channels of this pixel as a 4 tuple. If the pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339138,"byte_end":339203,"line_start":37,"line_end":37,"column_start":5,"column_end":70}},{"value":"/ has less than 4 channels the remainder is filled with the maximum value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339208,"byte_end":339283,"line_start":38,"line_end":38,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339288,"byte_end":339291,"line_start":39,"line_end":39,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339296,"byte_end":339314,"line_start":40,"line_end":40,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339580,"byte_end":339593,"line_start":47,"line_end":47,"column_start":8,"column_end":21},"name":"from_channels","qualname":"::buffer::Pixel::from_channels","value":"pub fn from_channels(Self::Subpixel, Self::Subpixel, Self::Subpixel,\n                     Self::Subpixel) -> Self","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Construct a pixel from the 4 channels a, b, c and d.\n If the pixel does not contain 4 channels the extra are ignored.","sig":null,"attributes":[{"value":"/ Construct a pixel from the 4 channels a, b, c and d.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339413,"byte_end":339469,"line_start":43,"line_end":43,"column_start":5,"column_end":61}},{"value":"/ If the pixel does not contain 4 channels the extra are ignored.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339474,"byte_end":339541,"line_start":44,"line_end":44,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339546,"byte_end":339549,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ TODO deprecate","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339554,"byte_end":339572,"line_start":46,"line_end":46,"column_start":5,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339908,"byte_end":339918,"line_start":53,"line_end":53,"column_start":8,"column_end":18},"name":"from_slice","qualname":"::buffer::Pixel::from_slice","value":"pub fn from_slice<'a>(&'a [Self::Subpixel]) -> &'a Self","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns a view into a slice.","sig":null,"attributes":[{"value":"/ Returns a view into a slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339684,"byte_end":339716,"line_start":49,"line_end":49,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339721,"byte_end":339724,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339729,"byte_end":339813,"line_start":51,"line_end":51,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to precent panics if the pixel is used later on.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339818,"byte_end":339900,"line_start":52,"line_end":52,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340208,"byte_end":340222,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"from_slice_mut","qualname":"::buffer::Pixel::from_slice_mut","value":"pub fn from_slice_mut<'a>(&'a mut [Self::Subpixel]) -> &'a mut Self","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Returns mutable view into a mutable slice.","sig":null,"attributes":[{"value":"/ Returns mutable view into a mutable slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":339970,"byte_end":340016,"line_start":55,"line_end":55,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340021,"byte_end":340024,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ Note: The slice length is not checked on creation. Thus the caller has to ensure","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340029,"byte_end":340113,"line_start":57,"line_end":57,"column_start":5,"column_end":89}},{"value":"/ that the slice is long enough to precent panics if the pixel is used later on.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340118,"byte_end":340200,"line_start":58,"line_end":58,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1688},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340319,"byte_end":340325,"line_start":62,"line_end":62,"column_start":8,"column_end":14},"name":"to_rgb","qualname":"::buffer::Pixel::to_rgb","value":"pub fn to_rgb(&Self) -> Rgb<Self::Subpixel>","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340282,"byte_end":340311,"line_start":61,"line_end":61,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1689},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340421,"byte_end":340428,"line_start":65,"line_end":65,"column_start":8,"column_end":15},"name":"to_rgba","qualname":"::buffer::Pixel::to_rgba","value":"pub fn to_rgba(&Self) -> Rgba<Self::Subpixel>","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Convert this pixel to RGB with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to RGB with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340362,"byte_end":340413,"line_start":64,"line_end":64,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1690},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340504,"byte_end":340511,"line_start":68,"line_end":68,"column_start":8,"column_end":15},"name":"to_luma","qualname":"::buffer::Pixel::to_luma","value":"pub fn to_luma(&Self) -> Luma<Self::Subpixel>","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Convert this pixel to luma\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340466,"byte_end":340496,"line_start":67,"line_end":67,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":1691},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340609,"byte_end":340622,"line_start":71,"line_end":71,"column_start":8,"column_end":21},"name":"to_luma_alpha","qualname":"::buffer::Pixel::to_luma_alpha","value":"pub fn to_luma_alpha(&Self) -> LumaA<Self::Subpixel>","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Convert this pixel to luma with an alpha channel\n","sig":null,"attributes":[{"value":"/ Convert this pixel to luma with an alpha channel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340549,"byte_end":340601,"line_start":70,"line_end":70,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1692},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340730,"byte_end":340733,"line_start":74,"line_end":74,"column_start":8,"column_end":11},"name":"map","qualname":"::buffer::Pixel::map","value":"pub fn map<F>(&Self, F) -> Self where F: Fn(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340661,"byte_end":340722,"line_start":73,"line_end":73,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1694},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340879,"byte_end":340884,"line_start":77,"line_end":77,"column_start":8,"column_end":13},"name":"apply","qualname":"::buffer::Pixel::apply","value":"pub fn apply<F>(&mut Self, F) where F: Fn(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340810,"byte_end":340871,"line_start":76,"line_end":76,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341094,"byte_end":341108,"line_start":81,"line_end":81,"column_start":8,"column_end":22},"name":"map_with_alpha","qualname":"::buffer::Pixel::map_with_alpha","value":"pub fn map_with_alpha<F, G>(&Self, F, G) -> Self where F: Fn(Self::Subpixel)\n-> Self::Subpixel, G: Fn(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":340957,"byte_end":341029,"line_start":79,"line_end":79,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341034,"byte_end":341086,"line_start":80,"line_end":80,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341396,"byte_end":341412,"line_start":86,"line_end":86,"column_start":8,"column_end":24},"name":"apply_with_alpha","qualname":"::buffer::Pixel::apply_with_alpha","value":"pub fn apply_with_alpha<F, G>(&mut Self, F, G) where F: Fn(Self::Subpixel) ->\nSelf::Subpixel, G: Fn(Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel except the alpha channel.\n Apply the function ```g``` to the alpha channel. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel except the alpha channel.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341243,"byte_end":341315,"line_start":84,"line_end":84,"column_start":5,"column_end":77}},{"value":"/ Apply the function ```g``` to the alpha channel. Works in-place.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341320,"byte_end":341388,"line_start":85,"line_end":85,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341645,"byte_end":341649,"line_start":91,"line_end":91,"column_start":8,"column_end":12},"name":"map2","qualname":"::buffer::Pixel::map2","value":"pub fn map2<F>(&Self, &Self, F) -> Self where\nF: Fn(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341543,"byte_end":341607,"line_start":89,"line_end":89,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341612,"byte_end":341637,"line_start":90,"line_end":90,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1704},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341882,"byte_end":341888,"line_start":96,"line_end":96,"column_start":8,"column_end":14},"name":"apply2","qualname":"::buffer::Pixel::apply2","value":"pub fn apply2<F>(&mut Self, &Self, F) where\nF: Fn(Self::Subpixel, Self::Subpixel) -> Self::Subpixel","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Apply the function ```f``` to each channel of this pixel and\n ```other``` pairwise. Works in-place.\n","sig":null,"attributes":[{"value":"/ Apply the function ```f``` to each channel of this pixel and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341764,"byte_end":341828,"line_start":94,"line_end":94,"column_start":5,"column_end":69}},{"value":"/ ```other``` pairwise. Works in-place.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341833,"byte_end":341874,"line_start":95,"line_end":95,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1706},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342028,"byte_end":342034,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"invert","qualname":"::buffer::Pixel::invert","value":"pub fn invert(&mut Self)","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Invert this pixel\n","sig":null,"attributes":[{"value":"/ Invert this pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":341999,"byte_end":342020,"line_start":99,"line_end":99,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":1707},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342145,"byte_end":342150,"line_start":103,"line_end":103,"column_start":8,"column_end":13},"name":"blend","qualname":"::buffer::Pixel::blend","value":"pub fn blend(&mut Self, &Self)","parent":{"krate":0,"index":1675},"children":[],"decl_id":null,"docs":" Blend the color of a given pixel into ourself, taking into account alpha channels\n","sig":null,"attributes":[{"value":"/ Blend the color of a given pixel into ourself, taking into account alpha channels","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342052,"byte_end":342137,"line_start":102,"line_end":102,"column_start":5,"column_end":90}}]},{"kind":"Struct","id":{"krate":0,"index":1708},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342220,"byte_end":342226,"line_start":107,"line_end":107,"column_start":12,"column_end":18},"name":"Pixels","qualname":"::buffer::Pixels","value":"Pixels {  }","parent":null,"children":[{"krate":0,"index":1711}],"decl_id":null,"docs":" Iterate over pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over pixel refs.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342180,"byte_end":342208,"line_start":106,"line_end":106,"column_start":1,"column_end":29}}]},{"kind":"Struct","id":{"krate":0,"index":1723},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342869,"byte_end":342878,"line_start":133,"line_end":133,"column_start":12,"column_end":21},"name":"PixelsMut","qualname":"::buffer::PixelsMut","value":"PixelsMut {  }","parent":null,"children":[{"krate":0,"index":1726}],"decl_id":null,"docs":" Iterate over mutable pixel refs.\n","sig":null,"attributes":[{"value":"/ Iterate over mutable pixel refs.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342821,"byte_end":342857,"line_start":132,"line_end":132,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1738},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343550,"byte_end":343565,"line_start":158,"line_end":158,"column_start":12,"column_end":27},"name":"EnumeratePixels","qualname":"::buffer::EnumeratePixels","value":"EnumeratePixels {  }","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1744}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343501,"byte_end":343538,"line_start":157,"line_end":157,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1750},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344218,"byte_end":344236,"line_start":184,"line_end":184,"column_start":12,"column_end":30},"name":"EnumeratePixelsMut","qualname":"::buffer::EnumeratePixelsMut","value":"EnumeratePixelsMut {  }","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"decl_id":null,"docs":" Enumerate the pixels of an image.\n","sig":null,"attributes":[{"value":"/ Enumerate the pixels of an image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344169,"byte_end":344206,"line_start":183,"line_end":183,"column_start":1,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":1762},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344890,"byte_end":344901,"line_start":210,"line_end":210,"column_start":12,"column_end":23},"name":"ImageBuffer","qualname":"::buffer::ImageBuffer","value":"ImageBuffer {  }","parent":null,"children":[{"krate":0,"index":1765},{"krate":0,"index":1766},{"krate":0,"index":1767},{"krate":0,"index":1768}],"decl_id":null,"docs":" Generic image buffer\n","sig":null,"attributes":[{"value":"/ Generic image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344854,"byte_end":344878,"line_start":209,"line_end":209,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345385,"byte_end":345393,"line_start":227,"line_end":227,"column_start":12,"column_end":20},"name":"from_raw","qualname":"<ImageBuffer<P, Container>>::from_raw","value":"pub fn from_raw(u32, u32, Container) -> Option<ImageBuffer<P, Container>>","parent":null,"children":[],"decl_id":null,"docs":" Contructs a buffer from a generic container\n (for example a `Vec` or a slice)","sig":null,"attributes":[{"value":"/ Contructs a buffer from a generic container","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345221,"byte_end":345268,"line_start":223,"line_end":223,"column_start":5,"column_end":52}},{"value":"/ (for example a `Vec` or a slice)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345273,"byte_end":345309,"line_start":224,"line_end":224,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345314,"byte_end":345317,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns None if the container is not big enough","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345322,"byte_end":345373,"line_start":226,"line_end":226,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345905,"byte_end":345913,"line_start":245,"line_end":245,"column_start":12,"column_end":20},"name":"into_raw","qualname":"<ImageBuffer<P, Container>>::into_raw","value":"pub fn into_raw(Self) -> Container","parent":null,"children":[],"decl_id":null,"docs":" Returns the underlying raw buffer\n","sig":null,"attributes":[{"value":"/ Returns the underlying raw buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345856,"byte_end":345893,"line_start":244,"line_end":244,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346015,"byte_end":346025,"line_start":250,"line_end":250,"column_start":12,"column_end":22},"name":"dimensions","qualname":"<ImageBuffer<P, Container>>::dimensions","value":"pub fn dimensions(&Self) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" The width and height of this image.\n","sig":null,"attributes":[{"value":"/ The width and height of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345964,"byte_end":346003,"line_start":249,"line_end":249,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346134,"byte_end":346139,"line_start":255,"line_end":255,"column_start":12,"column_end":17},"name":"width","qualname":"<ImageBuffer<P, Container>>::width","value":"pub fn width(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The width of this image.\n","sig":null,"attributes":[{"value":"/ The width of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346094,"byte_end":346122,"line_start":254,"line_end":254,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1776},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346227,"byte_end":346233,"line_start":260,"line_end":260,"column_start":12,"column_end":18},"name":"height","qualname":"<ImageBuffer<P, Container>>::height","value":"pub fn height(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" The height of this image.\n","sig":null,"attributes":[{"value":"/ The height of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346186,"byte_end":346215,"line_start":259,"line_end":259,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":1777},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346347,"byte_end":346353,"line_start":265,"line_end":265,"column_start":12,"column_end":18},"name":"pixels","qualname":"<ImageBuffer<P, Container>>::pixels","value":"pub fn pixels<'a>(&'a Self) -> Pixels","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the pixels of this image.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the pixels of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346281,"byte_end":346335,"line_start":264,"line_end":264,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1779},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346686,"byte_end":346702,"line_start":276,"line_end":276,"column_start":12,"column_end":28},"name":"enumerate_pixels","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels","value":"pub fn enumerate_pixels<'a>(&'a Self) -> EnumeratePixels","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n The iterator yields the coordinates of each pixel\n along with a reference to them.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346532,"byte_end":346576,"line_start":273,"line_end":273,"column_start":5,"column_end":49}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346581,"byte_end":346634,"line_start":274,"line_end":274,"column_start":5,"column_end":58}},{"value":"/ along with a reference to them.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346639,"byte_end":346674,"line_start":275,"line_end":275,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1781},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347059,"byte_end":347068,"line_start":290,"line_end":290,"column_start":12,"column_end":21},"name":"get_pixel","qualname":"<ImageBuffer<P, Container>>::get_pixel","value":"pub fn get_pixel(&Self, u32, u32) -> &P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the pixel at location `(x, y)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346893,"byte_end":346947,"line_start":285,"line_end":285,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346952,"byte_end":346955,"line_start":286,"line_end":286,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346960,"byte_end":346972,"line_start":287,"line_end":287,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346977,"byte_end":346980,"line_start":288,"line_end":288,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":346985,"byte_end":347047,"line_start":289,"line_end":289,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1785},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347684,"byte_end":347694,"line_start":307,"line_end":307,"column_start":12,"column_end":22},"name":"pixels_mut","qualname":"<ImageBuffer<P, Container>>::pixels_mut","value":"pub fn pixels_mut(&mut Self) -> PixelsMut<, P>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the mutable pixels of this image.\n The iterator yields the coordinates of each pixel\n along with a mutable reference to them.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the mutable pixels of this image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347504,"byte_end":347566,"line_start":304,"line_end":304,"column_start":5,"column_end":67}},{"value":"/ The iterator yields the coordinates of each pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347571,"byte_end":347624,"line_start":305,"line_end":305,"column_start":5,"column_end":58}},{"value":"/ along with a mutable reference to them.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347629,"byte_end":347672,"line_start":306,"line_end":306,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1786},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347932,"byte_end":347952,"line_start":316,"line_end":316,"column_start":12,"column_end":32},"name":"enumerate_pixels_mut","qualname":"<ImageBuffer<P, Container>>::enumerate_pixels_mut","value":"pub fn enumerate_pixels_mut<'a>(&'a mut Self) -> EnumeratePixelsMut","parent":null,"children":[],"decl_id":null,"docs":" Enumerates over the pixels of the image.\n","sig":null,"attributes":[{"value":"/ Enumerates over the pixels of the image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347876,"byte_end":347920,"line_start":315,"line_end":315,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1788},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348358,"byte_end":348371,"line_start":331,"line_end":331,"column_start":12,"column_end":25},"name":"get_pixel_mut","qualname":"<ImageBuffer<P, Container>>::get_pixel_mut","value":"pub fn get_pixel_mut(&mut Self, u32, u32) -> &mut P","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the mutable pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Gets a reference to the mutable pixel at location `(x, y)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348184,"byte_end":348246,"line_start":326,"line_end":326,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348251,"byte_end":348254,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348259,"byte_end":348271,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348276,"byte_end":348279,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348284,"byte_end":348346,"line_start":330,"line_end":330,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1789},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348808,"byte_end":348817,"line_start":344,"line_end":344,"column_start":12,"column_end":21},"name":"put_pixel","qualname":"<ImageBuffer<P, Container>>::put_pixel","value":"pub fn put_pixel(&mut Self, u32, u32, P)","parent":null,"children":[],"decl_id":null,"docs":" Puts a pixel at location `(x, y)`","sig":null,"attributes":[{"value":"/ Puts a pixel at location `(x, y)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348659,"byte_end":348696,"line_start":339,"line_end":339,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348701,"byte_end":348704,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348709,"byte_end":348721,"line_start":341,"line_end":341,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348726,"byte_end":348729,"line_start":342,"line_end":342,"column_start":5,"column_end":8}},{"value":"/ Panics if `(x, y)` is out of the bounds `(width, height)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348734,"byte_end":348796,"line_start":343,"line_end":343,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":1793},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349225,"byte_end":349229,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"name":"save","qualname":"<ImageBuffer<P, Container>>::save","value":"pub fn save<Q>(&Self, Q) -> io::Result<()> where Q: AsRef<Path>","parent":null,"children":[],"decl_id":null,"docs":" Saves the buffer to a file at the path specified.","sig":null,"attributes":[{"value":"/ Saves the buffer to a file at the path specified.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349034,"byte_end":349087,"line_start":352,"line_end":352,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349092,"byte_end":349095,"line_start":353,"line_end":353,"column_start":5,"column_end":8}},{"value":"/ The image format is derived from the file extension.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349100,"byte_end":349156,"line_start":354,"line_end":354,"column_start":5,"column_end":61}},{"value":"/ Currently only jpeg and png files are supported.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349161,"byte_end":349213,"line_start":355,"line_end":355,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":1833},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353432,"byte_end":353435,"line_start":487,"line_end":487,"column_start":12,"column_end":15},"name":"new","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::new","value":"pub fn new(u32, u32) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new image buffer based on a `Vec<P::Subpixel>`.\n","sig":null,"attributes":[{"value":"/ Creates a new image buffer based on a `Vec<P::Subpixel>`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353359,"byte_end":353420,"line_start":486,"line_end":486,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1834},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353904,"byte_end":353914,"line_start":501,"line_end":501,"column_start":12,"column_end":22},"name":"from_pixel","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_pixel","value":"pub fn from_pixel(u32, u32, P) -> ImageBuffer<P, Vec<P::Subpixel>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by copying a pixel\n","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by copying a pixel","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353841,"byte_end":353892,"line_start":500,"line_end":500,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1835},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354326,"byte_end":354333,"line_start":512,"line_end":512,"column_start":12,"column_end":19},"name":"from_fn","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_fn","value":"pub fn from_fn<F>(u32, u32, F) -> ImageBuffer<P, Vec<P::Subpixel>> where\nF: Fn(u32, u32) -> P","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new ImageBuffer by repeated application of the supplied function.\n The arguments to the function are the pixel's x and y coordinates.\n","sig":null,"attributes":[{"value":"/ Constructs a new ImageBuffer by repeated application of the supplied function.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354157,"byte_end":354239,"line_start":510,"line_end":510,"column_start":5,"column_end":87}},{"value":"/ The arguments to the function are the pixel's x and y coordinates.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354244,"byte_end":354314,"line_start":511,"line_end":511,"column_start":5,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":1837},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354765,"byte_end":354773,"line_start":524,"line_end":524,"column_start":12,"column_end":20},"name":"from_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::from_vec","value":"pub fn from_vec(u32, u32, Vec<P::Subpixel>)\n-> Option<ImageBuffer<P, Vec<P::Subpixel>>>","parent":null,"children":[],"decl_id":null,"docs":" Creates an image buffer out of an existing buffer.\n Returns None if the buffer is not big enough.\n","sig":null,"attributes":[{"value":"/ Creates an image buffer out of an existing buffer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354645,"byte_end":354699,"line_start":522,"line_end":522,"column_start":5,"column_end":59}},{"value":"/ Returns None if the buffer is not big enough.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354704,"byte_end":354753,"line_start":523,"line_end":523,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1838},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355049,"byte_end":355057,"line_start":531,"line_end":531,"column_start":12,"column_end":20},"name":"into_vec","qualname":"<ImageBuffer<P, Vec<P::Subpixel>>>::into_vec","value":"pub fn into_vec(Self) -> Vec<P::Subpixel>","parent":null,"children":[],"decl_id":null,"docs":" Consumes the image buffer and returns the underlying data\n as an owned buffer\n","sig":null,"attributes":[{"value":"/ Consumes the image buffer and returns the underlying data","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":354949,"byte_end":355010,"line_start":529,"line_end":529,"column_start":5,"column_end":66}},{"value":"/ as an owned buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355015,"byte_end":355037,"line_start":530,"line_end":530,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":1839},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355185,"byte_end":355198,"line_start":537,"line_end":537,"column_start":11,"column_end":24},"name":"ConvertBuffer","qualname":"::buffer::ConvertBuffer","value":"ConvertBuffer<T>","parent":null,"children":[{"krate":0,"index":1841}],"decl_id":null,"docs":" Provides color conversions for whole image buffers.\n","sig":null,"attributes":[{"value":"/ Provides color conversions for whole image buffers.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355119,"byte_end":355174,"line_start":536,"line_end":536,"column_start":1,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":1841},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355384,"byte_end":355391,"line_start":542,"line_end":542,"column_start":8,"column_end":15},"name":"convert","qualname":"::buffer::ConvertBuffer::convert","value":"pub fn convert(&Self) -> T","parent":{"krate":0,"index":1839},"children":[],"decl_id":null,"docs":" Converts `self` to a buffer of type T","sig":null,"attributes":[{"value":"/ Converts `self` to a buffer of type T","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355208,"byte_end":355249,"line_start":538,"line_end":538,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355254,"byte_end":355257,"line_start":539,"line_end":539,"column_start":5,"column_end":8}},{"value":"/ A generic impementation is provided to convert any image buffer to a image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355262,"byte_end":355347,"line_start":540,"line_end":540,"column_start":5,"column_end":90}},{"value":"/ based on a `Vec<T>`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355352,"byte_end":355376,"line_start":541,"line_end":541,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1843},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355659,"byte_end":355673,"line_start":550,"line_end":550,"column_start":12,"column_end":26},"name":"expand_palette","qualname":"<GrayImage>::expand_palette","value":"pub fn expand_palette(Self, &[(u8, u8, u8)], Option<u8>) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Expands a color palette by re-using the existing buffer.\n Assumes 8 bit per pixel. Uses an optionally transparent index to\n adjust it's alpha value accordingly.\n","sig":null,"attributes":[{"value":"/ Expands a color palette by re-using the existing buffer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355469,"byte_end":355529,"line_start":547,"line_end":547,"column_start":5,"column_end":65}},{"value":"/ Assumes 8 bit per pixel. Uses an optionally transparent index to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355534,"byte_end":355602,"line_start":548,"line_end":548,"column_start":5,"column_end":73}},{"value":"/ adjust it's alpha value accordingly.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355607,"byte_end":355647,"line_start":549,"line_end":549,"column_start":5,"column_end":45}}]},{"kind":"Type","id":{"krate":0,"index":1852},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357647,"byte_end":357655,"line_start":602,"line_end":602,"column_start":10,"column_end":18},"name":"RgbImage","qualname":"::buffer::RgbImage","value":"ImageBuffer<Rgb<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357608,"byte_end":357637,"line_start":601,"line_end":601,"column_start":1,"column_end":30}}]},{"kind":"Type","id":{"krate":0,"index":1853},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357744,"byte_end":357753,"line_start":604,"line_end":604,"column_start":10,"column_end":19},"name":"RgbaImage","qualname":"::buffer::RgbaImage","value":"ImageBuffer<Rgba<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable Rgb + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable Rgb + alpha channel image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357689,"byte_end":357734,"line_start":603,"line_end":603,"column_start":1,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":1854},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357833,"byte_end":357842,"line_start":606,"line_end":606,"column_start":10,"column_end":19},"name":"GrayImage","qualname":"::buffer::GrayImage","value":"ImageBuffer<Luma<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357788,"byte_end":357823,"line_start":605,"line_end":605,"column_start":1,"column_end":36}}]},{"kind":"Type","id":{"krate":0,"index":1855},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357938,"byte_end":357952,"line_start":608,"line_end":608,"column_start":10,"column_end":24},"name":"GrayAlphaImage","qualname":"::buffer::GrayAlphaImage","value":"ImageBuffer<LumaA<u8>, Vec<u8>>","parent":null,"children":[],"decl_id":null,"docs":" Sendable grayscale + alpha channel image buffer\n","sig":null,"attributes":[{"value":"/ Sendable grayscale + alpha channel image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357877,"byte_end":357928,"line_start":607,"line_end":607,"column_start":1,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":1861},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359612,"byte_end":359621,"line_start":9,"line_end":9,"column_start":11,"column_end":20},"name":"Primitive","qualname":"::traits::Primitive","value":"Primitive: Copy + NumCast + Num + PartialOrd<Self> + Clone + Bounded","parent":null,"children":[],"decl_id":null,"docs":" Primitive trait from old stdlib\n","sig":null,"attributes":[{"value":"/ Primitive trait from old stdlib","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359566,"byte_end":359601,"line_start":8,"line_end":8,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":1877},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360118,"byte_end":360124,"line_start":6,"line_end":6,"column_start":12,"column_end":18},"name":"Frames","qualname":"::animation::Frames","value":"Frames {  }","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1879}],"decl_id":null,"docs":" Holds the frames of the animated image\n","sig":null,"attributes":[{"value":"/ Holds the frames of the animated image","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360064,"byte_end":360106,"line_start":5,"line_end":5,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360244,"byte_end":360247,"line_start":13,"line_end":13,"column_start":12,"column_end":15},"name":"new","qualname":"<Frames>::new","value":"pub fn new(Vec<Frame>) -> Frames","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame iterator\n","sig":null,"attributes":[{"value":"/ Contructs a new frame iterator","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360198,"byte_end":360232,"line_start":12,"line_end":12,"column_start":5,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":2794},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360430,"byte_end":360435,"line_start":23,"line_end":23,"column_start":12,"column_end":17},"name":"Frame","qualname":"::animation::Frame","value":"Frame {  }","parent":null,"children":[{"krate":0,"index":2795},{"krate":0,"index":2796},{"krate":0,"index":2797},{"krate":0,"index":2798}],"decl_id":null,"docs":" A single animation frame\n","sig":null,"attributes":[{"value":"/ A single animation frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360373,"byte_end":360401,"line_start":21,"line_end":21,"column_start":1,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1883},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360642,"byte_end":360645,"line_start":35,"line_end":35,"column_start":12,"column_end":15},"name":"new","qualname":"<Frame>::new","value":"pub fn new(RgbaImage) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360605,"byte_end":360630,"line_start":34,"line_end":34,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1884},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360861,"byte_end":360871,"line_start":45,"line_end":45,"column_start":12,"column_end":22},"name":"from_parts","qualname":"<Frame>::from_parts","value":"pub fn from_parts(RgbaImage, u32, u32, Ratio<u16>) -> Frame","parent":null,"children":[],"decl_id":null,"docs":" Contructs a new frame\n","sig":null,"attributes":[{"value":"/ Contructs a new frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360824,"byte_end":360849,"line_start":44,"line_end":44,"column_start":5,"column_end":30}}]},{"kind":"Method","id":{"krate":0,"index":1885},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361113,"byte_end":361118,"line_start":55,"line_end":55,"column_start":12,"column_end":17},"name":"delay","qualname":"<Frame>::delay","value":"pub fn delay(&Self) -> Ratio<u16>","parent":null,"children":[],"decl_id":null,"docs":" Delay of this frame\n","sig":null,"attributes":[{"value":"/ Delay of this frame","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361078,"byte_end":361101,"line_start":54,"line_end":54,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1886},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361212,"byte_end":361218,"line_start":60,"line_end":60,"column_start":12,"column_end":18},"name":"buffer","qualname":"<Frame>::buffer","value":"pub fn buffer(&Self) -> &RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361172,"byte_end":361200,"line_start":59,"line_end":59,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1887},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361314,"byte_end":361325,"line_start":65,"line_end":65,"column_start":12,"column_end":23},"name":"into_buffer","qualname":"<Frame>::into_buffer","value":"pub fn into_buffer(Self) -> RgbaImage","parent":null,"children":[],"decl_id":null,"docs":" Returns the image buffer\n","sig":null,"attributes":[{"value":"/ Returns the image buffer","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361274,"byte_end":361302,"line_start":64,"line_end":64,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361414,"byte_end":361418,"line_start":70,"line_end":70,"column_start":12,"column_end":16},"name":"left","qualname":"<Frame>::left","value":"pub fn left(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the x offset\n","sig":null,"attributes":[{"value":"/ Returns the x offset","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361378,"byte_end":361402,"line_start":69,"line_end":69,"column_start":5,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":1889},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361500,"byte_end":361503,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"top","qualname":"<Frame>::top","value":"pub fn top(&Self) -> u32","parent":null,"children":[],"decl_id":null,"docs":" Returns the y offset\n","sig":null,"attributes":[{"value":"/ Returns the y offset","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361464,"byte_end":361488,"line_start":74,"line_end":74,"column_start":5,"column_end":29}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5365,"byte_end":5373,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30504,"byte_end":30511,"line_start":129,"line_end":129,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30961,"byte_end":30969,"line_start":150,"line_end":150,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":198}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49893,"byte_end":49904,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":288},{"krate":0,"index":289},{"krate":0,"index":290},{"krate":0,"index":291}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":51944,"byte_end":51955,"line_start":96,"line_end":96,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":294},{"krate":0,"index":295},{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":80834,"byte_end":80844,"line_start":640,"line_end":640,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":388},{"krate":0,"index":389},{"krate":0,"index":390},{"krate":0,"index":391},{"krate":0,"index":392},{"krate":0,"index":393},{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83107,"byte_end":83117,"line_start":739,"line_end":739,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":396}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84872,"byte_end":84882,"line_start":834,"line_end":834,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":424},{"krate":0,"index":427},{"krate":0,"index":428},{"krate":0,"index":429},{"krate":0,"index":430},{"krate":0,"index":431},{"krate":0,"index":432},{"krate":0,"index":434},{"krate":0,"index":435},{"krate":0,"index":436},{"krate":0,"index":437},{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":119943,"byte_end":119953,"line_start":20,"line_end":20,"column_start":20,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122814,"byte_end":122824,"line_start":29,"line_end":29,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":522},{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":123647,"byte_end":123657,"line_start":54,"line_end":54,"column_start":32,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528},{"krate":0,"index":529},{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124817,"byte_end":124827,"line_start":94,"line_end":94,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":536},{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":125535,"byte_end":125544,"line_start":114,"line_end":114,"column_start":48,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":540}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":126535,"byte_end":126545,"line_start":142,"line_end":142,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":128314,"byte_end":128324,"line_start":40,"line_end":40,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":130086,"byte_end":130094,"line_start":94,"line_end":94,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":598}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":131399,"byte_end":131409,"line_start":141,"line_end":141,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":602},{"krate":0,"index":603},{"krate":0,"index":604},{"krate":0,"index":605},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":140184,"byte_end":140195,"line_start":141,"line_end":141,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":682},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157621,"byte_end":157632,"line_start":133,"line_end":133,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":770},{"krate":0,"index":772},{"krate":0,"index":773},{"krate":0,"index":774},{"krate":0,"index":776},{"krate":0,"index":777},{"krate":0,"index":778},{"krate":0,"index":780},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":784},{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":169732,"byte_end":169743,"line_start":544,"line_end":544,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793},{"krate":0,"index":794}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/entropy.rs","byte_start":173987,"byte_end":173998,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192477,"byte_end":192484,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":870},{"krate":0,"index":871}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":193372,"byte_end":193379,"line_start":56,"line_end":56,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":874},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194498,"byte_end":194505,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194936,"byte_end":194946,"line_start":111,"line_end":111,"column_start":35,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":888}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":216988,"byte_end":216993,"line_start":97,"line_end":97,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":933},{"krate":0,"index":934}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":217847,"byte_end":217852,"line_start":127,"line_end":127,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":218124,"byte_end":218129,"line_start":137,"line_end":137,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":943},{"krate":0,"index":945},{"krate":0,"index":946}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":221547,"byte_end":221556,"line_start":48,"line_end":48,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":970}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222028,"byte_end":222037,"line_start":62,"line_end":62,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":973}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222177,"byte_end":222186,"line_start":69,"line_end":69,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222450,"byte_end":222461,"line_start":83,"line_end":83,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":978}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222710,"byte_end":222721,"line_start":93,"line_end":93,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":981}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222873,"byte_end":222884,"line_start":100,"line_end":100,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":223035,"byte_end":223046,"line_start":107,"line_end":107,"column_start":31,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":987}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":198466,"byte_end":198477,"line_start":127,"line_end":127,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994},{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1005},{"krate":0,"index":1007},{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010},{"krate":0,"index":1011},{"krate":0,"index":1012},{"krate":0,"index":1013},{"krate":0,"index":1014},{"krate":0,"index":1015}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":209648,"byte_end":209659,"line_start":429,"line_end":429,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1019},{"krate":0,"index":1020},{"krate":0,"index":1021},{"krate":0,"index":1022},{"krate":0,"index":1023}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":223929,"byte_end":223938,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":225861,"byte_end":225867,"line_start":90,"line_end":90,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1070},{"krate":0,"index":1071}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":227275,"byte_end":227283,"line_start":135,"line_end":135,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1077},{"krate":0,"index":1078}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228454,"byte_end":228464,"line_start":178,"line_end":178,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1094},{"krate":0,"index":1095},{"krate":0,"index":1096},{"krate":0,"index":1097},{"krate":0,"index":1098},{"krate":0,"index":1101},{"krate":0,"index":1102},{"krate":0,"index":1104}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":236027,"byte_end":236037,"line_start":381,"line_end":381,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1107},{"krate":0,"index":1108},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":239229,"byte_end":239240,"line_start":78,"line_end":78,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1169},{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":241307,"byte_end":241322,"line_start":156,"line_end":156,"column_start":32,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1219},{"krate":0,"index":1220}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":243478,"byte_end":243488,"line_start":216,"line_end":216,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1223},{"krate":0,"index":1224},{"krate":0,"index":1225},{"krate":0,"index":1227},{"krate":0,"index":1228},{"krate":0,"index":1229},{"krate":0,"index":1230},{"krate":0,"index":1231},{"krate":0,"index":1232},{"krate":0,"index":1233},{"krate":0,"index":1234},{"krate":0,"index":1237},{"krate":0,"index":1238},{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1242},{"krate":0,"index":1243},{"krate":0,"index":1244},{"krate":0,"index":1245},{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":267463,"byte_end":267473,"line_start":789,"line_end":789,"column_start":39,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1249},{"krate":0,"index":1250},{"krate":0,"index":1251},{"krate":0,"index":1252},{"krate":0,"index":1253}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":269111,"byte_end":269121,"line_start":41,"line_end":41,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1271}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":270210,"byte_end":270220,"line_start":59,"line_end":59,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1273},{"krate":0,"index":1274}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":270903,"byte_end":270913,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1276}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271034,"byte_end":271044,"line_start":86,"line_end":86,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1278}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":274847,"byte_end":274853,"line_start":232,"line_end":232,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275646,"byte_end":275655,"line_start":265,"line_end":265,"column_start":45,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1329},{"krate":0,"index":1330}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281294,"byte_end":281302,"line_start":456,"line_end":456,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1361},{"krate":0,"index":1362},{"krate":0,"index":1363},{"krate":0,"index":1364}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":282623,"byte_end":282631,"line_start":501,"line_end":501,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":287597,"byte_end":287606,"line_start":78,"line_end":78,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1389}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":288147,"byte_end":288156,"line_start":99,"line_end":99,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":289945,"byte_end":289954,"line_start":178,"line_end":178,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":290322,"byte_end":290331,"line_start":194,"line_end":194,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1401}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":292178,"byte_end":292190,"line_start":32,"line_end":32,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1418},{"krate":0,"index":1419},{"krate":0,"index":1420},{"krate":0,"index":1421},{"krate":0,"index":1422},{"krate":0,"index":1423}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":296577,"byte_end":296581,"line_start":174,"line_end":174,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":1431}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":296878,"byte_end":296890,"line_start":193,"line_end":193,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1436},{"krate":0,"index":1437},{"krate":0,"index":1438},{"krate":0,"index":1439},{"krate":0,"index":1440},{"krate":0,"index":1441},{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303506,"byte_end":303518,"line_start":95,"line_end":95,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1494},{"krate":0,"index":1495},{"krate":0,"index":1496},{"krate":0,"index":1497},{"krate":0,"index":1498},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1501},{"krate":0,"index":1502},{"krate":0,"index":1503},{"krate":0,"index":1504},{"krate":0,"index":1505},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1508},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1511},{"krate":0,"index":1512},{"krate":0,"index":1513},{"krate":0,"index":1514},{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1520},{"krate":0,"index":1521},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1526},{"krate":0,"index":1527}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":313970,"byte_end":313982,"line_start":399,"line_end":399,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1530},{"krate":0,"index":1531},{"krate":0,"index":1532},{"krate":0,"index":1533},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329821,"byte_end":329822,"line_start":243,"line_end":243,"column_start":32,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1586}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329976,"byte_end":329980,"line_start":251,"line_end":251,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1589}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":330402,"byte_end":330406,"line_start":262,"line_end":262,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1592}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":330829,"byte_end":330833,"line_start":273,"line_end":273,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1595}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331031,"byte_end":331036,"line_start":282,"line_end":282,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1598}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331472,"byte_end":331477,"line_start":294,"line_end":294,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1601}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331916,"byte_end":331921,"line_start":306,"line_end":306,"column_start":53,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1604}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332178,"byte_end":332182,"line_start":316,"line_end":316,"column_start":52,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1607}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332486,"byte_end":332490,"line_start":328,"line_end":328,"column_start":54,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1610}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332791,"byte_end":332795,"line_start":339,"line_end":339,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1613}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333118,"byte_end":333121,"line_start":353,"line_end":353,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1616}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333392,"byte_end":333395,"line_start":364,"line_end":364,"column_start":54,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":1619}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333659,"byte_end":333662,"line_start":374,"line_end":374,"column_start":53,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1622}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":334030,"byte_end":334035,"line_start":390,"line_end":390,"column_start":30,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1627}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":334918,"byte_end":334922,"line_start":414,"line_end":414,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1630}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":335032,"byte_end":335036,"line_start":420,"line_end":420,"column_start":30,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1633}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":336990,"byte_end":336993,"line_start":455,"line_end":455,"column_start":30,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1636}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337204,"byte_end":337209,"line_start":467,"line_end":467,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337386,"byte_end":337390,"line_start":477,"line_end":477,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337588,"byte_end":337592,"line_start":488,"line_end":488,"column_start":31,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1647}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337807,"byte_end":337810,"line_start":498,"line_end":498,"column_start":31,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1650}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342346,"byte_end":342352,"line_start":111,"line_end":111,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1716}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342614,"byte_end":342620,"line_start":122,"line_end":122,"column_start":49,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343001,"byte_end":343010,"line_start":137,"line_end":137,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1730},{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343284,"byte_end":343293,"line_start":148,"line_end":148,"column_start":49,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":1736}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343737,"byte_end":343752,"line_start":165,"line_end":165,"column_start":38,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1748},{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344411,"byte_end":344429,"line_start":191,"line_end":191,"column_start":38,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345089,"byte_end":345100,"line_start":218,"line_end":218,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775},{"krate":0,"index":1776},{"krate":0,"index":1777},{"krate":0,"index":1779},{"krate":0,"index":1781}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347361,"byte_end":347372,"line_start":299,"line_end":299,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1785},{"krate":0,"index":1786},{"krate":0,"index":1788},{"krate":0,"index":1789}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348927,"byte_end":348938,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1793}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349545,"byte_end":349556,"line_start":366,"line_end":366,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349827,"byte_end":349838,"line_start":377,"line_end":377,"column_start":33,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1804}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350111,"byte_end":350122,"line_start":386,"line_end":386,"column_start":42,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1809},{"krate":0,"index":1810}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350390,"byte_end":350401,"line_start":397,"line_end":397,"column_start":45,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":1814}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350660,"byte_end":350671,"line_start":407,"line_end":407,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":351022,"byte_end":351033,"line_start":421,"line_end":421,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823},{"krate":0,"index":1824},{"krate":0,"index":1825},{"krate":0,"index":1826},{"krate":0,"index":1827},{"krate":0,"index":1828},{"krate":0,"index":1829},{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353292,"byte_end":353303,"line_start":483,"line_end":483,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1833},{"krate":0,"index":1834},{"krate":0,"index":1835},{"krate":0,"index":1837},{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355453,"byte_end":355462,"line_start":546,"line_end":546,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":1843}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357070,"byte_end":357081,"line_start":585,"line_end":585,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1851}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360185,"byte_end":360191,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1881}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360593,"byte_end":360598,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1883},{"krate":0,"index":1884},{"krate":0,"index":1885},{"krate":0,"index":1886},{"krate":0,"index":1887},{"krate":0,"index":1888},{"krate":0,"index":1889}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361568,"byte_end":361574,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1892},{"krate":0,"index":1893}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1418,"byte_end":1422,"line_start":101,"line_end":101,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":66}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/mod.rs","byte_start":2562,"byte_end":2567,"line_start":2,"line_end":2,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":67}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/mod.rs","byte_start":2577,"byte_end":2579,"line_start":3,"line_end":3,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":70}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1463,"byte_end":1471,"line_start":104,"line_end":104,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":108}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/mod.rs","byte_start":17162,"byte_end":17170,"line_start":53,"line_end":53,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":156}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1523,"byte_end":1527,"line_start":108,"line_end":108,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":264}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/mod.rs","byte_start":49485,"byte_end":49488,"line_start":8,"line_end":8,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":304}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1561,"byte_end":1564,"line_start":110,"line_end":110,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":470}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1604,"byte_end":1607,"line_start":112,"line_end":112,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":495}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1641,"byte_end":1644,"line_start":114,"line_end":114,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":548}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1679,"byte_end":1683,"line_start":116,"line_end":116,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":607}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1723,"byte_end":1726,"line_start":118,"line_end":118,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":841}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1761,"byte_end":1765,"line_start":120,"line_end":120,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":890}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1799,"byte_end":1802,"line_start":122,"line_end":122,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1025}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/lib.rs","byte_start":1836,"byte_end":1839,"line_start":124,"line_end":124,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1113}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/math/nq.rs","byte_start":5365,"byte_end":5373,"line_start":76,"line_end":76,"column_start":6,"column_end":14},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":86},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30504,"byte_end":30511,"line_start":129,"line_end":129,"column_start":19,"column_end":26},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":1907},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/imageops/colorops.rs","byte_start":30961,"byte_end":30969,"line_start":150,"line_end":150,"column_start":23,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":86},"to":{"krate":0,"index":187}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":49893,"byte_end":49904,"line_start":25,"line_end":25,"column_start":15,"column_end":26},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":279},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/decoder.rs","byte_start":51944,"byte_end":51955,"line_start":96,"line_end":96,"column_start":32,"column_end":43},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":279},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":80834,"byte_end":80844,"line_start":640,"line_end":640,"column_start":6,"column_end":16},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":381},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":83107,"byte_end":83117,"line_start":739,"line_end":739,"column_start":6,"column_end":16},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1926},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/webp/vp8.rs","byte_start":84872,"byte_end":84882,"line_start":834,"line_end":834,"column_start":15,"column_end":25},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":399},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ppm/encoder.rs","byte_start":119943,"byte_end":119953,"line_start":20,"line_end":20,"column_start":20,"column_end":30},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":482},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":122814,"byte_end":122824,"line_start":29,"line_end":29,"column_start":15,"column_end":25},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":517},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":123647,"byte_end":123657,"line_start":54,"line_end":54,"column_start":32,"column_end":42},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":517},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":124817,"byte_end":124827,"line_start":94,"line_end":94,"column_start":16,"column_end":26},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":125535,"byte_end":125544,"line_start":114,"line_end":114,"column_start":48,"column_end":57},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":2470},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/png.rs","byte_start":126535,"byte_end":126545,"line_start":142,"line_end":142,"column_start":35,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":128314,"byte_end":128324,"line_start":40,"line_end":40,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":569},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":130086,"byte_end":130094,"line_start":94,"line_end":94,"column_start":6,"column_end":14},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":1971},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/ico/decoder.rs","byte_start":131399,"byte_end":131409,"line_start":141,"line_end":141,"column_start":39,"column_end":49},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":569},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/encoder.rs","byte_start":140184,"byte_end":140195,"line_start":141,"line_end":141,"column_start":20,"column_end":31},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":658},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":157621,"byte_end":157632,"line_start":133,"line_end":133,"column_start":14,"column_end":25},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":742},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/decoder.rs","byte_start":169732,"byte_end":169743,"line_start":544,"line_end":544,"column_start":32,"column_end":43},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":742},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/jpeg/entropy.rs","byte_start":173987,"byte_end":173998,"line_start":23,"line_end":23,"column_start":6,"column_end":17},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":803},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":192477,"byte_end":192484,"line_start":28,"line_end":28,"column_start":15,"column_end":22},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":865},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":193372,"byte_end":193379,"line_start":56,"line_end":56,"column_start":32,"column_end":39},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":865},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194498,"byte_end":194505,"line_start":95,"line_end":95,"column_start":16,"column_end":23},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":879},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/gif.rs","byte_start":194936,"byte_end":194946,"line_start":111,"line_end":111,"column_start":35,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":216988,"byte_end":216993,"line_start":97,"line_end":97,"column_start":6,"column_end":11},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2139},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":217847,"byte_end":217852,"line_start":127,"line_end":127,"column_start":28,"column_end":33},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":935},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/ifd.rs","byte_start":218124,"byte_end":218129,"line_start":137,"line_end":137,"column_start":6,"column_end":11},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":935},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":220644,"byte_end":220648,"line_start":19,"line_end":19,"column_start":25,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":3196},"to":{"krate":0,"index":962}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":221547,"byte_end":221556,"line_start":48,"line_end":48,"column_start":6,"column_end":15},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":966},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222028,"byte_end":222037,"line_start":62,"line_end":62,"column_start":15,"column_end":24},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":966},"to":{"krate":1,"index":3196}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222177,"byte_end":222186,"line_start":69,"line_end":69,"column_start":23,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":966},"to":{"krate":0,"index":962}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222450,"byte_end":222461,"line_start":83,"line_end":83,"column_start":9,"column_end":20},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":2158},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222710,"byte_end":222721,"line_start":93,"line_end":93,"column_start":26,"column_end":37},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":2158},"to":{"krate":0,"index":962}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":222873,"byte_end":222884,"line_start":100,"line_end":100,"column_start":31,"column_end":42},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":2158},"to":{"krate":1,"index":3196}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/stream.rs","byte_start":223035,"byte_end":223046,"line_start":107,"line_end":107,"column_start":31,"column_end":42},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":2158},"to":{"krate":1,"index":3275}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":198466,"byte_end":198477,"line_start":127,"line_end":127,"column_start":22,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":2261},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tiff/decoder/mod.rs","byte_start":209648,"byte_end":209659,"line_start":429,"line_end":429,"column_start":39,"column_end":50},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":2261},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":223929,"byte_end":223938,"line_start":24,"line_end":24,"column_start":6,"column_end":15},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1040},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":225861,"byte_end":225867,"line_start":90,"line_end":90,"column_start":6,"column_end":12},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":2276},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":227275,"byte_end":227283,"line_start":135,"line_end":135,"column_start":6,"column_end":14},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1072},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":228454,"byte_end":228464,"line_start":178,"line_end":178,"column_start":22,"column_end":32},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1079},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/tga/decoder.rs","byte_start":236027,"byte_end":236037,"line_start":381,"line_end":381,"column_start":39,"column_end":49},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1079},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":239229,"byte_end":239240,"line_start":78,"line_end":78,"column_start":23,"column_end":34},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1164},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":241307,"byte_end":241322,"line_start":156,"line_end":156,"column_start":32,"column_end":47},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1211},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":243478,"byte_end":243488,"line_start":216,"line_end":216,"column_start":22,"column_end":32},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":1178},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/bmp/decoder.rs","byte_start":267463,"byte_end":267473,"line_start":789,"line_end":789,"column_start":39,"column_end":49},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1178},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":269111,"byte_end":269121,"line_start":41,"line_end":41,"column_start":23,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":270210,"byte_end":270220,"line_start":59,"line_end":59,"column_start":16,"column_end":26},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":2344},"to":{"krate":1,"index":1751}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":270903,"byte_end":270913,"line_start":80,"line_end":80,"column_start":26,"column_end":36},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":271034,"byte_end":271044,"line_start":86,"line_end":86,"column_start":33,"column_end":43},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":2344},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":272330,"byte_end":272335,"line_start":148,"line_end":148,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2079},"to":{"krate":0,"index":1296}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":274847,"byte_end":274853,"line_start":232,"line_end":232,"column_start":40,"column_end":46},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":1305},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":275646,"byte_end":275655,"line_start":265,"line_end":265,"column_start":45,"column_end":54},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":1318},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":276553,"byte_end":276558,"line_start":298,"line_end":298,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2079},"to":{"krate":0,"index":1331}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":281294,"byte_end":281302,"line_start":456,"line_end":456,"column_start":37,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1350},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/image.rs","byte_start":282623,"byte_end":282631,"line_start":501,"line_end":501,"column_start":54,"column_end":62},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1350},"to":{"krate":0,"index":1331}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":286155,"byte_end":286159,"line_start":8,"line_end":8,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":1,"index":3196},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":286291,"byte_end":286296,"line_start":14,"line_end":14,"column_start":22,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":3257},"to":{"krate":0,"index":1384}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":287597,"byte_end":287606,"line_start":78,"line_end":78,"column_start":23,"column_end":32},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2395},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":288147,"byte_end":288156,"line_start":99,"line_end":99,"column_start":23,"column_end":32},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2407},"to":{"krate":0,"index":1382}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":289945,"byte_end":289954,"line_start":178,"line_end":178,"column_start":27,"column_end":36},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":2419},"to":{"krate":0,"index":1384}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/bitstream.rs","byte_start":290322,"byte_end":290331,"line_start":194,"line_end":194,"column_start":27,"column_end":36},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":2434},"to":{"krate":0,"index":1384}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":292178,"byte_end":292190,"line_start":32,"line_end":32,"column_start":6,"column_end":18},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":1413},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":296577,"byte_end":296581,"line_start":174,"line_end":174,"column_start":6,"column_end":10},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1425},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/utils/lzw.rs","byte_start":296878,"byte_end":296890,"line_start":193,"line_end":193,"column_start":6,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1432},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":303506,"byte_end":303518,"line_start":95,"line_end":95,"column_start":6,"column_end":18},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":2455},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/dynimage.rs","byte_start":313970,"byte_end":313982,"line_start":399,"line_end":399,"column_start":23,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":2455},"to":{"krate":0,"index":1331}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329821,"byte_end":329822,"line_start":243,"line_end":243,"column_start":32,"column_end":33},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":1585},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":329976,"byte_end":329980,"line_start":251,"line_end":251,"column_start":53,"column_end":57},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":2710},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":330402,"byte_end":330406,"line_start":262,"line_end":262,"column_start":52,"column_end":56},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":2710},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":330829,"byte_end":330833,"line_start":273,"line_end":273,"column_start":54,"column_end":58},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":2710},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331031,"byte_end":331036,"line_start":282,"line_end":282,"column_start":53,"column_end":58},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":2766},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331472,"byte_end":331477,"line_start":294,"line_end":294,"column_start":52,"column_end":57},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":2766},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":331916,"byte_end":331921,"line_start":306,"line_end":306,"column_start":53,"column_end":58},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":2766},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332178,"byte_end":332182,"line_start":316,"line_end":316,"column_start":52,"column_end":56},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332486,"byte_end":332490,"line_start":328,"line_end":328,"column_start":54,"column_end":58},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":332791,"byte_end":332795,"line_start":339,"line_end":339,"column_start":53,"column_end":57},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333118,"byte_end":333121,"line_start":353,"line_end":353,"column_start":53,"column_end":56},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":2682},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333392,"byte_end":333395,"line_start":364,"line_end":364,"column_start":54,"column_end":57},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":2682},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":333659,"byte_end":333662,"line_start":374,"line_end":374,"column_start":53,"column_end":56},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":2682},"to":{"krate":0,"index":1581}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":334030,"byte_end":334035,"line_start":390,"line_end":390,"column_start":30,"column_end":35},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":2766},"to":{"krate":0,"index":1623}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":334918,"byte_end":334922,"line_start":414,"line_end":414,"column_start":30,"column_end":34},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":2710},"to":{"krate":0,"index":1623}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":335032,"byte_end":335036,"line_start":420,"line_end":420,"column_start":30,"column_end":34},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":1623}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":336990,"byte_end":336993,"line_start":455,"line_end":455,"column_start":30,"column_end":33},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":2682},"to":{"krate":0,"index":1623}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337204,"byte_end":337209,"line_start":467,"line_end":467,"column_start":31,"column_end":36},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":2766},"to":{"krate":0,"index":1637}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337386,"byte_end":337390,"line_start":477,"line_end":477,"column_start":31,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":2710},"to":{"krate":0,"index":1637}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337588,"byte_end":337592,"line_start":488,"line_end":488,"column_start":31,"column_end":35},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":2738},"to":{"krate":0,"index":1637}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/color.rs","byte_start":337807,"byte_end":337810,"line_start":498,"line_end":498,"column_start":31,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":2682},"to":{"krate":0,"index":1637}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338511,"byte_end":338515,"line_start":17,"line_end":17,"column_start":18,"column_end":22},"kind":"SuperTrait","from":{"krate":2,"index":2084},"to":{"krate":0,"index":1675}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":338518,"byte_end":338523,"line_start":17,"line_end":17,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":1763},"to":{"krate":0,"index":1675}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342346,"byte_end":342352,"line_start":111,"line_end":111,"column_start":38,"column_end":44},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":1708},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":342614,"byte_end":342620,"line_start":122,"line_end":122,"column_start":49,"column_end":55},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1708},"to":{"krate":2,"index":5545}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343001,"byte_end":343010,"line_start":137,"line_end":137,"column_start":38,"column_end":47},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1723},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343284,"byte_end":343293,"line_start":148,"line_end":148,"column_start":49,"column_end":58},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1723},"to":{"krate":2,"index":5545}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":343737,"byte_end":343752,"line_start":165,"line_end":165,"column_start":38,"column_end":53},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":1738},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":344411,"byte_end":344429,"line_start":191,"line_end":191,"column_start":38,"column_end":56},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":1750},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":345089,"byte_end":345100,"line_start":218,"line_end":218,"column_start":20,"column_end":31},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":347361,"byte_end":347372,"line_start":299,"line_end":299,"column_start":20,"column_end":31},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":348927,"byte_end":348938,"line_start":349,"line_end":349,"column_start":20,"column_end":31},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349545,"byte_end":349556,"line_start":366,"line_end":366,"column_start":30,"column_end":41},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":2274}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":349827,"byte_end":349838,"line_start":377,"line_end":377,"column_start":33,"column_end":44},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":2287}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350111,"byte_end":350122,"line_start":386,"line_end":386,"column_start":42,"column_end":53},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":2355}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350390,"byte_end":350401,"line_start":397,"line_end":397,"column_start":45,"column_end":56},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":2359}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":350660,"byte_end":350671,"line_start":407,"line_end":407,"column_start":30,"column_end":41},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1762},"to":{"krate":2,"index":1763}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":351022,"byte_end":351033,"line_start":421,"line_end":421,"column_start":37,"column_end":48},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":1331}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":353292,"byte_end":353303,"line_start":483,"line_end":483,"column_start":26,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1762},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":355453,"byte_end":355462,"line_start":546,"line_end":546,"column_start":6,"column_end":15},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1854},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/buffer.rs","byte_start":357070,"byte_end":357081,"line_start":585,"line_end":585,"column_start":9,"column_end":20},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1762},"to":{"krate":0,"index":1839}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359623,"byte_end":359627,"line_start":9,"line_end":9,"column_start":22,"column_end":26},"kind":"SuperTrait","from":{"krate":2,"index":2084},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359630,"byte_end":359637,"line_start":9,"line_end":9,"column_start":29,"column_end":36},"kind":"SuperTrait","from":{"krate":20,"index":247},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359640,"byte_end":359643,"line_start":9,"line_end":9,"column_start":39,"column_end":42},"kind":"SuperTrait","from":{"krate":20,"index":293},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359646,"byte_end":359656,"line_start":9,"line_end":9,"column_start":45,"column_end":55},"kind":"SuperTrait","from":{"krate":2,"index":1834},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359665,"byte_end":359670,"line_start":9,"line_end":9,"column_start":64,"column_end":69},"kind":"SuperTrait","from":{"krate":2,"index":1763},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/traits.rs","byte_start":359673,"byte_end":359680,"line_start":9,"line_end":9,"column_start":72,"column_end":79},"kind":"SuperTrait","from":{"krate":20,"index":118},"to":{"krate":0,"index":1861}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360185,"byte_end":360191,"line_start":11,"line_end":11,"column_start":6,"column_end":12},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1877},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":360593,"byte_end":360598,"line_start":33,"line_end":33,"column_start":6,"column_end":11},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":2794},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/image-0.6.1/./src/animation.rs","byte_start":361568,"byte_end":361574,"line_start":80,"line_end":80,"column_start":23,"column_end":29},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1877},"to":{"krate":2,"index":5618}}]}