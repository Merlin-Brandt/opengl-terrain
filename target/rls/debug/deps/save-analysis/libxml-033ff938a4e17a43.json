{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","xml","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=033ff938a4e17a43","-C","extra-filename=-033ff938a4e17a43","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--extern","bitflags=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libbitflags-4a8a1c377c6679ec.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libxml-033ff938a4e17a43.rmeta"},"prelude":{"crate_id":{"name":"xml","disambiguator":[4681428226032733884,16144259560736650312]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","num":18,"id":{"name":"bitflags","disambiguator":[10184662319038632084,16346083109047954384]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":24,"byte_end":482,"line_start":2,"line_end":24,"column_start":1,"column_end":10}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":595},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":237,"byte_end":248,"line_start":11,"line_end":11,"column_start":17,"column_end":28},"alias_span":null,"name":"EventReader","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1207},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":266,"byte_end":278,"line_start":12,"line_end":12,"column_start":17,"column_end":29},"alias_span":null,"name":"ParserConfig","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":802},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":296,"byte_end":307,"line_start":13,"line_end":13,"column_start":17,"column_end":28},"alias_span":null,"name":"EventWriter","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1366},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":325,"byte_end":338,"line_start":14,"line_end":14,"column_start":17,"column_end":30},"alias_span":null,"name":"EmitterConfig","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1207},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36780,"byte_end":36792,"line_start":14,"line_end":14,"column_start":23,"column_end":35},"alias_span":null,"name":"ParserConfig","value":"","parent":{"krate":0,"index":246}},{"kind":"Use","ref_id":{"krate":0,"index":1234},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36816,"byte_end":36824,"line_start":15,"line_end":15,"column_start":23,"column_end":31},"alias_span":null,"name":"XmlEvent","value":"","parent":{"krate":0,"index":246}},{"kind":"Use","ref_id":{"krate":0,"index":659},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132095,"byte_end":132101,"line_start":6,"line_end":6,"column_start":24,"column_end":30},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":626}},{"kind":"Use","ref_id":{"krate":0,"index":1283},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132126,"byte_end":132138,"line_start":7,"line_end":7,"column_start":24,"column_end":36},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":626}},{"kind":"Use","ref_id":{"krate":0,"index":1366},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132171,"byte_end":132184,"line_start":8,"line_end":8,"column_start":23,"column_end":36},"alias_span":null,"name":"EmitterConfig","value":"","parent":{"krate":0,"index":626}},{"kind":"Use","ref_id":{"krate":0,"index":739},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132208,"byte_end":132216,"line_start":9,"line_end":9,"column_start":23,"column_end":31},"alias_span":null,"name":"XmlEvent","value":"","parent":{"krate":0,"index":626}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":24,"byte_end":482,"line_start":2,"line_end":24,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":11},{"krate":0,"index":68},{"krate":0,"index":87},{"krate":0,"index":107},{"krate":0,"index":144},{"krate":0,"index":246},{"krate":0,"index":626},{"krate":0,"index":813}],"decl_id":null,"docs":" This crate currently provides almost XML 1.0/1.1-compliant pull parser.\n","sig":null,"attributes":[{"value":"allow(dead_code)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":24,"byte_end":44,"line_start":2,"line_end":2,"column_start":1,"column_end":21}},{"value":"allow(unused_variables)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":45,"byte_end":72,"line_start":3,"line_end":3,"column_start":1,"column_end":28}},{"value":"forbid(non_camel_case_types)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":73,"byte_end":105,"line_start":4,"line_end":4,"column_start":1,"column_end":33}},{"value":"/ This crate currently provides almost XML 1.0/1.1-compliant pull parser.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":107,"byte_end":182,"line_start":6,"line_end":6,"column_start":1,"column_end":76}}]},{"kind":"Mod","id":{"krate":0,"index":8},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","parent":null,"children":[],"decl_id":null,"docs":" Contains several macros used in this crate.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":484,"byte_end":497,"line_start":1,"line_end":1,"column_start":1,"column_end":14}},{"value":"/ Contains several macros used in this crate.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":499,"byte_end":546,"line_start":3,"line_end":3,"column_start":1,"column_end":48}}]},{"kind":"Mod","id":{"krate":0,"index":11},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"name","qualname":"::name","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":830},{"krate":0,"index":856},{"krate":0,"index":853},{"krate":0,"index":847},{"krate":0,"index":849},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":838},{"krate":0,"index":835},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":35},{"krate":0,"index":40},{"krate":0,"index":858},{"krate":0,"index":874},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":867},{"krate":0,"index":868},{"krate":0,"index":864},{"krate":0,"index":862},{"krate":0,"index":44},{"krate":0,"index":46},{"krate":0,"index":61},{"krate":0,"index":64}],"decl_id":null,"docs":" Contains XML qualified names manipulation types and functions.","sig":null,"attributes":[{"value":"/ Contains XML qualified names manipulation types and functions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1359,"byte_end":1425,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1426,"byte_end":1429,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":830},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3380,"byte_end":3384,"line_start":48,"line_end":48,"column_start":12,"column_end":16},"name":"Name","qualname":"::name::Name","value":"Name { local_name, namespace, prefix }","parent":null,"children":[{"krate":0,"index":832},{"krate":0,"index":833},{"krate":0,"index":834}],"decl_id":null,"docs":" Represents a qualified XML name.","sig":null,"attributes":[{"value":"/ Represents a qualified XML name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1499,"byte_end":1535,"line_start":9,"line_end":9,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1536,"byte_end":1539,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ A qualified name always consists at least of a local name. It can optionally contain","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1540,"byte_end":1628,"line_start":11,"line_end":11,"column_start":1,"column_end":89}},{"value":"/ a prefix; when reading an XML document, if it contains a prefix, it must also contain a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1629,"byte_end":1720,"line_start":12,"line_end":12,"column_start":1,"column_end":92}},{"value":"/ namespace URI, but this is not enforced statically; see below. The name can contain a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1721,"byte_end":1810,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/ namespace without a prefix; in that case a default, empty prefix is assumed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1811,"byte_end":1891,"line_start":14,"line_end":14,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1892,"byte_end":1895,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ When writing XML documents, it is possible to omit the namespace URI, leaving only","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1896,"byte_end":1982,"line_start":16,"line_end":16,"column_start":1,"column_end":87}},{"value":"/ the prefix. In this case the writer will check that the specifed prefix is bound to some","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":1983,"byte_end":2075,"line_start":17,"line_end":17,"column_start":1,"column_end":93}},{"value":"/ URI in the current namespace context. If both prefix and namespace URI are specified,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2076,"byte_end":2165,"line_start":18,"line_end":18,"column_start":1,"column_end":90}},{"value":"/ it is checked that the current namespace context contains this exact correspondence","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2166,"byte_end":2253,"line_start":19,"line_end":19,"column_start":1,"column_end":88}},{"value":"/ between prefix and namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2254,"byte_end":2291,"line_start":20,"line_end":20,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2292,"byte_end":2295,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Prefixes and URIs","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2296,"byte_end":2319,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2320,"byte_end":2323,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ A qualified name with a prefix must always contain a proper namespace URI --- names with","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2324,"byte_end":2416,"line_start":24,"line_end":24,"column_start":1,"column_end":93}},{"value":"/ a prefix but without a namespace associated with that prefix are meaningless. However,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2417,"byte_end":2507,"line_start":25,"line_end":25,"column_start":1,"column_end":91}},{"value":"/ it is impossible to obtain proper namespace URI by a prefix without a context, and such","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2508,"byte_end":2599,"line_start":26,"line_end":26,"column_start":1,"column_end":92}},{"value":"/ context is only available when parsing a document (or it can be constructed manually","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2600,"byte_end":2688,"line_start":27,"line_end":27,"column_start":1,"column_end":89}},{"value":"/ when writing a document). Tying a name to a context statically seems impractical. This","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2689,"byte_end":2779,"line_start":28,"line_end":28,"column_start":1,"column_end":91}},{"value":"/ may change in future, though.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2780,"byte_end":2813,"line_start":29,"line_end":29,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2814,"byte_end":2817,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ # Conversions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2818,"byte_end":2835,"line_start":31,"line_end":31,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2836,"byte_end":2839,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ `Name` implements some `From` instances for conversion from strings and tuples. For example:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2840,"byte_end":2936,"line_start":33,"line_end":33,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2937,"byte_end":2940,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2941,"byte_end":2952,"line_start":35,"line_end":35,"column_start":1,"column_end":12}},{"value":"/ # use xml::name::Name;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2953,"byte_end":2979,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/ let n1: Name = \"p:some-name\".into();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":2980,"byte_end":3020,"line_start":37,"line_end":37,"column_start":1,"column_end":41}},{"value":"/ let n2: Name = (\"p\", \"some-name\").into();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3021,"byte_end":3066,"line_start":38,"line_end":38,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3067,"byte_end":3070,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(n1, n2);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3071,"byte_end":3094,"line_start":40,"line_end":40,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(n1.local_name, \"some-name\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3095,"byte_end":3138,"line_start":41,"line_end":41,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(n1.prefix, Some(\"p\"));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3139,"byte_end":3176,"line_start":42,"line_end":42,"column_start":1,"column_end":38}},{"value":"/ assert!(n1.namespace.is_none());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3177,"byte_end":3213,"line_start":43,"line_end":43,"column_start":1,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3214,"byte_end":3221,"line_start":44,"line_end":44,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3222,"byte_end":3225,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ This is added to support easy specification of XML elements when writing XML documents.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3226,"byte_end":3317,"line_start":46,"line_end":46,"column_start":1,"column_end":92}}]},{"kind":"Field","id":{"krate":0,"index":832},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3452,"byte_end":3462,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"name":"local_name","qualname":"::name::Name::local_name","value":"&'a str","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" A local name, e.g. `string` in `xsi:string`.\n","sig":null,"attributes":[{"value":"/ A local name, e.g. `string` in `xsi:string`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3395,"byte_end":3443,"line_start":49,"line_end":49,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":833},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3545,"byte_end":3554,"line_start":53,"line_end":53,"column_start":9,"column_end":18},"name":"namespace","qualname":"::name::Name::namespace","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.\n","sig":null,"attributes":[{"value":"/ A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3478,"byte_end":3536,"line_start":52,"line_end":52,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":834},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3633,"byte_end":3639,"line_start":56,"line_end":56,"column_start":9,"column_end":15},"name":"prefix","qualname":"::name::Name::prefix","value":"std::option::Option<&'a str>","parent":{"krate":0,"index":830},"children":[],"decl_id":null,"docs":" A name prefix, e.g. `xsi` in `xsi:string`.\n","sig":null,"attributes":[{"value":"/ A name prefix, e.g. `xsi` in `xsi:string`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3578,"byte_end":3624,"line_start":55,"line_end":55,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":26},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4610,"byte_end":4618,"line_start":92,"line_end":92,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Name>::to_owned","value":"pub fn to_owned(&Self) -> OwnedName","parent":null,"children":[],"decl_id":null,"docs":" Returns an owned variant of the qualified name.\n","sig":null,"attributes":[{"value":"/ Returns an owned variant of the qualified name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4547,"byte_end":4598,"line_start":91,"line_end":91,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4927,"byte_end":4932,"line_start":102,"line_end":102,"column_start":12,"column_end":17},"name":"local","qualname":"<Name>::local","value":"pub fn local(&str) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance representing plain local name.\n","sig":null,"attributes":[{"value":"/ Returns a new `Name` instance representing plain local name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4837,"byte_end":4901,"line_start":100,"line_end":100,"column_start":5,"column_end":69}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4906,"byte_end":4915,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":30},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5184,"byte_end":5192,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"prefixed","qualname":"<Name>::prefixed","value":"pub fn prefixed(&'a str, &'a str) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance with the given local name and prefix.\n","sig":null,"attributes":[{"value":"/ Returns a new `Name` instance with the given local name and prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5087,"byte_end":5158,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5163,"byte_end":5172,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5527,"byte_end":5536,"line_start":123,"line_end":123,"column_start":12,"column_end":21},"name":"qualified","qualname":"<Name>::qualified","value":"pub fn qualified(&'a str, &'a str, Option<&'a str>) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `Name` instance representing a qualified name with or without a prefix and\n with a namespace URI.\n","sig":null,"attributes":[{"value":"/ Returns a new `Name` instance representing a qualified name with or without a prefix and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5379,"byte_end":5471,"line_start":120,"line_end":120,"column_start":5,"column_end":97}},{"value":"/ with a namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5476,"byte_end":5501,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5506,"byte_end":5515,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":32},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5985,"byte_end":5992,"line_start":135,"line_end":135,"column_start":12,"column_end":19},"name":"to_repr","qualname":"<Name>::to_repr","value":"pub fn to_repr(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Returns a correct XML representation of this local name and prefix.","sig":null,"attributes":[{"value":"/ Returns a correct XML representation of this local name and prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5757,"byte_end":5828,"line_start":131,"line_end":131,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5833,"byte_end":5836,"line_start":132,"line_end":132,"column_start":5,"column_end":8}},{"value":"/ This method is different from the autoimplemented `to_string()` because it does not","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5841,"byte_end":5928,"line_start":133,"line_end":133,"column_start":5,"column_end":92}},{"value":"/ include namespace URI in the result.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":5933,"byte_end":5973,"line_start":134,"line_end":134,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":33},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6325,"byte_end":6337,"line_start":145,"line_end":145,"column_start":12,"column_end":24},"name":"repr_display","qualname":"<Name>::repr_display","value":"pub fn repr_display(&Self) -> ReprDisplay","parent":null,"children":[],"decl_id":null,"docs":" Returns a structure which can be displayed with `std::fmt` machinery to obtain this\n local name and prefix.","sig":null,"attributes":[{"value":"/ Returns a structure which can be displayed with `std::fmt` machinery to obtain this","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6063,"byte_end":6150,"line_start":139,"line_end":139,"column_start":5,"column_end":92}},{"value":"/ local name and prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6155,"byte_end":6181,"line_start":140,"line_end":140,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6186,"byte_end":6189,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ This method is needed for efficiency purposes in order not to create unnecessary","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6194,"byte_end":6278,"line_start":142,"line_end":142,"column_start":5,"column_end":89}},{"value":"/ allocations.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6283,"byte_end":6299,"line_start":143,"line_end":143,"column_start":5,"column_end":21}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6304,"byte_end":6313,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":34},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6504,"byte_end":6515,"line_start":151,"line_end":151,"column_start":12,"column_end":23},"name":"prefix_repr","qualname":"<Name>::prefix_repr","value":"pub fn prefix_repr(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.\n","sig":null,"attributes":[{"value":"/ Returns either a prefix of this name or `namespace::NS_NO_PREFIX` constant.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6399,"byte_end":6478,"line_start":149,"line_end":149,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6483,"byte_end":6492,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":35},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6723,"byte_end":6734,"line_start":158,"line_end":158,"column_start":12,"column_end":23},"name":"ReprDisplay","qualname":"::name::ReprDisplay","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is\n displayed in an XML document.\n","sig":null,"attributes":[{"value":"/ A wrapper around `Name` whose `Display` implementation prints the wrapped name as it is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6586,"byte_end":6677,"line_start":156,"line_end":156,"column_start":1,"column_end":92}},{"value":"/ displayed in an XML document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6678,"byte_end":6711,"line_start":157,"line_end":157,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":858},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7210,"byte_end":7219,"line_start":173,"line_end":173,"column_start":12,"column_end":21},"name":"OwnedName","qualname":"::name::OwnedName","value":"OwnedName { local_name, namespace, prefix }","parent":null,"children":[{"krate":0,"index":859},{"krate":0,"index":860},{"krate":0,"index":861}],"decl_id":null,"docs":" An owned variant of `Name`.","sig":null,"attributes":[{"value":"/ An owned variant of `Name`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7055,"byte_end":7086,"line_start":169,"line_end":169,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7087,"byte_end":7090,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/ Everything about `Name` applies to this structure as well.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7091,"byte_end":7153,"line_start":171,"line_end":171,"column_start":1,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":859},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7283,"byte_end":7293,"line_start":175,"line_end":175,"column_start":9,"column_end":19},"name":"local_name","qualname":"::name::OwnedName::local_name","value":"std::string::String","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" A local name, e.g. `string` in `xsi:string`.\n","sig":null,"attributes":[{"value":"/ A local name, e.g. `string` in `xsi:string`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7226,"byte_end":7274,"line_start":174,"line_end":174,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":860},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7375,"byte_end":7384,"line_start":178,"line_end":178,"column_start":9,"column_end":18},"name":"namespace","qualname":"::name::OwnedName::namespace","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.\n","sig":null,"attributes":[{"value":"/ A namespace URI, e.g. `http://www.w3.org/2000/xmlns/`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7308,"byte_end":7366,"line_start":177,"line_end":177,"column_start":5,"column_end":63}}]},{"kind":"Field","id":{"krate":0,"index":861},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7462,"byte_end":7468,"line_start":181,"line_end":181,"column_start":9,"column_end":15},"name":"prefix","qualname":"::name::OwnedName::prefix","value":"std::option::Option<std::string::String>","parent":{"krate":0,"index":858},"children":[],"decl_id":null,"docs":" A name prefix, e.g. `xsi` in `xsi:string`.\n","sig":null,"attributes":[{"value":"/ A name prefix, e.g. `xsi` in `xsi:string`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7407,"byte_end":7453,"line_start":180,"line_end":180,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7741,"byte_end":7747,"line_start":193,"line_end":193,"column_start":12,"column_end":18},"name":"borrow","qualname":"<OwnedName>::borrow","value":"pub fn borrow(&Self) -> Name","parent":null,"children":[],"decl_id":null,"docs":" Constructs a borrowed `Name` based on this owned name.\n","sig":null,"attributes":[{"value":"/ Constructs a borrowed `Name` based on this owned name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7671,"byte_end":7729,"line_start":192,"line_end":192,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8059,"byte_end":8064,"line_start":203,"line_end":203,"column_start":12,"column_end":17},"name":"local","qualname":"<OwnedName>::local","value":"pub fn local<S>(S) -> OwnedName where S: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `OwnedName` instance representing a plain local name.\n","sig":null,"attributes":[{"value":"/ Returns a new `OwnedName` instance representing a plain local name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7962,"byte_end":8033,"line_start":201,"line_end":201,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8038,"byte_end":8047,"line_start":202,"line_end":202,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8412,"byte_end":8421,"line_start":214,"line_end":214,"column_start":12,"column_end":21},"name":"qualified","qualname":"<OwnedName>::qualified","value":"pub fn qualified<S1, S2, S3>(S1, S2, Option<S3>) -> OwnedName where\nS1: Into<String>, S2: Into<String>, S3: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `OwnedName` instance representing a qualified name with or without\n a prefix and with a namespace URI.\n","sig":null,"attributes":[{"value":"/ Returns a new `OwnedName` instance representing a qualified name with or without","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8259,"byte_end":8343,"line_start":211,"line_end":211,"column_start":5,"column_end":89}},{"value":"/ a prefix and with a namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8348,"byte_end":8386,"line_start":212,"line_end":212,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8391,"byte_end":8400,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8885,"byte_end":8895,"line_start":227,"line_end":227,"column_start":12,"column_end":22},"name":"prefix_ref","qualname":"<OwnedName>::prefix_ref","value":"pub fn prefix_ref(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optional prefix by reference, equivalent to `self.borrow().prefix`\n but avoids extra work.\n","sig":null,"attributes":[{"value":"/ Returns an optional prefix by reference, equivalent to `self.borrow().prefix`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8747,"byte_end":8828,"line_start":224,"line_end":224,"column_start":5,"column_end":86}},{"value":"/ but avoids extra work.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8833,"byte_end":8859,"line_start":225,"line_end":225,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8864,"byte_end":8873,"line_start":226,"line_end":226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9118,"byte_end":9131,"line_start":234,"line_end":234,"column_start":12,"column_end":25},"name":"namespace_ref","qualname":"<OwnedName>::namespace_ref","value":"pub fn namespace_ref(&Self) -> Option<&str>","parent":null,"children":[],"decl_id":null,"docs":" Returns an optional namespace by reference, equivalen to `self.borrow().namespace`\n but avoids extra work.\n","sig":null,"attributes":[{"value":"/ Returns an optional namespace by reference, equivalen to `self.borrow().namespace`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":8975,"byte_end":9061,"line_start":231,"line_end":231,"column_start":5,"column_end":91}},{"value":"/ but avoids extra work.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9066,"byte_end":9092,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9097,"byte_end":9106,"line_start":233,"line_end":233,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":68},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"attribute","qualname":"::attribute","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":876},{"krate":0,"index":901},{"krate":0,"index":898},{"krate":0,"index":893},{"krate":0,"index":895},{"krate":0,"index":887},{"krate":0,"index":889},{"krate":0,"index":883},{"krate":0,"index":880},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":903},{"krate":0,"index":918},{"krate":0,"index":915},{"krate":0,"index":916},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":908},{"krate":0,"index":906},{"krate":0,"index":81},{"krate":0,"index":85}],"decl_id":null,"docs":" Contains XML attributes manipulation types and functions.","sig":null,"attributes":[{"value":"/ Contains XML attributes manipulation types and functions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11301,"byte_end":11362,"line_start":1,"line_end":1,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11363,"byte_end":11366,"line_start":2,"line_end":2,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":876},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11628,"byte_end":11637,"line_start":13,"line_end":13,"column_start":12,"column_end":21},"name":"Attribute","qualname":"::attribute::Attribute","value":"Attribute { name, value }","parent":null,"children":[{"krate":0,"index":878},{"krate":0,"index":879}],"decl_id":null,"docs":" A borrowed version of an XML attribute.","sig":null,"attributes":[{"value":"/ A borrowed version of an XML attribute.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11447,"byte_end":11490,"line_start":9,"line_end":9,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11491,"byte_end":11494,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ Consists of a borrowed qualified name and a borrowed string value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11495,"byte_end":11565,"line_start":11,"line_end":11,"column_start":1,"column_end":71}}]},{"kind":"Field","id":{"krate":0,"index":878},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11676,"byte_end":11680,"line_start":15,"line_end":15,"column_start":9,"column_end":13},"name":"name","qualname":"::attribute::Attribute::name","value":"name::Name<'a>","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" Attribute name.\n","sig":null,"attributes":[{"value":"/ Attribute name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11648,"byte_end":11667,"line_start":14,"line_end":14,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":879},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11726,"byte_end":11731,"line_start":18,"line_end":18,"column_start":9,"column_end":14},"name":"value","qualname":"::attribute::Attribute::value","value":"&'a str","parent":{"krate":0,"index":876},"children":[],"decl_id":null,"docs":" Attribute value.\n","sig":null,"attributes":[{"value":"/ Attribute value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11697,"byte_end":11717,"line_start":17,"line_end":17,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12041,"byte_end":12049,"line_start":30,"line_end":30,"column_start":12,"column_end":20},"name":"to_owned","qualname":"<Attribute>::to_owned","value":"pub fn to_owned(&Self) -> OwnedAttribute","parent":null,"children":[],"decl_id":null,"docs":" Creates an owned attribute out of this borrowed one.\n","sig":null,"attributes":[{"value":"/ Creates an owned attribute out of this borrowed one.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11959,"byte_end":12015,"line_start":28,"line_end":28,"column_start":5,"column_end":61}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12020,"byte_end":12029,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12316,"byte_end":12319,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<Attribute>::new","value":"pub fn new(Name, &'a str) -> Attribute","parent":null,"children":[],"decl_id":null,"docs":" Creates a borrowed attribute using the provided borrowed name and a borrowed string value.\n","sig":null,"attributes":[{"value":"/ Creates a borrowed attribute using the provided borrowed name and a borrowed string value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12196,"byte_end":12290,"line_start":37,"line_end":37,"column_start":5,"column_end":99}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12295,"byte_end":12304,"line_start":38,"line_end":38,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":903},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12628,"byte_end":12642,"line_start":51,"line_end":51,"column_start":12,"column_end":26},"name":"OwnedAttribute","qualname":"::attribute::OwnedAttribute","value":"OwnedAttribute { name, value }","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"decl_id":null,"docs":" An owned version of an XML attribute.","sig":null,"attributes":[{"value":"/ An owned version of an XML attribute.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12459,"byte_end":12500,"line_start":47,"line_end":47,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12501,"byte_end":12504,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ Consists of an owned qualified name and an owned string value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12505,"byte_end":12571,"line_start":49,"line_end":49,"column_start":1,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":904},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12677,"byte_end":12681,"line_start":53,"line_end":53,"column_start":9,"column_end":13},"name":"name","qualname":"::attribute::OwnedAttribute::name","value":"name::OwnedName","parent":{"krate":0,"index":903},"children":[],"decl_id":null,"docs":" Attribute name.\n","sig":null,"attributes":[{"value":"/ Attribute name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12649,"byte_end":12668,"line_start":52,"line_end":52,"column_start":5,"column_end":24}}]},{"kind":"Field","id":{"krate":0,"index":905},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12728,"byte_end":12733,"line_start":56,"line_end":56,"column_start":9,"column_end":14},"name":"value","qualname":"::attribute::OwnedAttribute::value","value":"std::string::String","parent":{"krate":0,"index":903},"children":[],"decl_id":null,"docs":" Attribute value.\n","sig":null,"attributes":[{"value":"/ Attribute value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12699,"byte_end":12719,"line_start":55,"line_end":55,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12840,"byte_end":12846,"line_start":61,"line_end":61,"column_start":12,"column_end":18},"name":"borrow","qualname":"<OwnedAttribute>::borrow","value":"pub fn borrow(&Self) -> Attribute","parent":null,"children":[],"decl_id":null,"docs":" Returns a borrowed `Attribute` out of this owned one.\n","sig":null,"attributes":[{"value":"/ Returns a borrowed `Attribute` out of this owned one.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12771,"byte_end":12828,"line_start":60,"line_end":60,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":13096,"byte_end":13099,"line_start":70,"line_end":70,"column_start":12,"column_end":15},"name":"new","qualname":"<OwnedAttribute>::new","value":"pub fn new<S: Into<String>>(OwnedName, S) -> OwnedAttribute","parent":null,"children":[],"decl_id":null,"docs":" Creates a new owned attribute using the provided owned name and an owned string value.\n","sig":null,"attributes":[{"value":"/ Creates a new owned attribute using the provided owned name and an owned string value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12980,"byte_end":13070,"line_start":68,"line_end":68,"column_start":5,"column_end":95}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":13075,"byte_end":13084,"line_start":69,"line_end":69,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":87},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"common","qualname":"::common","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","parent":null,"children":[{"krate":0,"index":88},{"krate":0,"index":920},{"krate":0,"index":932},{"krate":0,"index":930},{"krate":0,"index":926},{"krate":0,"index":927},{"krate":0,"index":923},{"krate":0,"index":924},{"krate":0,"index":89},{"krate":0,"index":94},{"krate":0,"index":96},{"krate":0,"index":98},{"krate":0,"index":100},{"krate":0,"index":933},{"krate":0,"index":946},{"krate":0,"index":944},{"krate":0,"index":941},{"krate":0,"index":942},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":102},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"decl_id":null,"docs":" Contains common types and functions used throughout the library.\n","sig":null,"attributes":[{"value":"/ Contains common types and functions used throughout the library.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":13911,"byte_end":13979,"line_start":1,"line_end":1,"column_start":1,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":920},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14101,"byte_end":14113,"line_start":7,"line_end":7,"column_start":12,"column_end":24},"name":"TextPosition","qualname":"::common::TextPosition","value":"TextPosition { row, column }","parent":null,"children":[{"krate":0,"index":921},{"krate":0,"index":922}],"decl_id":null,"docs":" Represents a position inside some textual document.\n","sig":null,"attributes":[{"value":"/ Represents a position inside some textual document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":13996,"byte_end":14051,"line_start":5,"line_end":5,"column_start":1,"column_end":56}}]},{"kind":"Field","id":{"krate":0,"index":921},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14153,"byte_end":14156,"line_start":9,"line_end":9,"column_start":9,"column_end":12},"name":"row","qualname":"::common::TextPosition::row","value":"u64","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Row, counting from 0\n","sig":null,"attributes":[{"value":"/ Row, counting from 0","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14120,"byte_end":14144,"line_start":8,"line_end":8,"column_start":5,"column_end":29}}]},{"kind":"Field","id":{"krate":0,"index":922},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14203,"byte_end":14209,"line_start":11,"line_end":11,"column_start":9,"column_end":15},"name":"column","qualname":"::common::TextPosition::column","value":"u64","parent":{"krate":0,"index":920},"children":[],"decl_id":null,"docs":" Column, counting from 0\n","sig":null,"attributes":[{"value":"/ Column, counting from 0","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14167,"byte_end":14194,"line_start":10,"line_end":10,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14340,"byte_end":14343,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<TextPosition>::new","value":"pub fn new() -> TextPosition","parent":null,"children":[],"decl_id":null,"docs":" Creates a new position initialized to the beginning of the document\n","sig":null,"attributes":[{"value":"/ Creates a new position initialized to the beginning of the document","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14243,"byte_end":14314,"line_start":15,"line_end":15,"column_start":5,"column_end":76}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14319,"byte_end":14328,"line_start":16,"line_end":16,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14479,"byte_end":14486,"line_start":23,"line_end":23,"column_start":12,"column_end":19},"name":"advance","qualname":"<TextPosition>::advance","value":"pub fn advance(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Advances the position in a line\n","sig":null,"attributes":[{"value":"/ Advances the position in a line","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14418,"byte_end":14453,"line_start":21,"line_end":21,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14458,"byte_end":14467,"line_start":22,"line_end":22,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14645,"byte_end":14659,"line_start":29,"line_end":29,"column_start":12,"column_end":26},"name":"advance_to_tab","qualname":"<TextPosition>::advance_to_tab","value":"pub fn advance_to_tab(&mut Self, u8)","parent":null,"children":[],"decl_id":null,"docs":" Advances the position in a line to the next tab position\n","sig":null,"attributes":[{"value":"/ Advances the position in a line to the next tab position","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14559,"byte_end":14619,"line_start":27,"line_end":27,"column_start":5,"column_end":65}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14624,"byte_end":14633,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14865,"byte_end":14873,"line_start":36,"line_end":36,"column_start":12,"column_end":20},"name":"new_line","qualname":"<TextPosition>::new_line","value":"pub fn new_line(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Advances the position to the beginning of the next line\n","sig":null,"attributes":[{"value":"/ Advances the position to the beginning of the next line","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14780,"byte_end":14839,"line_start":34,"line_end":34,"column_start":5,"column_end":64}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14844,"byte_end":14853,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":98},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15436,"byte_end":15444,"line_start":59,"line_end":59,"column_start":11,"column_end":19},"name":"Position","qualname":"::common::Position","value":"Position","parent":null,"children":[{"krate":0,"index":99}],"decl_id":null,"docs":" Get the position in the document corresponding to the object","sig":null,"attributes":[{"value":"/ Get the position in the document corresponding to the object","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15296,"byte_end":15360,"line_start":56,"line_end":56,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15361,"byte_end":15364,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ This trait is implemented by parsers, lexers and errors.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15365,"byte_end":15425,"line_start":58,"line_end":58,"column_start":1,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15534,"byte_end":15542,"line_start":61,"line_end":61,"column_start":8,"column_end":16},"name":"position","qualname":"::common::Position::position","value":"pub fn position(&Self) -> TextPosition","parent":{"krate":0,"index":98},"children":[],"decl_id":null,"docs":" Returns the current position or a position corresponding to the object.\n","sig":null,"attributes":[{"value":"/ Returns the current position or a position corresponding to the object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15451,"byte_end":15526,"line_start":60,"line_end":60,"column_start":5,"column_end":80}}]},{"kind":"TupleVariant","id":{"krate":0,"index":934},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15799,"byte_end":15808,"line_start":75,"line_end":75,"column_start":5,"column_end":14},"name":"Version10","qualname":"::common::XmlVersion::Version10","value":"XmlVersion::Version10","parent":{"krate":0,"index":933},"children":[],"decl_id":null,"docs":" XML version 1.0.\n","sig":null,"attributes":[{"value":"/ XML version 1.0.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15774,"byte_end":15794,"line_start":74,"line_end":74,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":936},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15840,"byte_end":15849,"line_start":78,"line_end":78,"column_start":5,"column_end":14},"name":"Version11","qualname":"::common::XmlVersion::Version11","value":"XmlVersion::Version11","parent":{"krate":0,"index":933},"children":[],"decl_id":null,"docs":" XML version 1.1.\n","sig":null,"attributes":[{"value":"/ XML version 1.1.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15815,"byte_end":15835,"line_start":77,"line_end":77,"column_start":5,"column_end":25}}]},{"kind":"Enum","id":{"krate":0,"index":933},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15757,"byte_end":15767,"line_start":73,"line_end":73,"column_start":10,"column_end":20},"name":"XmlVersion","qualname":"::common::XmlVersion","value":"pub enum XmlVersion {\n\n    /// XML version 1.0.\n    Version10,\n\n    /// XML version 1.1.\n    Version11,\n}","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":936}],"decl_id":null,"docs":" XML version enumeration.\n","sig":null,"attributes":[{"value":"/ XML version enumeration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15681,"byte_end":15709,"line_start":71,"line_end":71,"column_start":1,"column_end":29}}]},{"kind":"Function","id":{"krate":0,"index":104},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16313,"byte_end":16331,"line_start":95,"line_end":95,"column_start":8,"column_end":26},"name":"is_whitespace_char","qualname":"::common::is_whitespace_char","value":"pub fn is_whitespace_char(char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a white space character (`S`)\n as is defined by XML 1.1 specification, [section 2.3][1].","sig":null,"attributes":[{"value":"/ Checks whether the given character is a white space character (`S`)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16098,"byte_end":16169,"line_start":91,"line_end":91,"column_start":1,"column_end":72}},{"value":"/ as is defined by XML 1.1 specification, [section 2.3][1].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16170,"byte_end":16231,"line_start":92,"line_end":92,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16232,"byte_end":16235,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16236,"byte_end":16305,"line_start":94,"line_end":94,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":105},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16670,"byte_end":16688,"line_start":106,"line_end":106,"column_start":8,"column_end":26},"name":"is_name_start_char","qualname":"::common::is_name_start_char","value":"pub fn is_name_start_char(char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a name start character (`NameStartChar`)\n as is defined by XML 1.1 specification, [section 2.3][1].","sig":null,"attributes":[{"value":"/ Checks whether the given character is a name start character (`NameStartChar`)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16444,"byte_end":16526,"line_start":102,"line_end":102,"column_start":1,"column_end":83}},{"value":"/ as is defined by XML 1.1 specification, [section 2.3][1].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16527,"byte_end":16588,"line_start":103,"line_end":103,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16589,"byte_end":16592,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":16593,"byte_end":16662,"line_start":105,"line_end":105,"column_start":1,"column_end":70}}]},{"kind":"Function","id":{"krate":0,"index":106},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":17364,"byte_end":17376,"line_start":123,"line_end":123,"column_start":8,"column_end":20},"name":"is_name_char","qualname":"::common::is_name_char","value":"pub fn is_name_char(char) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the given character is a name character (`NameChar`)\n as is defined by XML 1.1 specification, [section 2.3][1].","sig":null,"attributes":[{"value":"/ Checks whether the given character is a name character (`NameChar`)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":17149,"byte_end":17220,"line_start":119,"line_end":119,"column_start":1,"column_end":72}},{"value":"/ as is defined by XML 1.1 specification, [section 2.3][1].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":17221,"byte_end":17282,"line_start":120,"line_end":120,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":17283,"byte_end":17286,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/ [1]: http://www.w3.org/TR/2006/REC-xml11-20060816/#sec-common-syn","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":17287,"byte_end":17356,"line_start":122,"line_end":122,"column_start":1,"column_end":70}}]},{"kind":"Mod","id":{"krate":0,"index":107},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"escape","qualname":"::escape","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","parent":null,"children":[{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110},{"krate":0,"index":1442},{"krate":0,"index":111},{"krate":0,"index":1444},{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":1446},{"krate":0,"index":114},{"krate":0,"index":1448},{"krate":0,"index":115},{"krate":0,"index":122},{"krate":0,"index":125},{"krate":0,"index":133},{"krate":0,"index":137},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143}],"decl_id":null,"docs":" Contains functions for performing XML special characters escaping.\n","sig":null,"attributes":[{"value":"/ Contains functions for performing XML special characters escaping.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":17590,"byte_end":17660,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Function","id":{"krate":0,"index":142},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19833,"byte_end":19853,"line_start":94,"line_end":94,"column_start":8,"column_end":28},"name":"escape_str_attribute","qualname":"::escape::escape_str_attribute","value":"pub fn escape_str_attribute(&str) -> Cow<, str>","parent":null,"children":[],"decl_id":null,"docs":" Performs escaping of common XML characters inside an attribute value.","sig":null,"attributes":[{"value":"/ Performs escaping of common XML characters inside an attribute value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19335,"byte_end":19408,"line_start":79,"line_end":79,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19409,"byte_end":19412,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ This function replaces several important markup characters with their","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19413,"byte_end":19486,"line_start":81,"line_end":81,"column_start":1,"column_end":74}},{"value":"/ entity equivalents:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19487,"byte_end":19510,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19511,"byte_end":19514,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ * `<` → `&lt;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19515,"byte_end":19535,"line_start":84,"line_end":84,"column_start":1,"column_end":19}},{"value":"/ * `>` → `&gt;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19536,"byte_end":19556,"line_start":85,"line_end":85,"column_start":1,"column_end":19}},{"value":"/ * `\"` → `&quot;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19557,"byte_end":19579,"line_start":86,"line_end":86,"column_start":1,"column_end":21}},{"value":"/ * `'` → `&apos;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19580,"byte_end":19602,"line_start":87,"line_end":87,"column_start":1,"column_end":21}},{"value":"/ * `&` → `&amp;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19603,"byte_end":19624,"line_start":88,"line_end":88,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19625,"byte_end":19628,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ The resulting string is safe to use inside XML attribute values or in PCDATA sections.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19629,"byte_end":19719,"line_start":90,"line_end":90,"column_start":1,"column_end":91}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19720,"byte_end":19723,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Does not perform allocations if the given string does not contain escapable characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19724,"byte_end":19815,"line_start":92,"line_end":92,"column_start":1,"column_end":92}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19816,"byte_end":19825,"line_start":93,"line_end":93,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":143},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20353,"byte_end":20370,"line_start":110,"line_end":110,"column_start":8,"column_end":25},"name":"escape_str_pcdata","qualname":"::escape::escape_str_pcdata","value":"pub fn escape_str_pcdata(&str) -> Cow<, str>","parent":null,"children":[],"decl_id":null,"docs":" Performs escaping of common XML characters inside PCDATA.","sig":null,"attributes":[{"value":"/ Performs escaping of common XML characters inside PCDATA.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19929,"byte_end":19990,"line_start":98,"line_end":98,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19991,"byte_end":19994,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ This function replaces several important markup characters with their","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19995,"byte_end":20068,"line_start":100,"line_end":100,"column_start":1,"column_end":74}},{"value":"/ entity equivalents:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20069,"byte_end":20092,"line_start":101,"line_end":101,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20093,"byte_end":20096,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ * `<` → `&lt;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20097,"byte_end":20117,"line_start":103,"line_end":103,"column_start":1,"column_end":19}},{"value":"/ * `&` → `&amp;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20118,"byte_end":20139,"line_start":104,"line_end":104,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20140,"byte_end":20143,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ The resulting string is safe to use inside PCDATA sections but NOT inside attribute values.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20144,"byte_end":20239,"line_start":106,"line_end":106,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20240,"byte_end":20243,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Does not perform allocations if the given string does not contain escapable characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20244,"byte_end":20335,"line_start":108,"line_end":108,"column_start":1,"column_end":92}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":20336,"byte_end":20345,"line_start":109,"line_end":109,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":144},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"namespace","qualname":"::namespace","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","parent":null,"children":[{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":947},{"krate":0,"index":957},{"krate":0,"index":958},{"krate":0,"index":954},{"krate":0,"index":955},{"krate":0,"index":952},{"krate":0,"index":950},{"krate":0,"index":160},{"krate":0,"index":177},{"krate":0,"index":180},{"krate":0,"index":961},{"krate":0,"index":973},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":966},{"krate":0,"index":967},{"krate":0,"index":964},{"krate":0,"index":187},{"krate":0,"index":209},{"krate":0,"index":214},{"krate":0,"index":218},{"krate":0,"index":222},{"krate":0,"index":227},{"krate":0,"index":229},{"krate":0,"index":233},{"krate":0,"index":237},{"krate":0,"index":241}],"decl_id":null,"docs":" Contains namespace manipulation types and functions.\n","sig":null,"attributes":[{"value":"/ Contains namespace manipulation types and functions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20443,"byte_end":20499,"line_start":1,"line_end":1,"column_start":1,"column_end":57}}]},{"kind":"Const","id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20876,"byte_end":20891,"line_start":14,"line_end":14,"column_start":11,"column_end":26},"name":"NS_XMLNS_PREFIX","qualname":"::namespace::NS_XMLNS_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates prefix for namespace definitions.","sig":null,"attributes":[{"value":"/ Designates prefix for namespace definitions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20684,"byte_end":20732,"line_start":9,"line_end":9,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20733,"byte_end":20736,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ See [Namespaces in XML][namespace] spec for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20737,"byte_end":20802,"line_start":11,"line_end":11,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20803,"byte_end":20806,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/   [namespace]: http://www.w3.org/TR/xml-names/#ns-decl","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20807,"byte_end":20865,"line_start":13,"line_end":13,"column_start":1,"column_end":59}}]},{"kind":"Const","id":{"krate":0,"index":155},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21110,"byte_end":21122,"line_start":21,"line_end":21,"column_start":11,"column_end":23},"name":"NS_XMLNS_URI","qualname":"::namespace::NS_XMLNS_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the standard URI for `xmlns` prefix.","sig":null,"attributes":[{"value":"/ Designates the standard URI for `xmlns` prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20918,"byte_end":20969,"line_start":16,"line_end":16,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20970,"byte_end":20973,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See [A Namespace Name for xmlns Attributes][1] for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":20974,"byte_end":21046,"line_start":18,"line_end":18,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21047,"byte_end":21050,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/   [namespace]: http://www.w3.org/2000/xmlns/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21051,"byte_end":21099,"line_start":20,"line_end":20,"column_start":1,"column_end":49}}]},{"kind":"Const","id":{"krate":0,"index":156},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21633,"byte_end":21646,"line_start":32,"line_end":32,"column_start":11,"column_end":24},"name":"NS_XML_PREFIX","qualname":"::namespace::NS_XML_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates prefix for a namespace containing several special predefined attributes.","sig":null,"attributes":[{"value":"/ Designates prefix for a namespace containing several special predefined attributes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21176,"byte_end":21263,"line_start":23,"line_end":23,"column_start":1,"column_end":88}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21264,"byte_end":21267,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ See [2.10 White Space handling][1],  [2.1 Language Identification][2],","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21268,"byte_end":21342,"line_start":25,"line_end":25,"column_start":1,"column_end":75}},{"value":"/ [XML Base specification][3] and [xml:id specification][4] for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21343,"byte_end":21426,"line_start":26,"line_end":26,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21427,"byte_end":21430,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/   [1]: http://www.w3.org/TR/REC-xml/#sec-white-space","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21431,"byte_end":21487,"line_start":28,"line_end":28,"column_start":1,"column_end":57}},{"value":"/   [2]: http://www.w3.org/TR/REC-xml/#sec-lang-tag","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21488,"byte_end":21541,"line_start":29,"line_end":29,"column_start":1,"column_end":54}},{"value":"/   [3]: http://www.w3.org/TR/xmlbase/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21542,"byte_end":21582,"line_start":30,"line_end":30,"column_start":1,"column_end":41}},{"value":"/   [4]: http://www.w3.org/TR/xml-id/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21583,"byte_end":21622,"line_start":31,"line_end":31,"column_start":1,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":157},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21797,"byte_end":21807,"line_start":37,"line_end":37,"column_start":11,"column_end":21},"name":"NS_XML_URI","qualname":"::namespace::NS_XML_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the standard URI for `xml` prefix.","sig":null,"attributes":[{"value":"/ Designates the standard URI for `xml` prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21673,"byte_end":21722,"line_start":34,"line_end":34,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21723,"byte_end":21726,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ See `NS_XML_PREFIX` documentation for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21727,"byte_end":21786,"line_start":36,"line_end":36,"column_start":1,"column_end":60}}]},{"kind":"Const","id":{"krate":0,"index":158},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22577,"byte_end":22589,"line_start":53,"line_end":53,"column_start":11,"column_end":23},"name":"NS_NO_PREFIX","qualname":"::namespace::NS_NO_PREFIX","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates the absence of prefix in a qualified name.","sig":null,"attributes":[{"value":"/ Designates the absence of prefix in a qualified name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21870,"byte_end":21927,"line_start":39,"line_end":39,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21928,"byte_end":21931,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ This constant should be used to define or query default namespace which should be used","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":21932,"byte_end":22022,"line_start":41,"line_end":41,"column_start":1,"column_end":91}},{"value":"/ for element or attribute names without prefix. For example, if a namespace mapping","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22023,"byte_end":22109,"line_start":42,"line_end":42,"column_start":1,"column_end":87}},{"value":"/ at a particular point in the document contains correspondence like","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22110,"byte_end":22180,"line_start":43,"line_end":43,"column_start":1,"column_end":71}},{"value":"/ ```none","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22181,"byte_end":22192,"line_start":44,"line_end":44,"column_start":1,"column_end":12}},{"value":"/   NS_NO_PREFIX  -->  urn:some:namespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22193,"byte_end":22236,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22237,"byte_end":22244,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/ then all names declared without an explicit prefix `urn:some:namespace` is assumed as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22245,"byte_end":22334,"line_start":47,"line_end":47,"column_start":1,"column_end":90}},{"value":"/ a namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22335,"byte_end":22355,"line_start":48,"line_end":48,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22356,"byte_end":22359,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/ By default empty prefix corresponds to absence of namespace, but this can change either","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22360,"byte_end":22451,"line_start":50,"line_end":50,"column_start":1,"column_end":92}},{"value":"/ when writing an XML document (manually) or when reading an XML document (based on namespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22452,"byte_end":22547,"line_start":51,"line_end":51,"column_start":1,"column_end":96}},{"value":"/ declarations).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22548,"byte_end":22566,"line_start":52,"line_end":52,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":159},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23027,"byte_end":23039,"line_start":61,"line_end":61,"column_start":11,"column_end":23},"name":"NS_EMPTY_URI","qualname":"::namespace::NS_EMPTY_URI","value":"&'static str","parent":null,"children":[],"decl_id":null,"docs":" Designates an empty namespace URI, which is equivalent to absence of namespace.","sig":null,"attributes":[{"value":"/ Designates an empty namespace URI, which is equivalent to absence of namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22614,"byte_end":22697,"line_start":55,"line_end":55,"column_start":1,"column_end":84}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22698,"byte_end":22701,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This constant should not usually be used directly; it is used to designate that","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22702,"byte_end":22785,"line_start":57,"line_end":57,"column_start":1,"column_end":84}},{"value":"/ empty prefix corresponds to absent namespace in `NamespaceStack` instances created with","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22786,"byte_end":22877,"line_start":58,"line_end":58,"column_start":1,"column_end":92}},{"value":"/ `NamespaceStack::default()`. Therefore, it can be used to restore `NS_NO_PREFIX` mapping","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22878,"byte_end":22970,"line_start":59,"line_end":59,"column_start":1,"column_end":93}},{"value":"/ in a namespace back to its default value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":22971,"byte_end":23016,"line_start":60,"line_end":60,"column_start":1,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":947},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23255,"byte_end":23264,"line_start":67,"line_end":67,"column_start":12,"column_end":21},"name":"Namespace","qualname":"::namespace::Namespace","value":"","parent":null,"children":[],"decl_id":null,"docs":" Namespace is a map from prefixes to namespace URIs.","sig":null,"attributes":[{"value":"/ Namespace is a map from prefixes to namespace URIs.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23064,"byte_end":23119,"line_start":63,"line_end":63,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23120,"byte_end":23123,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ No prefix (i.e. default namespace) is designated by `NS_NO_PREFIX` constant.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23124,"byte_end":23204,"line_start":65,"line_end":65,"column_start":1,"column_end":81}}]},{"kind":"Field","id":{"krate":0,"index":949},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23265,"byte_end":23293,"line_start":67,"line_end":67,"column_start":22,"column_end":50},"name":"0","qualname":"::namespace::Namespace::0","value":"std::collections::BTreeMap<std::string::String, std::string::String>","parent":{"krate":0,"index":947},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":161},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23375,"byte_end":23380,"line_start":72,"line_end":72,"column_start":12,"column_end":17},"name":"empty","qualname":"<Namespace>::empty","value":"pub fn empty() -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty namespace.\n","sig":null,"attributes":[{"value":"/ Returns an empty namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23318,"byte_end":23349,"line_start":70,"line_end":70,"column_start":5,"column_end":36}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23354,"byte_end":23363,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":162},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23501,"byte_end":23509,"line_start":76,"line_end":76,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Namespace>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace is empty.\n","sig":null,"attributes":[{"value":"/ Checks whether this namespace is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23432,"byte_end":23475,"line_start":74,"line_end":74,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23480,"byte_end":23489,"line_start":75,"line_end":75,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":163},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23699,"byte_end":23719,"line_start":82,"line_end":82,"column_start":12,"column_end":32},"name":"is_essentially_empty","qualname":"<Namespace>::is_essentially_empty","value":"pub fn is_essentially_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace is essentially empty, that is, it does not contain\n anything but default mappings.\n","sig":null,"attributes":[{"value":"/ Checks whether this namespace is essentially empty, that is, it does not contain","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23564,"byte_end":23648,"line_start":80,"line_end":80,"column_start":5,"column_end":89}},{"value":"/ anything but default mappings.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23653,"byte_end":23687,"line_start":81,"line_end":81,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":165},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24387,"byte_end":24395,"line_start":102,"line_end":102,"column_start":12,"column_end":20},"name":"contains","qualname":"<Namespace>::contains","value":"pub fn contains<P: ?Sized + AsRef<str>>(&Self, &P) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether this namespace mapping contains the given prefix.","sig":null,"attributes":[{"value":"/ Checks whether this namespace mapping contains the given prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24112,"byte_end":24180,"line_start":94,"line_end":94,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24185,"byte_end":24188,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24193,"byte_end":24209,"line_start":96,"line_end":96,"column_start":5,"column_end":21}},{"value":"/ * `prefix`  --- namespace prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24214,"byte_end":24251,"line_start":97,"line_end":97,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24256,"byte_end":24259,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24264,"byte_end":24282,"line_start":99,"line_end":99,"column_start":5,"column_end":23}},{"value":"/ `true` if this namespace contains the given prefix, `false` otherwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24287,"byte_end":24361,"line_start":100,"line_end":100,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24366,"byte_end":24375,"line_start":101,"line_end":101,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":167},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25009,"byte_end":25012,"line_start":120,"line_end":120,"column_start":12,"column_end":15},"name":"put","qualname":"<Namespace>::put","value":"pub fn put<P, U>(&mut Self, P, U) -> bool where P: Into<String>,\nU: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into this namespace.","sig":null,"attributes":[{"value":"/ Puts a mapping into this namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24503,"byte_end":24542,"line_start":106,"line_end":106,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24547,"byte_end":24550,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This method does not override any already existing mappings.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24555,"byte_end":24619,"line_start":108,"line_end":108,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24624,"byte_end":24627,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ Returns a boolean flag indicating whether the map already contained","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24632,"byte_end":24703,"line_start":110,"line_end":110,"column_start":5,"column_end":76}},{"value":"/ the given prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24708,"byte_end":24729,"line_start":111,"line_end":111,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24734,"byte_end":24737,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24742,"byte_end":24758,"line_start":113,"line_end":113,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24763,"byte_end":24799,"line_start":114,"line_end":114,"column_start":5,"column_end":41}},{"value":"/ * `uri`    --- namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24804,"byte_end":24837,"line_start":115,"line_end":115,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24842,"byte_end":24845,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24850,"byte_end":24868,"line_start":117,"line_end":117,"column_start":5,"column_end":23}},{"value":"/ `true` if `prefix` has been inserted successfully; `false` if the `prefix`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24873,"byte_end":24951,"line_start":118,"line_end":118,"column_start":5,"column_end":83}},{"value":"/ was already present in the namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":24956,"byte_end":24997,"line_start":119,"line_end":119,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25860,"byte_end":25869,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"force_put","qualname":"<Namespace>::force_put","value":"pub fn force_put<P, U>(&mut Self, P, U) -> Option<String> where\nP: Into<String>, U: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into this namespace forcefully.","sig":null,"attributes":[{"value":"/ Puts a mapping into this namespace forcefully.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25325,"byte_end":25375,"line_start":132,"line_end":132,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25380,"byte_end":25383,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ This method, unlike `put()`, does replace an already existing mapping.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25388,"byte_end":25462,"line_start":134,"line_end":134,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25467,"byte_end":25470,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ Returns previous URI which was assigned to the given prefix, if it is present.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25475,"byte_end":25557,"line_start":136,"line_end":136,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25562,"byte_end":25565,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25570,"byte_end":25586,"line_start":138,"line_end":138,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25591,"byte_end":25627,"line_start":139,"line_end":139,"column_start":5,"column_end":41}},{"value":"/ * `uri`    --- namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25632,"byte_end":25665,"line_start":140,"line_end":140,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25670,"byte_end":25673,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25678,"byte_end":25696,"line_start":142,"line_end":142,"column_start":5,"column_end":23}},{"value":"/ `Some(uri)` with `uri` being a previous URI assigned to the `prefix`, or","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25701,"byte_end":25777,"line_start":143,"line_end":143,"column_start":5,"column_end":81}},{"value":"/ `None` if such prefix was not present in the namespace before.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":25782,"byte_end":25848,"line_start":144,"line_end":144,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26272,"byte_end":26275,"line_start":158,"line_end":158,"column_start":12,"column_end":15},"name":"get","qualname":"<Namespace>::get","value":"pub fn get<'a, P: ?Sized + AsRef<str>>(&'a Self, &P) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Queries the namespace for the given prefix.","sig":null,"attributes":[{"value":"/ Queries the namespace for the given prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26037,"byte_end":26084,"line_start":151,"line_end":151,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26089,"byte_end":26092,"line_start":152,"line_end":152,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26097,"byte_end":26113,"line_start":153,"line_end":153,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26118,"byte_end":26154,"line_start":154,"line_end":154,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26159,"byte_end":26162,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26167,"byte_end":26185,"line_start":156,"line_end":156,"column_start":5,"column_end":23}},{"value":"/ Namespace URI corresponding to the given prefix, if it is present.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26190,"byte_end":26260,"line_start":157,"line_end":157,"column_start":5,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":177},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26493,"byte_end":26510,"line_start":164,"line_end":164,"column_start":10,"column_end":27},"name":"NamespaceMappings","qualname":"::namespace::NamespaceMappings","value":"Map<Entries, for<'b>fn(: (&'b String, &'b String)) -> UriMapping>","parent":null,"children":[],"decl_id":null,"docs":" An alias for iterator type for namespace mappings contained in a namespace.\n","sig":null,"attributes":[{"value":"/ An alias for iterator type for namespace mappings contained in a namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26404,"byte_end":26483,"line_start":163,"line_end":163,"column_start":1,"column_end":80}}]},{"kind":"Struct","id":{"krate":0,"index":961},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27170,"byte_end":27184,"line_start":186,"line_end":186,"column_start":12,"column_end":26},"name":"NamespaceStack","qualname":"::namespace::NamespaceStack","value":"","parent":null,"children":[],"decl_id":null,"docs":" Namespace stack is a sequence of namespaces.","sig":null,"attributes":[{"value":"/ Namespace stack is a sequence of namespaces.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26945,"byte_end":26993,"line_start":181,"line_end":181,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26994,"byte_end":26997,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ Namespace stack is used to represent cumulative namespace consisting of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":26998,"byte_end":27073,"line_start":183,"line_end":183,"column_start":1,"column_end":76}},{"value":"/ combined namespaces from nested elements.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27074,"byte_end":27119,"line_start":184,"line_end":184,"column_start":1,"column_end":46}}]},{"kind":"Field","id":{"krate":0,"index":963},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27185,"byte_end":27203,"line_start":186,"line_end":186,"column_start":27,"column_end":45},"name":"0","qualname":"::namespace::NamespaceStack::0","value":"std::vec::Vec<namespace::Namespace>","parent":{"krate":0,"index":961},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27296,"byte_end":27301,"line_start":191,"line_end":191,"column_start":12,"column_end":17},"name":"empty","qualname":"<NamespaceStack>::empty","value":"pub fn empty() -> NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Returns an empty namespace stack.\n","sig":null,"attributes":[{"value":"/ Returns an empty namespace stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27233,"byte_end":27270,"line_start":189,"line_end":189,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27275,"byte_end":27284,"line_start":190,"line_end":190,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27622,"byte_end":27629,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"name":"default","qualname":"<NamespaceStack>::default","value":"pub fn default() -> NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Returns a namespace stack with default items in it.","sig":null,"attributes":[{"value":"/ Returns a namespace stack with default items in it.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27369,"byte_end":27424,"line_start":193,"line_end":193,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27429,"byte_end":27432,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ Default items are the following:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27437,"byte_end":27473,"line_start":195,"line_end":195,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27478,"byte_end":27481,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ * `xml` → `http://www.w3.org/XML/1998/namespace`;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27486,"byte_end":27541,"line_start":197,"line_end":197,"column_start":5,"column_end":58}},{"value":"/ * `xmlns` → `http://www.w3.org/2000/xmlns/`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27546,"byte_end":27596,"line_start":198,"line_end":198,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27601,"byte_end":27610,"line_start":199,"line_end":199,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28043,"byte_end":28053,"line_start":214,"line_end":214,"column_start":12,"column_end":22},"name":"push_empty","qualname":"<NamespaceStack>::push_empty","value":"pub fn push_empty(&mut Self) -> &mut NamespaceStack","parent":null,"children":[],"decl_id":null,"docs":" Adds an empty namespace to the top of this stack.\n","sig":null,"attributes":[{"value":"/ Adds an empty namespace to the top of this stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27964,"byte_end":28017,"line_start":212,"line_end":212,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28022,"byte_end":28031,"line_start":213,"line_end":213,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":191},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28275,"byte_end":28278,"line_start":223,"line_end":223,"column_start":12,"column_end":15},"name":"pop","qualname":"<NamespaceStack>::pop","value":"pub fn pop(&mut Self) -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Removes the topmost namespace in this stack.","sig":null,"attributes":[{"value":"/ Removes the topmost namespace in this stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28155,"byte_end":28203,"line_start":219,"line_end":219,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28208,"byte_end":28211,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Panics if the stack is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28216,"byte_end":28249,"line_start":221,"line_end":221,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28254,"byte_end":28263,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":192},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28511,"byte_end":28518,"line_start":231,"line_end":231,"column_start":12,"column_end":19},"name":"try_pop","qualname":"<NamespaceStack>::try_pop","value":"pub fn try_pop(&mut Self) -> Option<Namespace>","parent":null,"children":[],"decl_id":null,"docs":" Removes the topmost namespace in this stack.","sig":null,"attributes":[{"value":"/ Removes the topmost namespace in this stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28346,"byte_end":28394,"line_start":227,"line_end":227,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28399,"byte_end":28402,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ Returns `Some(namespace)` if this stack is not empty and `None` otherwise.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28407,"byte_end":28485,"line_start":229,"line_end":229,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28490,"byte_end":28499,"line_start":230,"line_end":230,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":193},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28725,"byte_end":28733,"line_start":239,"line_end":239,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<NamespaceStack>::peek_mut","value":"pub fn peek_mut(&mut Self) -> &mut Namespace","parent":null,"children":[],"decl_id":null,"docs":" Borrows the topmost namespace mutably, leaving the stack intact.","sig":null,"attributes":[{"value":"/ Borrows the topmost namespace mutably, leaving the stack intact.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28585,"byte_end":28653,"line_start":235,"line_end":235,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28658,"byte_end":28661,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ Panics if the stack is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28666,"byte_end":28699,"line_start":237,"line_end":237,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28704,"byte_end":28713,"line_start":238,"line_end":238,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":194},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28953,"byte_end":28957,"line_start":247,"line_end":247,"column_start":12,"column_end":16},"name":"peek","qualname":"<NamespaceStack>::peek","value":"pub fn peek(&Self) -> &Namespace","parent":null,"children":[],"decl_id":null,"docs":" Borrows the topmost namespace immutably, leaving the stack intact.","sig":null,"attributes":[{"value":"/ Borrows the topmost namespace immutably, leaving the stack intact.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28811,"byte_end":28881,"line_start":243,"line_end":243,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28886,"byte_end":28889,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ Panics if the stack is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28894,"byte_end":28927,"line_start":245,"line_end":245,"column_start":5,"column_end":38}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":28932,"byte_end":28941,"line_start":246,"line_end":246,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":195},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29498,"byte_end":29509,"line_start":262,"line_end":262,"column_start":12,"column_end":23},"name":"put_checked","qualname":"<NamespaceStack>::put_checked","value":"pub fn put_checked<P, U>(&mut Self, P, U) -> bool where P: Into<String> +\nAsRef<str>, U: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into the topmost namespace if this stack does not already contain one.","sig":null,"attributes":[{"value":"/ Puts a mapping into the topmost namespace if this stack does not already contain one.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29023,"byte_end":29112,"line_start":251,"line_end":251,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29117,"byte_end":29120,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ Returns a boolean flag indicating whether the insertion has completed successfully.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29125,"byte_end":29212,"line_start":253,"line_end":253,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29217,"byte_end":29220,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29225,"byte_end":29241,"line_start":255,"line_end":255,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29246,"byte_end":29282,"line_start":256,"line_end":256,"column_start":5,"column_end":41}},{"value":"/ * `uri`    --- namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29287,"byte_end":29320,"line_start":257,"line_end":257,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29325,"byte_end":29328,"line_start":258,"line_end":258,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29333,"byte_end":29351,"line_start":259,"line_end":259,"column_start":5,"column_end":23}},{"value":"/ `true` if `prefix` has been inserted successfully; `false` if the `prefix`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29356,"byte_end":29434,"line_start":260,"line_end":260,"column_start":5,"column_end":83}},{"value":"/ was already present in the namespace stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29439,"byte_end":29486,"line_start":261,"line_end":261,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30477,"byte_end":30480,"line_start":287,"line_end":287,"column_start":12,"column_end":15},"name":"put","qualname":"<NamespaceStack>::put","value":"pub fn put<P, U>(&mut Self, P, U) -> bool where P: Into<String>,\nU: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Puts a mapping into the topmost namespace in this stack.","sig":null,"attributes":[{"value":"/ Puts a mapping into the topmost namespace in this stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29765,"byte_end":29825,"line_start":271,"line_end":271,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29830,"byte_end":29833,"line_start":272,"line_end":272,"column_start":5,"column_end":8}},{"value":"/ This method does not override a mapping in the topmost namespace if it is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29838,"byte_end":29915,"line_start":273,"line_end":273,"column_start":5,"column_end":82}},{"value":"/ already present, however, it does not depend on other namespaces in the stack,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":29920,"byte_end":30002,"line_start":274,"line_end":274,"column_start":5,"column_end":87}},{"value":"/ so it is possible to put a mapping which is present in lower namespaces.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30007,"byte_end":30083,"line_start":275,"line_end":275,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30088,"byte_end":30091,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Returns a boolean flag indicating whether the insertion has completed successfully.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30096,"byte_end":30183,"line_start":277,"line_end":277,"column_start":5,"column_end":92}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30188,"byte_end":30191,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30196,"byte_end":30212,"line_start":279,"line_end":279,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30217,"byte_end":30253,"line_start":280,"line_end":280,"column_start":5,"column_end":41}},{"value":"/ * `uri`    --- namespace URI.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30258,"byte_end":30291,"line_start":281,"line_end":281,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30296,"byte_end":30299,"line_start":282,"line_end":282,"column_start":5,"column_end":8}},{"value":"/ # Return value","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30304,"byte_end":30322,"line_start":283,"line_end":283,"column_start":5,"column_end":23}},{"value":"/ `true` if `prefix` has been inserted successfully; `false` if the `prefix`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30327,"byte_end":30405,"line_start":284,"line_end":284,"column_start":5,"column_end":83}},{"value":"/ was already present in the namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30410,"byte_end":30451,"line_start":285,"line_end":285,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30456,"byte_end":30465,"line_start":286,"line_end":286,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31001,"byte_end":31004,"line_start":302,"line_end":302,"column_start":12,"column_end":15},"name":"get","qualname":"<NamespaceStack>::get","value":"pub fn get<'a, P: ?Sized + AsRef<str>>(&'a Self, &P) -> Option<&'a str>","parent":null,"children":[],"decl_id":null,"docs":" Performs a search for the given prefix in the whole stack.","sig":null,"attributes":[{"value":"/ Performs a search for the given prefix in the whole stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30641,"byte_end":30703,"line_start":293,"line_end":293,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30708,"byte_end":30711,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ This method walks the stack from top to bottom, querying each namespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30716,"byte_end":30791,"line_start":295,"line_end":295,"column_start":5,"column_end":80}},{"value":"/ in order for the given prefix. If none of the namespaces contains the prefix,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30796,"byte_end":30877,"line_start":296,"line_end":296,"column_start":5,"column_end":86}},{"value":"/ `None` is returned.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30882,"byte_end":30905,"line_start":297,"line_end":297,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30910,"byte_end":30913,"line_start":298,"line_end":298,"column_start":5,"column_end":8}},{"value":"/ # Parameters","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30918,"byte_end":30934,"line_start":299,"line_end":299,"column_start":5,"column_end":21}},{"value":"/ * `prefix` --- namespace prefix.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30939,"byte_end":30975,"line_start":300,"line_end":300,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":30980,"byte_end":30989,"line_start":301,"line_end":301,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31512,"byte_end":31518,"line_start":317,"line_end":317,"column_start":12,"column_end":18},"name":"squash","qualname":"<NamespaceStack>::squash","value":"pub fn squash(&Self) -> Namespace","parent":null,"children":[],"decl_id":null,"docs":" Combines this stack of namespaces into a single namespace.","sig":null,"attributes":[{"value":"/ Combines this stack of namespaces into a single namespace.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31294,"byte_end":31356,"line_start":313,"line_end":313,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31361,"byte_end":31364,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ Namespaces are combined in left-to-right order, that is, rightmost namespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31369,"byte_end":31449,"line_start":315,"line_end":315,"column_start":5,"column_end":85}},{"value":"/ elements take priority over leftmost ones.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31454,"byte_end":31500,"line_start":316,"line_end":316,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":207},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31914,"byte_end":31928,"line_start":329,"line_end":329,"column_start":12,"column_end":26},"name":"checked_target","qualname":"<NamespaceStack>::checked_target","value":"pub fn checked_target(&mut Self) -> CheckedTarget","parent":null,"children":[],"decl_id":null,"docs":" Returns an object which implements `Extend` using `put_checked()` instead of `put()`.","sig":null,"attributes":[{"value":"/ Returns an object which implements `Extend` using `put_checked()` instead of `put()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31741,"byte_end":31830,"line_start":325,"line_end":325,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31835,"byte_end":31838,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ See `CheckedTarget` for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31843,"byte_end":31888,"line_start":327,"line_end":327,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31893,"byte_end":31902,"line_start":328,"line_end":328,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32090,"byte_end":32094,"line_start":335,"line_end":335,"column_start":12,"column_end":16},"name":"iter","qualname":"<NamespaceStack>::iter","value":"pub fn iter(&Self) -> NamespaceStackMappings","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all mappings in this namespace stack.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over all mappings in this namespace stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":31998,"byte_end":32064,"line_start":333,"line_end":333,"column_start":5,"column_end":71}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32069,"byte_end":32078,"line_start":334,"line_end":334,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32599,"byte_end":32621,"line_start":354,"line_end":354,"column_start":12,"column_end":34},"name":"NamespaceStackMappings","qualname":"::namespace::NamespaceStackMappings","value":"NamespaceStackMappings {  }","parent":null,"children":[{"krate":0,"index":211},{"krate":0,"index":212},{"krate":0,"index":213}],"decl_id":null,"docs":" An iterator over mappings from prefixes to URIs in a namespace stack.","sig":null,"attributes":[{"value":"/ An iterator over mappings from prefixes to URIs in a namespace stack.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32164,"byte_end":32237,"line_start":340,"line_end":340,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32238,"byte_end":32241,"line_start":341,"line_end":341,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32242,"byte_end":32255,"line_start":342,"line_end":342,"column_start":1,"column_end":14}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32256,"byte_end":32263,"line_start":343,"line_end":343,"column_start":1,"column_end":8}},{"value":"/ # use xml::namespace::NamespaceStack;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32264,"byte_end":32305,"line_start":344,"line_end":344,"column_start":1,"column_end":42}},{"value":"/ let mut nst = NamespaceStack::empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32306,"byte_end":32348,"line_start":345,"line_end":345,"column_start":1,"column_end":43}},{"value":"/ nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32349,"byte_end":32370,"line_start":346,"line_end":346,"column_start":1,"column_end":22}},{"value":"/ nst.put(\"a\", \"urn:A\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32371,"byte_end":32397,"line_start":347,"line_end":347,"column_start":1,"column_end":27}},{"value":"/ nst.put(\"b\", \"urn:B\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32398,"byte_end":32424,"line_start":348,"line_end":348,"column_start":1,"column_end":27}},{"value":"/ nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32425,"byte_end":32446,"line_start":349,"line_end":349,"column_start":1,"column_end":22}},{"value":"/ nst.put(\"c\", \"urn:C\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32447,"byte_end":32473,"line_start":350,"line_end":350,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32474,"byte_end":32477,"line_start":351,"line_end":351,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec![(\"c\", \"urn:C\"), (\"a\", \"urn:A\"), (\"b\", \"urn:B\")], nst.iter().collect::<Vec<_>>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32478,"byte_end":32579,"line_start":352,"line_end":352,"column_start":1,"column_end":102}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32580,"byte_end":32587,"line_start":353,"line_end":353,"column_start":1,"column_end":8}}]},{"kind":"Type","id":{"krate":0,"index":227},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34590,"byte_end":34600,"line_start":414,"line_end":414,"column_start":10,"column_end":20},"name":"UriMapping","qualname":"::namespace::UriMapping","value":"(&'a str, &'a str)","parent":null,"children":[],"decl_id":null,"docs":" A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.\n","sig":null,"attributes":[{"value":"/ A type alias for a pair of `(prefix, uri)` values returned by namespace iterators.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34494,"byte_end":34580,"line_start":413,"line_end":413,"column_start":1,"column_end":87}}]},{"kind":"Struct","id":{"krate":0,"index":237},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36143,"byte_end":36156,"line_start":470,"line_end":470,"column_start":12,"column_end":25},"name":"CheckedTarget","qualname":"::namespace::CheckedTarget","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.","sig":null,"attributes":[{"value":"/ A wrapper around `NamespaceStack` which implements `Extend` using `put_checked()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35089,"byte_end":35175,"line_start":432,"line_end":432,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35176,"byte_end":35179,"line_start":433,"line_end":433,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35180,"byte_end":35193,"line_start":434,"line_end":434,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35194,"byte_end":35197,"line_start":435,"line_end":435,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35198,"byte_end":35205,"line_start":436,"line_end":436,"column_start":1,"column_end":8}},{"value":"/ # use xml::namespace::NamespaceStack;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35206,"byte_end":35247,"line_start":437,"line_end":437,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35248,"byte_end":35251,"line_start":438,"line_end":438,"column_start":1,"column_end":4}},{"value":"/ let mut nst = NamespaceStack::empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35252,"byte_end":35294,"line_start":439,"line_end":439,"column_start":1,"column_end":43}},{"value":"/ nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35295,"byte_end":35316,"line_start":440,"line_end":440,"column_start":1,"column_end":22}},{"value":"/ nst.put(\"a\", \"urn:A\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35317,"byte_end":35343,"line_start":441,"line_end":441,"column_start":1,"column_end":27}},{"value":"/ nst.put(\"b\", \"urn:B\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35344,"byte_end":35370,"line_start":442,"line_end":442,"column_start":1,"column_end":27}},{"value":"/ nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35371,"byte_end":35392,"line_start":443,"line_end":443,"column_start":1,"column_end":22}},{"value":"/ nst.put(\"c\", \"urn:C\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35393,"byte_end":35419,"line_start":444,"line_end":444,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35420,"byte_end":35423,"line_start":445,"line_end":445,"column_start":1,"column_end":4}},{"value":"/ nst.checked_target().extend(vec![(\"a\", \"urn:Z\"), (\"c\", \"urn:Y\"), (\"d\", \"urn:D\")]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35424,"byte_end":35510,"line_start":446,"line_end":446,"column_start":1,"column_end":87}},{"value":"/ assert_eq!(","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35511,"byte_end":35526,"line_start":447,"line_end":447,"column_start":1,"column_end":16}},{"value":"/     vec![(\"c\", \"urn:C\"), (\"d\", \"urn:D\"), (\"a\", \"urn:A\"), (\"b\", \"urn:B\")],","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35527,"byte_end":35604,"line_start":448,"line_end":448,"column_start":1,"column_end":78}},{"value":"/     nst.iter().collect::<Vec<_>>()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35605,"byte_end":35643,"line_start":449,"line_end":449,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35644,"byte_end":35650,"line_start":450,"line_end":450,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35651,"byte_end":35658,"line_start":451,"line_end":451,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35659,"byte_end":35662,"line_start":452,"line_end":452,"column_start":1,"column_end":4}},{"value":"/ Compare:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35663,"byte_end":35675,"line_start":453,"line_end":453,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35676,"byte_end":35679,"line_start":454,"line_end":454,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35680,"byte_end":35687,"line_start":455,"line_end":455,"column_start":1,"column_end":8}},{"value":"/ # use xml::namespace::NamespaceStack;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35688,"byte_end":35729,"line_start":456,"line_end":456,"column_start":1,"column_end":42}},{"value":"/ # let mut nst = NamespaceStack::empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35730,"byte_end":35774,"line_start":457,"line_end":457,"column_start":1,"column_end":45}},{"value":"/ # nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35775,"byte_end":35798,"line_start":458,"line_end":458,"column_start":1,"column_end":24}},{"value":"/ # nst.put(\"a\", \"urn:A\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35799,"byte_end":35827,"line_start":459,"line_end":459,"column_start":1,"column_end":29}},{"value":"/ # nst.put(\"b\", \"urn:B\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35828,"byte_end":35856,"line_start":460,"line_end":460,"column_start":1,"column_end":29}},{"value":"/ # nst.push_empty();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35857,"byte_end":35880,"line_start":461,"line_end":461,"column_start":1,"column_end":24}},{"value":"/ # nst.put(\"c\", \"urn:C\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35881,"byte_end":35909,"line_start":462,"line_end":462,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35910,"byte_end":35913,"line_start":463,"line_end":463,"column_start":1,"column_end":4}},{"value":"/ nst.extend(vec![(\"a\", \"urn:Z\"), (\"c\", \"urn:Y\"), (\"d\", \"urn:D\")]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35914,"byte_end":35983,"line_start":464,"line_end":464,"column_start":1,"column_end":70}},{"value":"/ assert_eq!(","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":35984,"byte_end":35999,"line_start":465,"line_end":465,"column_start":1,"column_end":16}},{"value":"/     vec![(\"a\", \"urn:Z\"), (\"c\", \"urn:C\"), (\"d\", \"urn:D\"), (\"b\", \"urn:B\")],","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36000,"byte_end":36077,"line_start":466,"line_end":466,"column_start":1,"column_end":78}},{"value":"/     nst.iter().collect::<Vec<_>>()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36078,"byte_end":36116,"line_start":467,"line_end":467,"column_start":1,"column_end":39}},{"value":"/ );","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36117,"byte_end":36123,"line_start":468,"line_end":468,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36124,"byte_end":36131,"line_start":469,"line_end":469,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":246},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reader","qualname":"::reader","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":248},{"krate":0,"index":249},{"krate":0,"index":250},{"krate":0,"index":251},{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":254},{"krate":0,"index":255},{"krate":0,"index":256},{"krate":0,"index":257},{"krate":0,"index":258},{"krate":0,"index":357},{"krate":0,"index":559},{"krate":0,"index":568},{"krate":0,"index":1269},{"krate":0,"index":1281},{"krate":0,"index":1277},{"krate":0,"index":1278},{"krate":0,"index":1274},{"krate":0,"index":1275},{"krate":0,"index":1272},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":591},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":599},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":612},{"krate":0,"index":616},{"krate":0,"index":619},{"krate":0,"index":623}],"decl_id":null,"docs":" Contains high-level interface for a pull-based XML parser.","sig":null,"attributes":[{"value":"/ Contains high-level interface for a pull-based XML parser.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36437,"byte_end":36499,"line_start":1,"line_end":1,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36500,"byte_end":36503,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The most important type in this module is `EventReader`, which provides an iterator","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36504,"byte_end":36591,"line_start":3,"line_end":3,"column_start":1,"column_end":88}},{"value":"/ view for events in XML document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36592,"byte_end":36628,"line_start":4,"line_end":4,"column_start":1,"column_end":37}}]},{"kind":"Struct","id":{"krate":0,"index":1207},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119066,"byte_end":119078,"line_start":11,"line_end":11,"column_start":12,"column_end":24},"name":"ParserConfig","qualname":"::reader::config::ParserConfig","value":"ParserConfig { trim_whitespace, whitespace_to_characters, cdata_to_characters, ignore_comments, coalesce_characters }","parent":null,"children":[{"krate":0,"index":1208},{"krate":0,"index":1209},{"krate":0,"index":1210},{"krate":0,"index":1211},{"krate":0,"index":1212}],"decl_id":null,"docs":" Parser configuration structure.","sig":null,"attributes":[{"value":"/ Parser configuration structure.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":118877,"byte_end":118912,"line_start":6,"line_end":6,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":118913,"byte_end":118916,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This structure contains various configuration options which affect","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":118917,"byte_end":118987,"line_start":8,"line_end":8,"column_start":1,"column_end":71}},{"value":"/ behavior of the parser.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":118988,"byte_end":119015,"line_start":9,"line_end":9,"column_start":1,"column_end":28}}]},{"kind":"Field","id":{"krate":0,"index":1208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119781,"byte_end":119796,"line_start":23,"line_end":23,"column_start":9,"column_end":24},"name":"trim_whitespace","qualname":"::reader::config::ParserConfig::trim_whitespace","value":"bool","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Whether or not should whitespace in textual events be removed. Default is false.","sig":null,"attributes":[{"value":"/ Whether or not should whitespace in textual events be removed. Default is false.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119085,"byte_end":119169,"line_start":12,"line_end":12,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119174,"byte_end":119177,"line_start":13,"line_end":13,"column_start":5,"column_end":8}},{"value":"/ When true, all standalone whitespace will be removed (this means no","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119182,"byte_end":119253,"line_start":14,"line_end":14,"column_start":5,"column_end":76}},{"value":"/ `Whitespace` events will ve emitted), and leading and trailing whitespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119258,"byte_end":119335,"line_start":15,"line_end":15,"column_start":5,"column_end":82}},{"value":"/ from `Character` events will be deleted. If after trimming `Characters`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119340,"byte_end":119415,"line_start":16,"line_end":16,"column_start":5,"column_end":80}},{"value":"/ event will be empty, it will also be omitted from output stream. This is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119420,"byte_end":119496,"line_start":17,"line_end":17,"column_start":5,"column_end":81}},{"value":"/ possible, however, only if `whitespace_to_characters` or","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119501,"byte_end":119561,"line_start":18,"line_end":18,"column_start":5,"column_end":65}},{"value":"/ `cdata_to_characters` options are set.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119566,"byte_end":119608,"line_start":19,"line_end":19,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119613,"byte_end":119616,"line_start":20,"line_end":20,"column_start":5,"column_end":8}},{"value":"/ This option does not affect CDATA events, unless `cdata_to_characters`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119621,"byte_end":119695,"line_start":21,"line_end":21,"column_start":5,"column_end":79}},{"value":"/ option is also set. In that case CDATA content will also be trimmed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119700,"byte_end":119772,"line_start":22,"line_end":22,"column_start":5,"column_end":77}}]},{"kind":"Field","id":{"krate":0,"index":1209},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120146,"byte_end":120170,"line_start":31,"line_end":31,"column_start":9,"column_end":33},"name":"whitespace_to_characters","qualname":"::reader::config::ParserConfig::whitespace_to_characters","value":"bool","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Whether or not should whitespace be converted to characters.\n Default is false.","sig":null,"attributes":[{"value":"/ Whether or not should whitespace be converted to characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119809,"byte_end":119873,"line_start":25,"line_end":25,"column_start":5,"column_end":69}},{"value":"/ Default is false.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119878,"byte_end":119899,"line_start":26,"line_end":26,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119904,"byte_end":119907,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ If true, instead of `Whitespace` events `Characters` events with the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119912,"byte_end":119984,"line_start":28,"line_end":28,"column_start":5,"column_end":77}},{"value":"/ same content will be emitted. If `trim_whitespace` is also true, these","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":119989,"byte_end":120063,"line_start":29,"line_end":29,"column_start":5,"column_end":79}},{"value":"/ events will be trimmed to nothing and, consequently, not emitted.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120068,"byte_end":120137,"line_start":30,"line_end":30,"column_start":5,"column_end":74}}]},{"kind":"Field","id":{"krate":0,"index":1210},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120577,"byte_end":120596,"line_start":40,"line_end":40,"column_start":9,"column_end":28},"name":"cdata_to_characters","qualname":"::reader::config::ParserConfig::cdata_to_characters","value":"bool","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Whether or not should CDATA be converted to characters.\n Default is false.","sig":null,"attributes":[{"value":"/ Whether or not should CDATA be converted to characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120183,"byte_end":120242,"line_start":33,"line_end":33,"column_start":5,"column_end":64}},{"value":"/ Default is false.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120247,"byte_end":120268,"line_start":34,"line_end":34,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120273,"byte_end":120276,"line_start":35,"line_end":35,"column_start":5,"column_end":8}},{"value":"/ If true, instead of `CData` events `Characters` events with the same","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120281,"byte_end":120353,"line_start":36,"line_end":36,"column_start":5,"column_end":77}},{"value":"/ content will be emitted. If `trim_whitespace` is also true, these events","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120358,"byte_end":120434,"line_start":37,"line_end":37,"column_start":5,"column_end":81}},{"value":"/ will be trimmed. If corresponding CDATA contained nothing but whitespace,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120439,"byte_end":120516,"line_start":38,"line_end":38,"column_start":5,"column_end":82}},{"value":"/ this event will be omitted from the stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120521,"byte_end":120568,"line_start":39,"line_end":39,"column_start":5,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":1211},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120751,"byte_end":120766,"line_start":45,"line_end":45,"column_start":9,"column_end":24},"name":"ignore_comments","qualname":"::reader::config::ParserConfig::ignore_comments","value":"bool","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Whether or not should comments be omitted. Default is true.","sig":null,"attributes":[{"value":"/ Whether or not should comments be omitted. Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120609,"byte_end":120672,"line_start":42,"line_end":42,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120677,"byte_end":120680,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ If true, `Comment` events will not be emitted at all.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120685,"byte_end":120742,"line_start":44,"line_end":44,"column_start":5,"column_end":62}}]},{"kind":"Field","id":{"krate":0,"index":1212},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121252,"byte_end":121271,"line_start":56,"line_end":56,"column_start":9,"column_end":28},"name":"coalesce_characters","qualname":"::reader::config::ParserConfig::coalesce_characters","value":"bool","parent":{"krate":0,"index":1207},"children":[],"decl_id":null,"docs":" Whether or not should sequential `Characters` events be merged.\n Default is true.","sig":null,"attributes":[{"value":"/ Whether or not should sequential `Characters` events be merged.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120779,"byte_end":120846,"line_start":47,"line_end":47,"column_start":5,"column_end":72}},{"value":"/ Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120851,"byte_end":120871,"line_start":48,"line_end":48,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120876,"byte_end":120879,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ If true, multiple sequential `Characters` events will be merged into","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120884,"byte_end":120956,"line_start":50,"line_end":50,"column_start":5,"column_end":77}},{"value":"/ a single event, that is, their data will be concatenated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":120961,"byte_end":121022,"line_start":51,"line_end":51,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121027,"byte_end":121030,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Multiple sequential `Characters` events are only possible if either","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121035,"byte_end":121106,"line_start":53,"line_end":53,"column_start":5,"column_end":76}},{"value":"/ `cdata_to_characters` or `ignore_comments` are set. Otherwise character","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121111,"byte_end":121186,"line_start":54,"line_end":54,"column_start":5,"column_end":80}},{"value":"/ events will always be separated by other events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121191,"byte_end":121243,"line_start":55,"line_end":55,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":563},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121670,"byte_end":121673,"line_start":72,"line_end":72,"column_start":12,"column_end":15},"name":"new","qualname":"<ParserConfig>::new","value":"pub fn new() -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Returns a new config with default values.","sig":null,"attributes":[{"value":"/ Returns a new config with default values.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121305,"byte_end":121350,"line_start":60,"line_end":60,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121355,"byte_end":121358,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ You can tweak default values using builder-like pattern:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121363,"byte_end":121423,"line_start":62,"line_end":62,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121428,"byte_end":121431,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121436,"byte_end":121447,"line_start":64,"line_end":64,"column_start":5,"column_end":16}},{"value":"/ use xml::reader::ParserConfig;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121452,"byte_end":121486,"line_start":65,"line_end":65,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121491,"byte_end":121494,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ let config = ParserConfig::new()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121499,"byte_end":121535,"line_start":67,"line_end":67,"column_start":5,"column_end":41}},{"value":"/     .trim_whitespace(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121540,"byte_end":121570,"line_start":68,"line_end":68,"column_start":5,"column_end":35}},{"value":"/     .ignore_comments(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121575,"byte_end":121605,"line_start":69,"line_end":69,"column_start":5,"column_end":35}},{"value":"/     .coalesce_characters(false);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121610,"byte_end":121646,"line_start":70,"line_end":70,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121651,"byte_end":121658,"line_start":71,"line_end":71,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122566,"byte_end":122579,"line_start":101,"line_end":101,"column_start":12,"column_end":25},"name":"create_reader","qualname":"<ParserConfig>::create_reader","value":"pub fn create_reader<R: Read>(Self, R) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML reader with this configuration.","sig":null,"attributes":[{"value":"/ Creates an XML reader with this configuration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121932,"byte_end":121982,"line_start":82,"line_end":82,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121987,"byte_end":121990,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method for configuring and creating a reader at the same time:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121995,"byte_end":122083,"line_start":84,"line_end":84,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122088,"byte_end":122091,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122096,"byte_end":122107,"line_start":86,"line_end":86,"column_start":5,"column_end":16}},{"value":"/ use xml::reader::ParserConfig;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122112,"byte_end":122146,"line_start":87,"line_end":87,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122151,"byte_end":122154,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ let mut source: &[u8] = b\"...\";","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122159,"byte_end":122194,"line_start":89,"line_end":89,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122199,"byte_end":122202,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ let reader = ParserConfig::new()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122207,"byte_end":122243,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/     .trim_whitespace(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122248,"byte_end":122278,"line_start":92,"line_end":92,"column_start":5,"column_end":35}},{"value":"/     .ignore_comments(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122283,"byte_end":122313,"line_start":93,"line_end":93,"column_start":5,"column_end":35}},{"value":"/     .coalesce_characters(false)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122318,"byte_end":122353,"line_start":94,"line_end":94,"column_start":5,"column_end":40}},{"value":"/     .create_reader(&mut source);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122358,"byte_end":122394,"line_start":95,"line_end":95,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122399,"byte_end":122406,"line_start":96,"line_end":96,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122411,"byte_end":122414,"line_start":97,"line_end":97,"column_start":5,"column_end":8}},{"value":"/ This method is exactly equivalent to calling `EventReader::new_with_config()` with","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122419,"byte_end":122505,"line_start":98,"line_end":98,"column_start":5,"column_end":91}},{"value":"/ this configuration object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122510,"byte_end":122540,"line_start":99,"line_end":99,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122545,"byte_end":122554,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1225},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122837,"byte_end":122852,"line_start":114,"line_end":114,"column_start":5,"column_end":20},"name":"trim_whitespace","qualname":"<ParserConfig>::trim_whitespace","value":"pub fn trim_whitespace(Self, bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1227},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122868,"byte_end":122892,"line_start":115,"line_end":115,"column_start":5,"column_end":29},"name":"whitespace_to_characters","qualname":"<ParserConfig>::whitespace_to_characters","value":"pub fn whitespace_to_characters(Self, bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1229},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122908,"byte_end":122927,"line_start":116,"line_end":116,"column_start":5,"column_end":24},"name":"cdata_to_characters","qualname":"<ParserConfig>::cdata_to_characters","value":"pub fn cdata_to_characters(Self, bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1231},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122943,"byte_end":122958,"line_start":117,"line_end":117,"column_start":5,"column_end":20},"name":"ignore_comments","qualname":"<ParserConfig>::ignore_comments","value":"pub fn ignore_comments(Self, bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1233},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122974,"byte_end":122993,"line_start":118,"line_end":118,"column_start":5,"column_end":24},"name":"coalesce_characters","qualname":"<ParserConfig>::coalesce_characters","value":"pub fn coalesce_characters(Self, bool) -> ParserConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"StructVariant","id":{"krate":0,"index":1235},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123649,"byte_end":123662,"line_start":21,"line_end":21,"column_start":5,"column_end":18},"name":"StartDocument","qualname":"::reader::events::XmlEvent::StartDocument","value":"XmlEvent::StartDocument { version, encoding, standalone }","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Corresponds to XML document declaration.","sig":null,"attributes":[{"value":"/ Corresponds to XML document declaration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123446,"byte_end":123490,"line_start":17,"line_end":17,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123495,"byte_end":123498,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ This event is always emitted before any other event. It is emitted","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123503,"byte_end":123573,"line_start":19,"line_end":19,"column_start":5,"column_end":75}},{"value":"/ even if the actual declaration is not present in the document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123578,"byte_end":123644,"line_start":20,"line_end":20,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124620,"byte_end":124631,"line_start":46,"line_end":46,"column_start":5,"column_end":16},"name":"EndDocument","qualname":"::reader::events::XmlEvent::EndDocument","value":"XmlEvent::EndDocument","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes to the end of the document stream.","sig":null,"attributes":[{"value":"/ Denotes to the end of the document stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124381,"byte_end":124427,"line_start":42,"line_end":42,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124432,"byte_end":124435,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ This event is always emitted after any other event (except `Error`). After it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124440,"byte_end":124521,"line_start":44,"line_end":44,"column_start":5,"column_end":86}},{"value":"/ is emitted for the first time, it will always be emitted on next event pull attempts.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124526,"byte_end":124615,"line_start":45,"line_end":45,"column_start":5,"column_end":94}}]},{"kind":"StructVariant","id":{"krate":0,"index":1241},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124834,"byte_end":124855,"line_start":52,"line_end":52,"column_start":5,"column_end":26},"name":"ProcessingInstruction","qualname":"::reader::events::XmlEvent::ProcessingInstruction","value":"XmlEvent::ProcessingInstruction { name, data }","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes an XML processing instruction.","sig":null,"attributes":[{"value":"/ Denotes an XML processing instruction.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124638,"byte_end":124680,"line_start":48,"line_end":48,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124685,"byte_end":124688,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ This event contains a processing instruction target (`name`) and opaque `data`. It","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124693,"byte_end":124779,"line_start":50,"line_end":50,"column_start":5,"column_end":91}},{"value":"/ is up to the application to process them.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":124784,"byte_end":124829,"line_start":51,"line_end":51,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":1244},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125220,"byte_end":125232,"line_start":64,"line_end":64,"column_start":5,"column_end":17},"name":"StartElement","qualname":"::reader::events::XmlEvent::StartElement","value":"XmlEvent::StartElement { name, attributes, namespace }","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes a beginning of an XML element.","sig":null,"attributes":[{"value":"/ Denotes a beginning of an XML element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125009,"byte_end":125051,"line_start":60,"line_end":60,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125056,"byte_end":125059,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This event is emitted after parsing opening tags or after parsing bodiless tags. In the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125064,"byte_end":125155,"line_start":62,"line_end":62,"column_start":5,"column_end":96}},{"value":"/ latter case `EndElement` event immediately follows.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125160,"byte_end":125215,"line_start":63,"line_end":63,"column_start":5,"column_end":60}}]},{"kind":"StructVariant","id":{"krate":0,"index":1248},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125844,"byte_end":125854,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"EndElement","qualname":"::reader::events::XmlEvent::EndElement","value":"XmlEvent::EndElement { name }","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes an end of an XML element.","sig":null,"attributes":[{"value":"/ Denotes an end of an XML element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125610,"byte_end":125647,"line_start":77,"line_end":77,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125652,"byte_end":125655,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ This event is emitted after parsing closing tags or after parsing bodiless tags. In the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125660,"byte_end":125751,"line_start":79,"line_end":79,"column_start":5,"column_end":96}},{"value":"/ latter case it is emitted immediately after corresponding `StartElement` event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125756,"byte_end":125839,"line_start":80,"line_end":80,"column_start":5,"column_end":88}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1250},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126223,"byte_end":126228,"line_start":92,"line_end":92,"column_start":5,"column_end":10},"name":"CData","qualname":"::reader::events::XmlEvent::CData","value":"XmlEvent::CData(String)","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes CDATA content.","sig":null,"attributes":[{"value":"/ Denotes CDATA content.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125936,"byte_end":125962,"line_start":86,"line_end":86,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125967,"byte_end":125970,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ This event contains unparsed data. No unescaping will be performed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":125975,"byte_end":126046,"line_start":88,"line_end":88,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126051,"byte_end":126054,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ It is possible to configure a parser to emit `Characters` event instead of `CData`. See","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126059,"byte_end":126150,"line_start":90,"line_end":90,"column_start":5,"column_end":96}},{"value":"/ `pull::ParserConfiguration` structure for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126155,"byte_end":126218,"line_start":91,"line_end":91,"column_start":5,"column_end":68}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126452,"byte_end":126459,"line_start":98,"line_end":98,"column_start":5,"column_end":12},"name":"Comment","qualname":"::reader::events::XmlEvent::Comment","value":"XmlEvent::Comment(String)","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes a comment.","sig":null,"attributes":[{"value":"/ Denotes a comment.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126243,"byte_end":126265,"line_start":94,"line_end":94,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126270,"byte_end":126273,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ It is possible to configure a parser to ignore comments, so this event will never be emitted.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126278,"byte_end":126375,"line_start":96,"line_end":96,"column_start":5,"column_end":102}},{"value":"/ See `pull::ParserConfiguration` structure for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126380,"byte_end":126447,"line_start":97,"line_end":97,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1256},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126845,"byte_end":126855,"line_start":107,"line_end":107,"column_start":5,"column_end":15},"name":"Characters","qualname":"::reader::events::XmlEvent::Characters","value":"XmlEvent::Characters(String)","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes character data outside of tags.","sig":null,"attributes":[{"value":"/ Denotes character data outside of tags.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126474,"byte_end":126517,"line_start":100,"line_end":100,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126522,"byte_end":126525,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ Contents of this event will always be unescaped, so no entities like `&lt;` or `&amp;` or `&#123;`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126530,"byte_end":126632,"line_start":102,"line_end":102,"column_start":5,"column_end":107}},{"value":"/ will appear in it.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126637,"byte_end":126659,"line_start":103,"line_end":103,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126664,"byte_end":126667,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ It is possible to configure a parser to trim leading and trailing whitespace for this event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126672,"byte_end":126768,"line_start":105,"line_end":105,"column_start":5,"column_end":101}},{"value":"/ See `pull::ParserConfiguration` structure for more information.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126773,"byte_end":126840,"line_start":106,"line_end":106,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1259},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":127224,"byte_end":127234,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"Whitespace","qualname":"::reader::events::XmlEvent::Whitespace","value":"XmlEvent::Whitespace(String)","parent":{"krate":0,"index":1234},"children":[],"decl_id":null,"docs":" Denotes a chunk of whitespace outside of tags.","sig":null,"attributes":[{"value":"/ Denotes a chunk of whitespace outside of tags.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126870,"byte_end":126920,"line_start":109,"line_end":109,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126925,"byte_end":126928,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ It is possible to configure a parser to emit `Characters` event instead of `Whitespace`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":126933,"byte_end":127025,"line_start":111,"line_end":111,"column_start":5,"column_end":97}},{"value":"/ See `pull::ParserConfiguration` structure for more information. When combined with whitespace","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":127030,"byte_end":127127,"line_start":112,"line_end":112,"column_start":5,"column_end":102}},{"value":"/ trimming, it will eliminate standalone whitespace from the event stream completely.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":127132,"byte_end":127219,"line_start":113,"line_end":113,"column_start":5,"column_end":92}}]},{"kind":"Enum","id":{"krate":0,"index":1234},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123431,"byte_end":123439,"line_start":16,"line_end":16,"column_start":10,"column_end":18},"name":"XmlEvent","qualname":"::reader::events::XmlEvent","value":"pub enum XmlEvent {\n\n    /// Corresponds to XML document declaration.\n    ///\n    /// This event is always emitted before any other event. It is emitted\n    /// even if the actual declaration is not present in the document.\n    StartDocument {\n        /// XML version.\n        ///\n        /// If XML declaration is not present, defaults to `Version10`.\n        version: XmlVersion,\n        /// XML document encoding.\n        ///\n        /// If XML declaration is not present or does not contain `encoding` attribute,\n        /// defaults to `\"UTF-8\"`. This field is currently used for no other purpose than\n        /// informational.\n        encoding: String,\n        /// XML standalone declaration.\n        ///\n        /// If XML document is not present or does not contain `standalone` attribute,\n        /// defaults to `None`. This field is currently used for no other purpose than\n        /// informational.\n        standalone: Option<bool>,\n    },\n\n    /// Denotes to the end of the document stream.\n    ///\n    /// This event is always emitted after any other event (except `Error`). After it\n    /// is emitted for the first time, it will always be emitted on next event pull attempts.\n    EndDocument,\n\n    /// Denotes an XML processing instruction.\n    ///\n    /// This event contains a processing instruction target (`name`) and opaque `data`. It\n    /// is up to the application to process them.\n    ProcessingInstruction {\n        /// Processing instruction target.\n        name: String,\n        /// Processing instruction content.\n        data: Option<String>,\n    },\n\n    /// Denotes a beginning of an XML element.\n    ///\n    /// This event is emitted after parsing opening tags or after parsing bodiless tags. In the\n    /// latter case `EndElement` event immediately follows.\n    StartElement {\n        /// Qualified name of the element.\n        name: OwnedName,\n        /// A list of attributes associated with the element.\n        ///\n        /// Currently attributes are not checked for duplicates (TODO)\n        attributes: Vec<OwnedAttribute>,\n        /// Contents of the namespace mapping at this point of the document.\n        namespace: Namespace,\n    },\n\n    /// Denotes an end of an XML element.\n    ///\n    /// This event is emitted after parsing closing tags or after parsing bodiless tags. In the\n    /// latter case it is emitted immediately after corresponding `StartElement` event.\n    EndElement {\n        /// Qualified name of the element.\n        name: OwnedName,\n    },\n\n    /// Denotes CDATA content.\n    ///\n    /// This event contains unparsed data. No unescaping will be performed.\n    ///\n    /// It is possible to configure a parser to emit `Characters` event instead of `CData`. See\n    /// `pull::ParserConfiguration` structure for more information.\n    CData(String),\n\n    /// Denotes a comment.\n    ///\n    /// It is possible to configure a parser to ignore comments, so this event will never be emitted.\n    /// See `pull::ParserConfiguration` structure for more information.\n    Comment(String),\n\n    /// Denotes character data outside of tags.\n    ///\n    /// Contents of this event will always be unescaped, so no entities like `&lt;` or `&amp;` or `&#123;`\n    /// will appear in it.\n    ///\n    /// It is possible to configure a parser to trim leading and trailing whitespace for this event.\n    /// See `pull::ParserConfiguration` structure for more information.\n    Characters(String),\n\n    /// Denotes a chunk of whitespace outside of tags.\n    ///\n    /// It is possible to configure a parser to emit `Characters` event instead of `Whitespace`.\n    /// See `pull::ParserConfiguration` structure for more information. When combined with whitespace\n    /// trimming, it will eliminate standalone whitespace from the event stream completely.\n    Whitespace(String),\n}","parent":null,"children":[{"krate":0,"index":1235},{"krate":0,"index":1239},{"krate":0,"index":1241},{"krate":0,"index":1244},{"krate":0,"index":1248},{"krate":0,"index":1250},{"krate":0,"index":1253},{"krate":0,"index":1256},{"krate":0,"index":1259}],"decl_id":null,"docs":" An element of an XML input stream.","sig":null,"attributes":[{"value":"/ An element of an XML input stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123228,"byte_end":123266,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123267,"byte_end":123270,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ Items of this enum are emitted by `reader::EventReader`. They correspond to different","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123271,"byte_end":123360,"line_start":13,"line_end":13,"column_start":1,"column_end":90}},{"value":"/ elements of an XML document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":123361,"byte_end":123393,"line_start":14,"line_end":14,"column_start":1,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130338,"byte_end":130353,"line_start":191,"line_end":191,"column_start":12,"column_end":27},"name":"as_writer_event","qualname":"<XmlEvent>::as_writer_event","value":"pub fn as_writer_event<'a>(&'a Self) -> Option<::writer::events::XmlEvent>","parent":null,"children":[],"decl_id":null,"docs":" Obtains a writer event from this reader event.","sig":null,"attributes":[{"value":"/ Obtains a writer event from this reader event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":128913,"byte_end":128963,"line_start":153,"line_end":153,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":128968,"byte_end":128971,"line_start":154,"line_end":154,"column_start":5,"column_end":8}},{"value":"/ This method is useful for streaming processing of XML documents where the output","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":128976,"byte_end":129060,"line_start":155,"line_end":155,"column_start":5,"column_end":89}},{"value":"/ is also an XML document. With this method it is possible to process some events","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129065,"byte_end":129148,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ while passing other events through to the writer unchanged:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129153,"byte_end":129216,"line_start":157,"line_end":157,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129221,"byte_end":129224,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129229,"byte_end":129240,"line_start":159,"line_end":159,"column_start":5,"column_end":16}},{"value":"/ use std::str;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129245,"byte_end":129262,"line_start":160,"line_end":160,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129267,"byte_end":129270,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ use xml::{EventReader, EventWriter};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129275,"byte_end":129315,"line_start":162,"line_end":162,"column_start":5,"column_end":45}},{"value":"/ use xml::reader::XmlEvent as ReaderEvent;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129320,"byte_end":129365,"line_start":163,"line_end":163,"column_start":5,"column_end":50}},{"value":"/ use xml::writer::XmlEvent as WriterEvent;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129370,"byte_end":129415,"line_start":164,"line_end":164,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129420,"byte_end":129423,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ let mut input: &[u8] = b\"<hello>world</hello>\";","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129428,"byte_end":129479,"line_start":166,"line_end":166,"column_start":5,"column_end":56}},{"value":"/ let mut output: Vec<u8> = Vec::new();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129484,"byte_end":129525,"line_start":167,"line_end":167,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129530,"byte_end":129533,"line_start":168,"line_end":168,"column_start":5,"column_end":8}},{"value":"/ {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129538,"byte_end":129543,"line_start":169,"line_end":169,"column_start":5,"column_end":10}},{"value":"/     let mut reader = EventReader::new(&mut input);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129548,"byte_end":129602,"line_start":170,"line_end":170,"column_start":5,"column_end":59}},{"value":"/     let mut writer = EventWriter::new(&mut output);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129607,"byte_end":129662,"line_start":171,"line_end":171,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129667,"byte_end":129670,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/     for e in reader {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129675,"byte_end":129700,"line_start":173,"line_end":173,"column_start":5,"column_end":30}},{"value":"/         match e.unwrap() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129705,"byte_end":129735,"line_start":174,"line_end":174,"column_start":5,"column_end":35}},{"value":"/             ReaderEvent::Characters(s) =>","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129740,"byte_end":129785,"line_start":175,"line_end":175,"column_start":5,"column_end":50}},{"value":"/                 writer.write(WriterEvent::characters(&s.to_uppercase())).unwrap(),","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129790,"byte_end":129876,"line_start":176,"line_end":176,"column_start":5,"column_end":91}},{"value":"/             e => if let Some(e) = e.as_writer_event() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129881,"byte_end":129940,"line_start":177,"line_end":177,"column_start":5,"column_end":64}},{"value":"/                 writer.write(e).unwrap()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129945,"byte_end":129989,"line_start":178,"line_end":178,"column_start":5,"column_end":49}},{"value":"/             }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":129994,"byte_end":130011,"line_start":179,"line_end":179,"column_start":5,"column_end":22}},{"value":"/         }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130016,"byte_end":130029,"line_start":180,"line_end":180,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130034,"byte_end":130043,"line_start":181,"line_end":181,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130048,"byte_end":130053,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130058,"byte_end":130061,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130066,"byte_end":130081,"line_start":184,"line_end":184,"column_start":5,"column_end":20}},{"value":"/     str::from_utf8(&output).unwrap(),","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130086,"byte_end":130127,"line_start":185,"line_end":185,"column_start":5,"column_end":46}},{"value":"/     r#\"<?xml version=\"1.0\" encoding=\"UTF-8\"?><hello>WORLD</hello>\"#","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130132,"byte_end":130203,"line_start":186,"line_end":186,"column_start":5,"column_end":76}},{"value":"/ );","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130208,"byte_end":130214,"line_start":187,"line_end":187,"column_start":5,"column_end":11}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130219,"byte_end":130226,"line_start":188,"line_end":188,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130231,"byte_end":130234,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ Note that this API may change or get additions in future to improve its ergonomics.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":130239,"byte_end":130326,"line_start":190,"line_end":190,"column_start":5,"column_end":92}}]},{"kind":"Struct","id":{"krate":0,"index":1269},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37074,"byte_end":37079,"line_start":28,"line_end":28,"column_start":12,"column_end":17},"name":"Error","qualname":"::reader::Error","value":"Error {  }","parent":null,"children":[{"krate":0,"index":1270},{"krate":0,"index":1271}],"decl_id":null,"docs":" An XML parsing error.","sig":null,"attributes":[{"value":"/ An XML parsing error.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36906,"byte_end":36931,"line_start":24,"line_end":24,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36932,"byte_end":36935,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ Consists of a 2D position in a document and a textual message describing the error.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":36936,"byte_end":37023,"line_start":26,"line_end":26,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37527,"byte_end":37530,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"new","qualname":"<Error>::new","value":"pub fn new<O: Position, S: Into<Cow>>(&O, S) -> Error","parent":null,"children":[],"decl_id":null,"docs":" Creates a new error using position information from the provided\n `Position` object and a message.\n","sig":null,"attributes":[{"value":"/ Creates a new error using position information from the provided","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37392,"byte_end":37460,"line_start":45,"line_end":45,"column_start":5,"column_end":73}},{"value":"/ `Position` object and a message.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37465,"byte_end":37501,"line_start":46,"line_end":46,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37506,"byte_end":37515,"line_start":47,"line_end":47,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37762,"byte_end":37765,"line_start":54,"line_end":54,"column_start":12,"column_end":15},"name":"msg","qualname":"<Error>::msg","value":"pub fn msg(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a message which is contained inside this error.\n","sig":null,"attributes":[{"value":"/ Returns a reference to a message which is contained inside this error.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37662,"byte_end":37736,"line_start":52,"line_end":52,"column_start":5,"column_end":79}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37741,"byte_end":37750,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":593},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37944,"byte_end":37950,"line_start":63,"line_end":63,"column_start":10,"column_end":16},"name":"Result","qualname":"::reader::Result","value":"result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" A result type yielded by `XmlReader`.\n","sig":null,"attributes":[{"value":"/ A result type yielded by `XmlReader`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37893,"byte_end":37934,"line_start":62,"line_end":62,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":595},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38082,"byte_end":38093,"line_start":66,"line_end":66,"column_start":12,"column_end":23},"name":"EventReader","qualname":"::reader::EventReader","value":"EventReader {  }","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598}],"decl_id":null,"docs":" A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.\n","sig":null,"attributes":[{"value":"/ A wrapper around an `std::io::Read` instance which provides pull-based XML parsing.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37983,"byte_end":38070,"line_start":65,"line_end":65,"column_start":1,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38260,"byte_end":38263,"line_start":74,"line_end":74,"column_start":12,"column_end":15},"name":"new","qualname":"<EventReader<R>>::new","value":"pub fn new(R) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader, consuming the given stream.\n","sig":null,"attributes":[{"value":"/ Creates a new reader, consuming the given stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38181,"byte_end":38234,"line_start":72,"line_end":72,"column_start":5,"column_end":58}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38239,"byte_end":38248,"line_start":73,"line_end":73,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38482,"byte_end":38497,"line_start":80,"line_end":80,"column_start":12,"column_end":27},"name":"new_with_config","qualname":"<EventReader<R>>::new_with_config","value":"pub fn new_with_config(R, ParserConfig) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new reader with the provded configuration, consuming the given stream.\n","sig":null,"attributes":[{"value":"/ Creates a new reader with the provded configuration, consuming the given stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38372,"byte_end":38456,"line_start":78,"line_end":78,"column_start":5,"column_end":89}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38461,"byte_end":38470,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38868,"byte_end":38872,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"next","qualname":"<EventReader<R>>::next","value":"pub fn next(&mut Self) -> Result<XmlEvent>","parent":null,"children":[],"decl_id":null,"docs":" Pulls and returns next XML event from the stream.","sig":null,"attributes":[{"value":"/ Pulls and returns next XML event from the stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38634,"byte_end":38687,"line_start":84,"line_end":84,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38692,"byte_end":38695,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ If returned event is `XmlEvent::Error` or `XmlEvent::EndDocument`, then","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38700,"byte_end":38775,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/ further calls to this method will return this event again.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38780,"byte_end":38842,"line_start":87,"line_end":87,"column_start":5,"column_end":67}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38847,"byte_end":38856,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":612},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39637,"byte_end":39643,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"Events","qualname":"::reader::Events","value":"Events {  }","parent":null,"children":[{"krate":0,"index":614},{"krate":0,"index":615}],"decl_id":null,"docs":" An iterator over XML events created from some type implementing `Read`.","sig":null,"attributes":[{"value":"/ An iterator over XML events created from some type implementing `Read`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39378,"byte_end":39453,"line_start":111,"line_end":111,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39454,"byte_end":39457,"line_start":112,"line_end":112,"column_start":1,"column_end":4}},{"value":"/ When the next event is `xml::event::Error` or `xml::event::EndDocument`, then","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39458,"byte_end":39539,"line_start":113,"line_end":113,"column_start":1,"column_end":82}},{"value":"/ it will be returned by the iterator once, and then it will stop producing events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39540,"byte_end":39625,"line_start":114,"line_end":114,"column_start":1,"column_end":86}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39824,"byte_end":39834,"line_start":123,"line_end":123,"column_start":12,"column_end":22},"name":"into_inner","qualname":"<Events<R>>::into_inner","value":"pub fn into_inner(Self) -> EventReader<R>","parent":null,"children":[],"decl_id":null,"docs":" Unwraps the iterator, returning the internal `EventReader`.\n","sig":null,"attributes":[{"value":"/ Unwraps the iterator, returning the internal `EventReader`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39735,"byte_end":39798,"line_start":121,"line_end":121,"column_start":5,"column_end":68}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39803,"byte_end":39812,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":625},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":40431,"byte_end":40439,"line_start":148,"line_end":148,"column_start":12,"column_end":20},"name":"from_str","qualname":"<EventReader<&'r [u8]>>::from_str","value":"pub fn from_str(&'r str) -> EventReader<&'r [u8]>","parent":null,"children":[],"decl_id":null,"docs":" A convenience method to create an `XmlReader` from a string slice.\n","sig":null,"attributes":[{"value":"/ A convenience method to create an `XmlReader` from a string slice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":40335,"byte_end":40405,"line_start":146,"line_end":146,"column_start":5,"column_end":75}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":40410,"byte_end":40419,"line_start":147,"line_end":147,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":626},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"writer","qualname":"::writer","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","parent":null,"children":[{"krate":0,"index":627},{"krate":0,"index":628},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":631},{"krate":0,"index":632},{"krate":0,"index":633},{"krate":0,"index":721},{"krate":0,"index":731},{"krate":0,"index":802},{"krate":0,"index":806}],"decl_id":null,"docs":" Contains high-level interface for an events-based XML emitter.","sig":null,"attributes":[{"value":"/ Contains high-level interface for an events-based XML emitter.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":131876,"byte_end":131942,"line_start":1,"line_end":1,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":131943,"byte_end":131946,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The most important type in this module is `EventWriter` which allows writing an XML document","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":131947,"byte_end":132043,"line_start":3,"line_end":3,"column_start":1,"column_end":97}},{"value":"/ to some output stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132044,"byte_end":132070,"line_start":4,"line_end":4,"column_start":1,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1284},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135390,"byte_end":135392,"line_start":20,"line_end":20,"column_start":5,"column_end":7},"name":"Io","qualname":"::writer::emitter::EmitterError::Io","value":"EmitterError::Io(io::Error)","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" An I/O error occured in the underlying `Write` instance.\n","sig":null,"attributes":[{"value":"/ An I/O error occured in the underlying `Write` instance.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135325,"byte_end":135385,"line_start":19,"line_end":19,"column_start":5,"column_end":65}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135486,"byte_end":135513,"line_start":23,"line_end":23,"column_start":5,"column_end":32},"name":"DocumentStartAlreadyEmitted","qualname":"::writer::emitter::EmitterError::DocumentStartAlreadyEmitted","value":"EmitterError::DocumentStartAlreadyEmitted","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" Document declaration has already been written to the output stream.\n","sig":null,"attributes":[{"value":"/ Document declaration has already been written to the output stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135410,"byte_end":135481,"line_start":22,"line_end":22,"column_start":5,"column_end":76}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1289},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135583,"byte_end":135610,"line_start":26,"line_end":26,"column_start":5,"column_end":32},"name":"LastElementNameNotAvailable","qualname":"::writer::emitter::EmitterError::LastElementNameNotAvailable","value":"EmitterError::LastElementNameNotAvailable","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" The name of the last opening element is not available.\n","sig":null,"attributes":[{"value":"/ The name of the last opening element is not available.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135520,"byte_end":135578,"line_start":25,"line_end":25,"column_start":5,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1291},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135728,"byte_end":135774,"line_start":30,"line_end":30,"column_start":5,"column_end":51},"name":"EndElementNameIsNotEqualToLastStartElementName","qualname":"::writer::emitter::EmitterError::EndElementNameIsNotEqualToLastStartElementName","value":"EmitterError::EndElementNameIsNotEqualToLastStartElementName","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" The name of the last opening element is not equal to the name of the provided\n closing element.\n","sig":null,"attributes":[{"value":"/ The name of the last opening element is not equal to the name of the provided","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135617,"byte_end":135698,"line_start":28,"line_end":28,"column_start":5,"column_end":86}},{"value":"/ closing element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135703,"byte_end":135723,"line_start":29,"line_end":29,"column_start":5,"column_end":25}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135919,"byte_end":135947,"line_start":34,"line_end":34,"column_start":5,"column_end":33},"name":"EndElementNameIsNotSpecified","qualname":"::writer::emitter::EmitterError::EndElementNameIsNotSpecified","value":"EmitterError::EndElementNameIsNotSpecified","parent":{"krate":0,"index":1283},"children":[],"decl_id":null,"docs":" End element name is not specified when it is needed, for example, when automatic\n closing is not enabled in configuration.\n","sig":null,"attributes":[{"value":"/ End element name is not specified when it is needed, for example, when automatic","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135781,"byte_end":135865,"line_start":32,"line_end":32,"column_start":5,"column_end":89}},{"value":"/ closing is not enabled in configuration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135870,"byte_end":135914,"line_start":33,"line_end":33,"column_start":5,"column_end":49}}]},{"kind":"Enum","id":{"krate":0,"index":1283},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135306,"byte_end":135318,"line_start":18,"line_end":18,"column_start":10,"column_end":22},"name":"EmitterError","qualname":"::writer::emitter::EmitterError","value":"pub enum EmitterError {\n\n    /// An I/O error occured in the underlying `Write` instance.\n    Io(io::Error),\n\n    /// Document declaration has already been written to the output stream.\n    DocumentStartAlreadyEmitted,\n\n    /// The name of the last opening element is not available.\n    LastElementNameNotAvailable,\n\n    /// The name of the last opening element is not equal to the name of the provided\n    /// closing element.\n    EndElementNameIsNotEqualToLastStartElementName,\n\n    /// End element name is not specified when it is needed, for example, when automatic\n    /// closing is not enabled in configuration.\n    EndElementNameIsNotSpecified,\n}","parent":null,"children":[{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1289},{"krate":0,"index":1291},{"krate":0,"index":1293}],"decl_id":null,"docs":" An error which may be returned by `XmlWriter` when writing XML events.\n","sig":null,"attributes":[{"value":"/ An error which may be returned by `XmlWriter` when writing XML events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135205,"byte_end":135279,"line_start":16,"line_end":16,"column_start":1,"column_end":75}}]},{"kind":"Type","id":{"krate":0,"index":659},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":136955,"byte_end":136961,"line_start":62,"line_end":62,"column_start":10,"column_end":16},"name":"Result","qualname":"::writer::emitter::Result","value":"result::Result<T, EmitterError>","parent":null,"children":[],"decl_id":null,"docs":" A result type yielded by `XmlWriter`.\n","sig":null,"attributes":[{"value":"/ A result type yielded by `XmlWriter`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":136904,"byte_end":136945,"line_start":61,"line_end":61,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1366},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149449,"byte_end":149462,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"EmitterConfig","qualname":"::writer::config::EmitterConfig","value":"EmitterConfig { line_separator, indent_string, perform_indent, perform_escaping, write_document_declaration, normalize_empty_elements, cdata_to_characters, keep_element_names_stack, autopad_comments }","parent":null,"children":[{"krate":0,"index":1367},{"krate":0,"index":1368},{"krate":0,"index":1369},{"krate":0,"index":1370},{"krate":0,"index":1371},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375}],"decl_id":null,"docs":" Emitter configuration structure.","sig":null,"attributes":[{"value":"/ Emitter configuration structure.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149269,"byte_end":149305,"line_start":8,"line_end":8,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149306,"byte_end":149309,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ This structure contains various options which control XML document emitter behavior.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149310,"byte_end":149398,"line_start":10,"line_end":10,"column_start":1,"column_end":89}}]},{"kind":"Field","id":{"krate":0,"index":1367},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149559,"byte_end":149573,"line_start":14,"line_end":14,"column_start":9,"column_end":23},"name":"line_separator","qualname":"::writer::config::EmitterConfig::line_separator","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Line separator used to separate lines in formatted output. Default is `\"\\n\"`.\n","sig":null,"attributes":[{"value":"/ Line separator used to separate lines in formatted output. Default is `\"\\n\"`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149469,"byte_end":149550,"line_start":13,"line_end":13,"column_start":5,"column_end":86}}]},{"kind":"Field","id":{"krate":0,"index":1368},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149714,"byte_end":149727,"line_start":18,"line_end":18,"column_start":9,"column_end":22},"name":"indent_string","qualname":"::writer::config::EmitterConfig::indent_string","value":"std::borrow::Cow<'static, str>","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" A string which will be used for a single level of indentation. Default is `\"  \"`\n (two spaces).\n","sig":null,"attributes":[{"value":"/ A string which will be used for a single level of indentation. Default is `\"  \"`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149599,"byte_end":149683,"line_start":16,"line_end":16,"column_start":5,"column_end":89}},{"value":"/ (two spaces).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149688,"byte_end":149705,"line_start":17,"line_end":17,"column_start":5,"column_end":22}}]},{"kind":"Field","id":{"krate":0,"index":1369},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150325,"byte_end":150339,"line_start":29,"line_end":29,"column_start":9,"column_end":23},"name":"perform_indent","qualname":"::writer::config::EmitterConfig::perform_indent","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not the emitted document should be indented. Default is false.","sig":null,"attributes":[{"value":"/ Whether or not the emitted document should be indented. Default is false.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149753,"byte_end":149830,"line_start":20,"line_end":20,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149835,"byte_end":149838,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ The emitter is capable to perform automatic indentation of the emitted XML document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149843,"byte_end":149931,"line_start":22,"line_end":22,"column_start":5,"column_end":93}},{"value":"/ It is done in stream-like fashion and does not require the knowledge of the whole","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":149936,"byte_end":150021,"line_start":23,"line_end":23,"column_start":5,"column_end":90}},{"value":"/ document in advance.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150026,"byte_end":150050,"line_start":24,"line_end":24,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150055,"byte_end":150058,"line_start":25,"line_end":25,"column_start":5,"column_end":8}},{"value":"/ Sometimes, however, automatic indentation is undesirable, e.g. when you want to keep","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150063,"byte_end":150151,"line_start":26,"line_end":26,"column_start":5,"column_end":93}},{"value":"/ existing layout when processing an existing XML document. Also the indentiation algorithm","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150156,"byte_end":150249,"line_start":27,"line_end":27,"column_start":5,"column_end":98}},{"value":"/ is not thoroughly tested. Hence by default it is disabled.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150254,"byte_end":150316,"line_start":28,"line_end":28,"column_start":5,"column_end":67}}]},{"kind":"Field","id":{"krate":0,"index":1370},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150928,"byte_end":150944,"line_start":40,"line_end":40,"column_start":9,"column_end":25},"name":"perform_escaping","qualname":"::writer::config::EmitterConfig::perform_escaping","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not characters in output events will be escaped. Default is true.","sig":null,"attributes":[{"value":"/ Whether or not characters in output events will be escaped. Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150352,"byte_end":150432,"line_start":31,"line_end":31,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150437,"byte_end":150440,"line_start":32,"line_end":32,"column_start":5,"column_end":8}},{"value":"/ The emitter can automatically escape characters which can't appear in PCDATA sections","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150445,"byte_end":150534,"line_start":33,"line_end":33,"column_start":5,"column_end":94}},{"value":"/ or element attributes of an XML document, like `<` or `\"` (in attributes). This may","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150539,"byte_end":150626,"line_start":34,"line_end":34,"column_start":5,"column_end":92}},{"value":"/ introduce some overhead because then every corresponding piece of character data","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150631,"byte_end":150715,"line_start":35,"line_end":35,"column_start":5,"column_end":89}},{"value":"/ should be scanned for invalid characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150720,"byte_end":150765,"line_start":36,"line_end":36,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150770,"byte_end":150773,"line_start":37,"line_end":37,"column_start":5,"column_end":8}},{"value":"/ If this option is disabled, the XML writer may produce non-well-formed documents, so","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150778,"byte_end":150866,"line_start":38,"line_end":38,"column_start":5,"column_end":93}},{"value":"/ use `false` value for this option with care.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150871,"byte_end":150919,"line_start":39,"line_end":39,"column_start":5,"column_end":53}}]},{"kind":"Field","id":{"krate":0,"index":1371},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151264,"byte_end":151290,"line_start":47,"line_end":47,"column_start":9,"column_end":35},"name":"write_document_declaration","qualname":"::writer::config::EmitterConfig::write_document_declaration","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not to write XML document declaration at the beginning of a document.\n Default is true.","sig":null,"attributes":[{"value":"/ Whether or not to write XML document declaration at the beginning of a document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":150957,"byte_end":151041,"line_start":42,"line_end":42,"column_start":5,"column_end":89}},{"value":"/ Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151046,"byte_end":151066,"line_start":43,"line_end":43,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151071,"byte_end":151074,"line_start":44,"line_end":44,"column_start":5,"column_end":8}},{"value":"/ This option controls whether the document declaration should be emitted automatically","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151079,"byte_end":151168,"line_start":45,"line_end":45,"column_start":5,"column_end":94}},{"value":"/ before a root element is written if it was not emitted explicitly by the user.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151173,"byte_end":151255,"line_start":46,"line_end":46,"column_start":5,"column_end":87}}]},{"kind":"Field","id":{"krate":0,"index":1372},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151545,"byte_end":151569,"line_start":53,"line_end":53,"column_start":9,"column_end":33},"name":"normalize_empty_elements","qualname":"::writer::config::EmitterConfig::normalize_empty_elements","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not to convert elements with empty content to empty elements. Default is true.","sig":null,"attributes":[{"value":"/ Whether or not to convert elements with empty content to empty elements. Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151303,"byte_end":151396,"line_start":49,"line_end":49,"column_start":5,"column_end":98}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151401,"byte_end":151404,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ This option allows turning elements like `<a></a>` (an element with empty content)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151409,"byte_end":151495,"line_start":51,"line_end":51,"column_start":5,"column_end":91}},{"value":"/ into `<a />` (an empty element).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151500,"byte_end":151536,"line_start":52,"line_end":52,"column_start":5,"column_end":41}}]},{"kind":"Field","id":{"krate":0,"index":1373},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151945,"byte_end":151964,"line_start":60,"line_end":60,"column_start":9,"column_end":28},"name":"cdata_to_characters","qualname":"::writer::config::EmitterConfig::cdata_to_characters","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not to emit CDATA events as plain characters. Default is false.","sig":null,"attributes":[{"value":"/ Whether or not to emit CDATA events as plain characters. Default is false.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151582,"byte_end":151660,"line_start":55,"line_end":55,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151665,"byte_end":151668,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ This option forces the emitter to convert CDATA events into regular character events,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151673,"byte_end":151762,"line_start":57,"line_end":57,"column_start":5,"column_end":94}},{"value":"/ performing all the necessary escaping beforehand. This may be occasionally useful","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151767,"byte_end":151852,"line_start":58,"line_end":58,"column_start":5,"column_end":90}},{"value":"/ for feeding the document into incorrect parsers which do not support CDATA.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151857,"byte_end":151936,"line_start":59,"line_end":59,"column_start":5,"column_end":84}}]},{"kind":"Field","id":{"krate":0,"index":1374},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152301,"byte_end":152325,"line_start":67,"line_end":67,"column_start":9,"column_end":33},"name":"keep_element_names_stack","qualname":"::writer::config::EmitterConfig::keep_element_names_stack","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not to keep element names to support `EndElement` events without explicit names.\n Default is true.","sig":null,"attributes":[{"value":"/ Whether or not to keep element names to support `EndElement` events without explicit names.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":151977,"byte_end":152072,"line_start":62,"line_end":62,"column_start":5,"column_end":100}},{"value":"/ Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152077,"byte_end":152097,"line_start":63,"line_end":63,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152102,"byte_end":152105,"line_start":64,"line_end":64,"column_start":5,"column_end":8}},{"value":"/ This option makes the emitter to keep names of written elements in order to allow","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152110,"byte_end":152195,"line_start":65,"line_end":65,"column_start":5,"column_end":90}},{"value":"/ omitting names when writing closing element tags. This could incur some memory overhead.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152200,"byte_end":152292,"line_start":66,"line_end":66,"column_start":5,"column_end":97}}]},{"kind":"Field","id":{"krate":0,"index":1375},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152702,"byte_end":152718,"line_start":75,"line_end":75,"column_start":9,"column_end":25},"name":"autopad_comments","qualname":"::writer::config::EmitterConfig::autopad_comments","value":"bool","parent":{"krate":0,"index":1366},"children":[],"decl_id":null,"docs":" Whether or not to automatically insert leading and trailing spaces in emitted comments,\n if necessary. Default is true.","sig":null,"attributes":[{"value":"/ Whether or not to automatically insert leading and trailing spaces in emitted comments,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152338,"byte_end":152429,"line_start":69,"line_end":69,"column_start":5,"column_end":96}},{"value":"/ if necessary. Default is true.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152434,"byte_end":152468,"line_start":70,"line_end":70,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152473,"byte_end":152476,"line_start":71,"line_end":71,"column_start":5,"column_end":8}},{"value":"/ This is a convenience option in order for the user not to append spaces before and after","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152481,"byte_end":152573,"line_start":72,"line_end":72,"column_start":5,"column_end":97}},{"value":"/ comments text in order to get more pretty comments: `<!-- something -->` instead of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152578,"byte_end":152665,"line_start":73,"line_end":73,"column_start":5,"column_end":92}},{"value":"/ `<!--something-->`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152670,"byte_end":152693,"line_start":74,"line_end":74,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153152,"byte_end":153155,"line_start":92,"line_end":92,"column_start":12,"column_end":15},"name":"new","qualname":"<EmitterConfig>::new","value":"pub fn new() -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Creates an emitter configuration with default values.","sig":null,"attributes":[{"value":"/ Creates an emitter configuration with default values.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152754,"byte_end":152811,"line_start":79,"line_end":79,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152816,"byte_end":152819,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ You can tweak default options with builder-like pattern:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152824,"byte_end":152884,"line_start":81,"line_end":81,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152889,"byte_end":152892,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152897,"byte_end":152908,"line_start":83,"line_end":83,"column_start":5,"column_end":16}},{"value":"/ use xml::writer::EmitterConfig;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152913,"byte_end":152948,"line_start":84,"line_end":84,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152953,"byte_end":152956,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ let config = EmitterConfig::new()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152961,"byte_end":152998,"line_start":86,"line_end":86,"column_start":5,"column_end":42}},{"value":"/     .line_separator(\"\\r\\n\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153003,"byte_end":153034,"line_start":87,"line_end":87,"column_start":5,"column_end":36}},{"value":"/     .perform_indent(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153039,"byte_end":153068,"line_start":88,"line_end":88,"column_start":5,"column_end":34}},{"value":"/     .normalize_empty_elements(false);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153073,"byte_end":153114,"line_start":89,"line_end":89,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153119,"byte_end":153126,"line_start":90,"line_end":90,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153131,"byte_end":153140,"line_start":91,"line_end":91,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":727},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154245,"byte_end":154258,"line_start":125,"line_end":125,"column_start":12,"column_end":25},"name":"create_writer","qualname":"<EmitterConfig>::create_writer","value":"pub fn create_writer<W: Write>(Self, W) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates an XML writer with this configuration.","sig":null,"attributes":[{"value":"/ Creates an XML writer with this configuration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153598,"byte_end":153648,"line_start":106,"line_end":106,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153653,"byte_end":153656,"line_start":107,"line_end":107,"column_start":5,"column_end":8}},{"value":"/ This is a convenience method for configuring and creating a writer at the same time:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153661,"byte_end":153749,"line_start":108,"line_end":108,"column_start":5,"column_end":93}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153754,"byte_end":153757,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153762,"byte_end":153773,"line_start":110,"line_end":110,"column_start":5,"column_end":16}},{"value":"/ use xml::writer::EmitterConfig;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153778,"byte_end":153813,"line_start":111,"line_end":111,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153818,"byte_end":153821,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ let mut target: Vec<u8> = Vec::new();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153826,"byte_end":153867,"line_start":113,"line_end":113,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153872,"byte_end":153875,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ let writer = EmitterConfig::new()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153880,"byte_end":153917,"line_start":115,"line_end":115,"column_start":5,"column_end":42}},{"value":"/     .line_separator(\"\\r\\n\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153922,"byte_end":153953,"line_start":116,"line_end":116,"column_start":5,"column_end":36}},{"value":"/     .perform_indent(true)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153958,"byte_end":153987,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/     .normalize_empty_elements(false)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":153992,"byte_end":154032,"line_start":118,"line_end":118,"column_start":5,"column_end":45}},{"value":"/     .create_writer(&mut target);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154037,"byte_end":154073,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154078,"byte_end":154085,"line_start":120,"line_end":120,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154090,"byte_end":154093,"line_start":121,"line_end":121,"column_start":5,"column_end":8}},{"value":"/ This method is exactly equivalent to calling `EventWriter::new_with_config()` with","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154098,"byte_end":154184,"line_start":122,"line_end":122,"column_start":5,"column_end":91}},{"value":"/ this configuration object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154189,"byte_end":154219,"line_start":123,"line_end":123,"column_start":5,"column_end":35}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154224,"byte_end":154233,"line_start":124,"line_end":124,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1388},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154515,"byte_end":154529,"line_start":138,"line_end":138,"column_start":5,"column_end":19},"name":"line_separator","qualname":"<EmitterConfig>::line_separator","value":"pub fn line_separator<T: Into<Cow>>(Self, T) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":658,"byte_end":733,"line_start":8,"line_end":8,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1391},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154559,"byte_end":154572,"line_start":139,"line_end":139,"column_start":5,"column_end":18},"name":"indent_string","qualname":"<EmitterConfig>::indent_string","value":"pub fn indent_string<T: Into<Cow>>(Self, T) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":658,"byte_end":733,"line_start":8,"line_end":8,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1394},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154602,"byte_end":154616,"line_start":140,"line_end":140,"column_start":5,"column_end":19},"name":"perform_indent","qualname":"<EmitterConfig>::perform_indent","value":"pub fn perform_indent(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154632,"byte_end":154658,"line_start":141,"line_end":141,"column_start":5,"column_end":31},"name":"write_document_declaration","qualname":"<EmitterConfig>::write_document_declaration","value":"pub fn write_document_declaration(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154674,"byte_end":154698,"line_start":142,"line_end":142,"column_start":5,"column_end":29},"name":"normalize_empty_elements","qualname":"<EmitterConfig>::normalize_empty_elements","value":"pub fn normalize_empty_elements(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154714,"byte_end":154733,"line_start":143,"line_end":143,"column_start":5,"column_end":24},"name":"cdata_to_characters","qualname":"<EmitterConfig>::cdata_to_characters","value":"pub fn cdata_to_characters(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154749,"byte_end":154773,"line_start":144,"line_end":144,"column_start":5,"column_end":29},"name":"keep_element_names_stack","qualname":"<EmitterConfig>::keep_element_names_stack","value":"pub fn keep_element_names_stack(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Method","id":{"krate":0,"index":1404},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154789,"byte_end":154805,"line_start":145,"line_end":145,"column_start":5,"column_end":21},"name":"autopad_comments","qualname":"<EmitterConfig>::autopad_comments","value":"pub fn autopad_comments(Self, bool) -> EmitterConfig","parent":null,"children":[],"decl_id":null,"docs":" Sets the field to the provided value and returns updated config object.\n","sig":null,"attributes":[{"value":"/ Sets the field to the provided value and returns updated config object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/macros.rs","byte_start":985,"byte_end":1060,"line_start":17,"line_end":17,"column_start":13,"column_end":88}}]},{"kind":"Mod","id":{"krate":0,"index":731},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"events","qualname":"::writer::events","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","parent":null,"children":[{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":737},{"krate":0,"index":1772},{"krate":0,"index":738},{"krate":0,"index":739},{"krate":0,"index":763},{"krate":0,"index":772},{"krate":0,"index":775},{"krate":0,"index":778},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":790},{"krate":0,"index":799}],"decl_id":null,"docs":" Contains `XmlEvent` datatype, instances of which are consumed by the writer.\n","sig":null,"attributes":[{"value":"/ Contains `XmlEvent` datatype, instances of which are consumed by the writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":154820,"byte_end":154900,"line_start":1,"line_end":1,"column_start":1,"column_end":81}}]},{"kind":"StructVariant","id":{"krate":0,"index":741},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155525,"byte_end":155538,"line_start":20,"line_end":20,"column_start":5,"column_end":18},"name":"StartDocument","qualname":"::writer::events::XmlEvent::StartDocument","value":"XmlEvent::StartDocument { version, encoding, standalone }","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Corresponds to XML document declaration.","sig":null,"attributes":[{"value":"/ Corresponds to XML document declaration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155217,"byte_end":155261,"line_start":15,"line_end":15,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155266,"byte_end":155269,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ This event should always be written before any other event. If it is not written","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155274,"byte_end":155358,"line_start":17,"line_end":17,"column_start":5,"column_end":89}},{"value":"/ at all, a default XML declaration will be outputted if the corresponding option","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155363,"byte_end":155446,"line_start":18,"line_end":18,"column_start":5,"column_end":88}},{"value":"/ is set in the configuration. Otherwise an error will be returned.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155451,"byte_end":155520,"line_start":19,"line_end":19,"column_start":5,"column_end":74}}]},{"kind":"StructVariant","id":{"krate":0,"index":745},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155957,"byte_end":155978,"line_start":38,"line_end":38,"column_start":5,"column_end":26},"name":"ProcessingInstruction","qualname":"::writer::events::XmlEvent::ProcessingInstruction","value":"XmlEvent::ProcessingInstruction { name, data }","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes an XML processing instruction.\n","sig":null,"attributes":[{"value":"/ Denotes an XML processing instruction.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155910,"byte_end":155952,"line_start":37,"line_end":37,"column_start":5,"column_end":47}}]},{"kind":"StructVariant","id":{"krate":0,"index":748},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":156181,"byte_end":156193,"line_start":47,"line_end":47,"column_start":5,"column_end":17},"name":"StartElement","qualname":"::writer::events::XmlEvent::StartElement","value":"XmlEvent::StartElement { name, attributes, namespace }","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes a beginning of an XML element.\n","sig":null,"attributes":[{"value":"/ Denotes a beginning of an XML element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":156134,"byte_end":156176,"line_start":46,"line_end":46,"column_start":5,"column_end":47}}]},{"kind":"StructVariant","id":{"krate":0,"index":752},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157032,"byte_end":157042,"line_start":67,"line_end":67,"column_start":5,"column_end":15},"name":"EndElement","qualname":"::writer::events::XmlEvent::EndElement","value":"XmlEvent::EndElement { name }","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes an end of an XML element.\n","sig":null,"attributes":[{"value":"/ Denotes an end of an XML element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":156990,"byte_end":157027,"line_start":66,"line_end":66,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":754},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157528,"byte_end":157533,"line_start":80,"line_end":80,"column_start":5,"column_end":10},"name":"CData","qualname":"::writer::events::XmlEvent::CData","value":"XmlEvent::CData(&'a str)","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes CDATA content.","sig":null,"attributes":[{"value":"/ Denotes CDATA content.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157366,"byte_end":157392,"line_start":76,"line_end":76,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157397,"byte_end":157400,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ This event contains unparsed data, and no escaping will be performed when writing it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157405,"byte_end":157493,"line_start":78,"line_end":78,"column_start":5,"column_end":93}},{"value":"/ to the output stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157498,"byte_end":157523,"line_start":79,"line_end":79,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":757},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157699,"byte_end":157706,"line_start":86,"line_end":86,"column_start":5,"column_end":12},"name":"Comment","qualname":"::writer::events::XmlEvent::Comment","value":"XmlEvent::Comment(&'a str)","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes a comment.","sig":null,"attributes":[{"value":"/ Denotes a comment.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157549,"byte_end":157571,"line_start":82,"line_end":82,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157576,"byte_end":157579,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ The string will be checked for invalid sequences and error will be returned by the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157584,"byte_end":157670,"line_start":84,"line_end":84,"column_start":5,"column_end":91}},{"value":"/ write operation","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157675,"byte_end":157694,"line_start":85,"line_end":85,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":760},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157953,"byte_end":157963,"line_start":92,"line_end":92,"column_start":5,"column_end":15},"name":"Characters","qualname":"::writer::events::XmlEvent::Characters","value":"XmlEvent::Characters(&'a str)","parent":{"krate":0,"index":739},"children":[],"decl_id":null,"docs":" Denotes character data outside of tags.","sig":null,"attributes":[{"value":"/ Denotes character data outside of tags.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157722,"byte_end":157765,"line_start":88,"line_end":88,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157770,"byte_end":157773,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ Contents of this event will be escaped if `perform_escaping` option is enabled,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157778,"byte_end":157861,"line_start":90,"line_end":90,"column_start":5,"column_end":88}},{"value":"/ that is, every character invalid for PCDATA will appear as a character entity.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157866,"byte_end":157948,"line_start":91,"line_end":91,"column_start":5,"column_end":87}}]},{"kind":"Enum","id":{"krate":0,"index":739},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155198,"byte_end":155206,"line_start":14,"line_end":14,"column_start":10,"column_end":18},"name":"XmlEvent","qualname":"::writer::events::XmlEvent","value":"pub enum XmlEvent<'a> {\n\n    /// Corresponds to XML document declaration.\n    ///\n    /// This event should always be written before any other event. If it is not written\n    /// at all, a default XML declaration will be outputted if the corresponding option\n    /// is set in the configuration. Otherwise an error will be returned.\n    StartDocument {\n        /// XML version.\n        ///\n        /// Defaults to `XmlVersion::Version10`.\n        version: XmlVersion,\n        /// XML document encoding.\n        ///\n        /// Defaults to `Some(\"UTF-8\")`.\n        encoding: Option<&'a str>,\n        /// XML standalone declaration.\n        ///\n        /// Defaults to `None`.\n        standalone: Option<bool>,\n    },\n\n    /// Denotes an XML processing instruction.\n    ProcessingInstruction {\n        /// Processing instruction target.\n        name: &'a str,\n        /// Processing instruction content.\n        data: Option<&'a str>,\n    },\n\n    /// Denotes a beginning of an XML element.\n    StartElement {\n        /// Qualified name of the element.\n        name: Name,\n        /// A list of attributes associated with the element.\n        ///\n        /// Currently attributes are not checked for duplicates (TODO). Attribute values\n        /// will be escaped, and all characters invalid for attribute values like `\"` or `<`\n        /// will be changed into character entities.\n        attributes: Cow,\n        /// Contents of the namespace mapping at this point of the document.\n        ///\n        /// This mapping will be inspected for \"new\" entries, and if at this point of the document\n        /// a particular pair of prefix and namespace URI is already defined, no namespace\n        /// attributes will be emitted.\n        namespace: Cow,\n    },\n\n    /// Denotes an end of an XML element.\n    EndElement {\n        /// Optional qualified name of the element.\n        ///\n        /// If `None`, then it is assumed that the element name should be the last valid one.\n        /// If `Some` and element names tracking is enabled, then the writer will check it for\n        /// correctness.\n        name: Option<Name>,\n    },\n\n    /// Denotes CDATA content.\n    ///\n    /// This event contains unparsed data, and no escaping will be performed when writing it\n    /// to the output stream.\n    CData(&'a str),\n\n    /// Denotes a comment.\n    ///\n    /// The string will be checked for invalid sequences and error will be returned by the\n    /// write operation\n    Comment(&'a str),\n\n    /// Denotes character data outside of tags.\n    ///\n    /// Contents of this event will be escaped if `perform_escaping` option is enabled,\n    /// that is, every character invalid for PCDATA will appear as a character entity.\n    Characters(&'a str),\n}","parent":null,"children":[{"krate":0,"index":741},{"krate":0,"index":745},{"krate":0,"index":748},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":757},{"krate":0,"index":760}],"decl_id":null,"docs":" A part of an XML output stream.","sig":null,"attributes":[{"value":"/ A part of an XML output stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155034,"byte_end":155069,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155070,"byte_end":155073,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ Objects of this enum are consumed by `EventWriter`. They correspond to different parts of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155074,"byte_end":155167,"line_start":12,"line_end":12,"column_start":1,"column_end":94}},{"value":"/ an XML document.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":155168,"byte_end":155188,"line_start":13,"line_end":13,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":765},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158087,"byte_end":158109,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"processing_instruction","qualname":"<XmlEvent>::processing_instruction","value":"pub fn processing_instruction(&'a str, Option<&'a str>) -> XmlEvent","parent":null,"children":[],"decl_id":null,"docs":" Returns an writer event for a processing instruction.\n","sig":null,"attributes":[{"value":"/ Returns an writer event for a processing instruction.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158004,"byte_end":158061,"line_start":96,"line_end":96,"column_start":5,"column_end":62}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158066,"byte_end":158075,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158429,"byte_end":158442,"line_start":107,"line_end":107,"column_start":12,"column_end":25},"name":"start_element","qualname":"<XmlEvent>::start_element","value":"pub fn start_element<S>(S) -> StartElementBuilder where S: Into<Name>","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder for a starting element.","sig":null,"attributes":[{"value":"/ Returns a builder for a starting element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158244,"byte_end":158289,"line_start":102,"line_end":102,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158294,"byte_end":158297,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ This builder can then be used to tweak attributes and namespace starting at","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158302,"byte_end":158381,"line_start":104,"line_end":104,"column_start":5,"column_end":84}},{"value":"/ this element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158386,"byte_end":158403,"line_start":105,"line_end":105,"column_start":5,"column_end":22}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158408,"byte_end":158417,"line_start":106,"line_end":106,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159027,"byte_end":159038,"line_start":121,"line_end":121,"column_start":12,"column_end":23},"name":"end_element","qualname":"<XmlEvent>::end_element","value":"pub fn end_element() -> EndElementBuilder","parent":null,"children":[],"decl_id":null,"docs":" Returns a builder for an closing element.","sig":null,"attributes":[{"value":"/ Returns a builder for an closing element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158675,"byte_end":158720,"line_start":115,"line_end":115,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158725,"byte_end":158728,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ This method, unline `start_element()`, does not accept a name because by default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158733,"byte_end":158817,"line_start":117,"line_end":117,"column_start":5,"column_end":89}},{"value":"/ the writer is able to determine it automatically. However, when this functionality","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158822,"byte_end":158908,"line_start":118,"line_end":118,"column_start":5,"column_end":91}},{"value":"/ is disabled, it is possible to specify the name with `name()` method on the builder.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":158913,"byte_end":159001,"line_start":119,"line_end":119,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159006,"byte_end":159015,"line_start":120,"line_end":120,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159316,"byte_end":159321,"line_start":130,"line_end":130,"column_start":12,"column_end":17},"name":"cdata","qualname":"<XmlEvent>::cdata","value":"pub fn cdata(&'a str) -> XmlEvent","parent":null,"children":[],"decl_id":null,"docs":" Returns a CDATA event.","sig":null,"attributes":[{"value":"/ Returns a CDATA event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159120,"byte_end":159146,"line_start":125,"line_end":125,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159151,"byte_end":159154,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ Naturally, the provided string won't be escaped, except for closing CDATA token `]]>`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159159,"byte_end":159248,"line_start":127,"line_end":127,"column_start":5,"column_end":94}},{"value":"/ (depending on the configuration).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159253,"byte_end":159290,"line_start":128,"line_end":128,"column_start":5,"column_end":42}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159295,"byte_end":159304,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159556,"byte_end":159566,"line_start":136,"line_end":136,"column_start":12,"column_end":22},"name":"characters","qualname":"<XmlEvent>::characters","value":"pub fn characters(&'a str) -> XmlEvent","parent":null,"children":[],"decl_id":null,"docs":" Returns a regular characters (PCDATA) event.","sig":null,"attributes":[{"value":"/ Returns a regular characters (PCDATA) event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159384,"byte_end":159432,"line_start":132,"line_end":132,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159437,"byte_end":159440,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ All offending symbols, in particular, `&` and `<`, will be escaped by the writer.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159445,"byte_end":159530,"line_start":134,"line_end":134,"column_start":5,"column_end":90}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159535,"byte_end":159544,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159688,"byte_end":159695,"line_start":140,"line_end":140,"column_start":12,"column_end":19},"name":"comment","qualname":"<XmlEvent>::comment","value":"pub fn comment(&'a str) -> XmlEvent","parent":null,"children":[],"decl_id":null,"docs":" Returns a comment event.\n","sig":null,"attributes":[{"value":"/ Returns a comment event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159634,"byte_end":159662,"line_start":138,"line_end":138,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159667,"byte_end":159676,"line_start":139,"line_end":139,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":775},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159896,"byte_end":159913,"line_start":148,"line_end":148,"column_start":12,"column_end":29},"name":"EndElementBuilder","qualname":"::writer::events::EndElementBuilder","value":"EndElementBuilder {  }","parent":null,"children":[{"krate":0,"index":777}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":780},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160435,"byte_end":160439,"line_start":161,"line_end":161,"column_start":12,"column_end":16},"name":"name","qualname":"<EndElementBuilder>::name","value":"pub fn name<N>(Self, N) -> EndElementBuilder where N: Into<Name>","parent":null,"children":[],"decl_id":null,"docs":" Sets the name of this closing element.","sig":null,"attributes":[{"value":"/ Sets the name of this closing element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160030,"byte_end":160072,"line_start":154,"line_end":154,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160077,"byte_end":160080,"line_start":155,"line_end":155,"column_start":5,"column_end":8}},{"value":"/ Usually the writer is able to determine closing element names automatically. If","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160085,"byte_end":160168,"line_start":156,"line_end":156,"column_start":5,"column_end":88}},{"value":"/ this functionality is enabled (by default it is), then this name is checked for correctness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160173,"byte_end":160269,"line_start":157,"line_end":157,"column_start":5,"column_end":101}},{"value":"/ It is possible, however, to disable such behavior; then the user must ensure that","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160274,"byte_end":160359,"line_start":158,"line_end":158,"column_start":5,"column_end":90}},{"value":"/ closing element name is correct manually.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160364,"byte_end":160409,"line_start":159,"line_end":159,"column_start":5,"column_end":50}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160414,"byte_end":160423,"line_start":160,"line_end":160,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":785},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160796,"byte_end":160815,"line_start":174,"line_end":174,"column_start":12,"column_end":31},"name":"StartElementBuilder","qualname":"::writer::events::StartElementBuilder","value":"StartElementBuilder {  }","parent":null,"children":[{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789}],"decl_id":null,"docs":" A builder for a starting element event.\n","sig":null,"attributes":[{"value":"/ A builder for a starting element event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160741,"byte_end":160784,"line_start":173,"line_end":173,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161577,"byte_end":161581,"line_start":192,"line_end":192,"column_start":12,"column_end":16},"name":"attr","qualname":"<StartElementBuilder>::attr","value":"pub fn attr<N>(Self, N, &'a str) -> StartElementBuilder where N: Into<Name>","parent":null,"children":[],"decl_id":null,"docs":" Sets an attribute value of this element to the given string.","sig":null,"attributes":[{"value":"/ Sets an attribute value of this element to the given string.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160945,"byte_end":161009,"line_start":181,"line_end":181,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161014,"byte_end":161017,"line_start":182,"line_end":182,"column_start":5,"column_end":8}},{"value":"/ This method can be used to add attributes to the starting element. Name is a qualified","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161022,"byte_end":161112,"line_start":183,"line_end":183,"column_start":5,"column_end":95}},{"value":"/ name; its namespace is ignored, but its prefix is checked for correctness, that is,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161117,"byte_end":161204,"line_start":184,"line_end":184,"column_start":5,"column_end":92}},{"value":"/ it is checked that the prefix is bound to some namespace in the current context.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161209,"byte_end":161293,"line_start":185,"line_end":185,"column_start":5,"column_end":89}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161298,"byte_end":161301,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ Currently attributes are not checked for duplicates. Note that duplicate attributes","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161306,"byte_end":161393,"line_start":187,"line_end":187,"column_start":5,"column_end":92}},{"value":"/ are a violation of XML document well-formedness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161398,"byte_end":161450,"line_start":188,"line_end":188,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161455,"byte_end":161458,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ The writer checks that you don't specify reserved prefix names, for example `xmlns`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161463,"byte_end":161551,"line_start":190,"line_end":190,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161556,"byte_end":161565,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162480,"byte_end":162482,"line_start":212,"line_end":212,"column_start":12,"column_end":14},"name":"ns","qualname":"<StartElementBuilder>::ns","value":"pub fn ns<S1, S2>(Self, S1, S2) -> StartElementBuilder where S1: Into<String>,\nS2: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Adds a namespace to the current namespace context.","sig":null,"attributes":[{"value":"/ Adds a namespace to the current namespace context.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161775,"byte_end":161829,"line_start":199,"line_end":199,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161834,"byte_end":161837,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ If no namespace URI was bound to the provided prefix at this point of the document,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161842,"byte_end":161929,"line_start":201,"line_end":201,"column_start":5,"column_end":92}},{"value":"/ then the mapping from the prefix to the provided namespace URI will be written as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":161934,"byte_end":162019,"line_start":202,"line_end":202,"column_start":5,"column_end":90}},{"value":"/ a part of this element attribute set.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162024,"byte_end":162065,"line_start":203,"line_end":203,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162070,"byte_end":162073,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ If the same namespace URI was bound to the provided prefix at this point of the document,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162078,"byte_end":162171,"line_start":205,"line_end":205,"column_start":5,"column_end":98}},{"value":"/ then no namespace attributes will be emitted.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162176,"byte_end":162225,"line_start":206,"line_end":206,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162230,"byte_end":162233,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ If some other namespace URI was bound to the provided prefix at this point of the document,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162238,"byte_end":162333,"line_start":208,"line_end":208,"column_start":5,"column_end":100}},{"value":"/ then another binding will be added as a part of this element attribute set, shadowing","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162338,"byte_end":162427,"line_start":209,"line_end":209,"column_start":5,"column_end":94}},{"value":"/ the outer binding.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162432,"byte_end":162454,"line_start":210,"line_end":210,"column_start":5,"column_end":27}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162459,"byte_end":162468,"line_start":211,"line_end":211,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":797},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162856,"byte_end":162866,"line_start":223,"line_end":223,"column_start":12,"column_end":22},"name":"default_ns","qualname":"<StartElementBuilder>::default_ns","value":"pub fn default_ns<S>(Self, S) -> StartElementBuilder where S: Into<String>","parent":null,"children":[],"decl_id":null,"docs":" Adds a default namespace mapping to the current namespace context.","sig":null,"attributes":[{"value":"/ Adds a default namespace mapping to the current namespace context.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162669,"byte_end":162739,"line_start":219,"line_end":219,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162744,"byte_end":162747,"line_start":220,"line_end":220,"column_start":5,"column_end":8}},{"value":"/ Same rules as for `ns()` are also valid for the default namespace mapping.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162752,"byte_end":162830,"line_start":221,"line_end":221,"column_start":5,"column_end":83}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":162835,"byte_end":162844,"line_start":222,"line_end":222,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":802},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132436,"byte_end":132447,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"EventWriter","qualname":"::writer::EventWriter","value":"EventWriter {  }","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"decl_id":null,"docs":" A wrapper around an `std::io::Write` instance which emits XML document according to provided\n events.\n","sig":null,"attributes":[{"value":"/ A wrapper around an `std::io::Write` instance which emits XML document according to provided","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132316,"byte_end":132412,"line_start":19,"line_end":19,"column_start":1,"column_end":97}},{"value":"/ events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132413,"byte_end":132424,"line_start":20,"line_end":20,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132660,"byte_end":132663,"line_start":30,"line_end":30,"column_start":12,"column_end":15},"name":"new","qualname":"<EventWriter<W>>::new","value":"pub fn new(W) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `EventWriter` out of an `std::io::Write` instance using the default\n configuration.\n","sig":null,"attributes":[{"value":"/ Creates a new `EventWriter` out of an `std::io::Write` instance using the default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132526,"byte_end":132611,"line_start":27,"line_end":27,"column_start":5,"column_end":90}},{"value":"/ configuration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132616,"byte_end":132634,"line_start":28,"line_end":28,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132639,"byte_end":132648,"line_start":29,"line_end":29,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132904,"byte_end":132919,"line_start":37,"line_end":37,"column_start":12,"column_end":27},"name":"new_with_config","qualname":"<EventWriter<W>>::new_with_config","value":"pub fn new_with_config(W, EmitterConfig) -> EventWriter<W>","parent":null,"children":[],"decl_id":null,"docs":" Creates a new `EventWriter` out of an `std::io::Write` instance using the provided\n configuration.\n","sig":null,"attributes":[{"value":"/ Creates a new `EventWriter` out of an `std::io::Write` instance using the provided","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132769,"byte_end":132855,"line_start":34,"line_end":34,"column_start":5,"column_end":91}},{"value":"/ configuration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132860,"byte_end":132878,"line_start":35,"line_end":35,"column_start":5,"column_end":23}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132883,"byte_end":132892,"line_start":36,"line_end":36,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133547,"byte_end":133552,"line_start":51,"line_end":51,"column_start":12,"column_end":17},"name":"write","qualname":"<EventWriter<W>>::write","value":"pub fn write<'a, E>(&mut Self, E) -> Result<()> where E: Into<XmlEvent>","parent":null,"children":[],"decl_id":null,"docs":" Writes the next piece of XML document according to the provided event.","sig":null,"attributes":[{"value":"/ Writes the next piece of XML document according to the provided event.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133081,"byte_end":133155,"line_start":44,"line_end":44,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133160,"byte_end":133163,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ Note that output data may not exactly correspond to the written event because","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133168,"byte_end":133249,"line_start":46,"line_end":46,"column_start":5,"column_end":86}},{"value":"/ of various configuration options. For example, `XmlEvent::EndElement` may","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133254,"byte_end":133331,"line_start":47,"line_end":47,"column_start":5,"column_end":82}},{"value":"/ correspond to a separate closing element or it may cause writing an empty element.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133336,"byte_end":133422,"line_start":48,"line_end":48,"column_start":5,"column_end":91}},{"value":"/ Another example is that `XmlEvent::CData` may be represented as characters in","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133427,"byte_end":133508,"line_start":49,"line_end":49,"column_start":5,"column_end":86}},{"value":"/ the output stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":133513,"byte_end":133535,"line_start":50,"line_end":50,"column_start":5,"column_end":27}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3687,"byte_end":3691,"line_start":59,"line_end":59,"column_start":28,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":17}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4044,"byte_end":4048,"line_start":70,"line_end":70,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4189,"byte_end":4193,"line_start":76,"line_end":76,"column_start":27,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4532,"byte_end":4536,"line_start":90,"line_end":90,"column_start":10,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6795,"byte_end":6806,"line_start":160,"line_end":160,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7511,"byte_end":7520,"line_start":184,"line_end":184,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7655,"byte_end":7664,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":47},{"krate":0,"index":50},{"krate":0,"index":52},{"krate":0,"index":57},{"krate":0,"index":59}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9240,"byte_end":9249,"line_start":239,"line_end":239,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9353,"byte_end":9362,"line_start":246,"line_end":246,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":65},{"krate":0,"index":66}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11770,"byte_end":11779,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":76}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11939,"byte_end":11948,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12750,"byte_end":12764,"line_start":59,"line_end":59,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":82},{"krate":0,"index":83}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":13286,"byte_end":13300,"line_start":78,"line_end":78,"column_start":23,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":86}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14224,"byte_end":14236,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14964,"byte_end":14976,"line_start":42,"line_end":42,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15141,"byte_end":15153,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15588,"byte_end":15600,"line_start":64,"line_end":64,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15875,"byte_end":15885,"line_start":81,"line_end":81,"column_start":23,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":17792,"byte_end":17797,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":18303,"byte_end":18310,"line_start":39,"line_end":39,"column_start":10,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19014,"byte_end":19021,"line_start":65,"line_end":65,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":139}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23302,"byte_end":23311,"line_start":69,"line_end":69,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":161},{"krate":0,"index":162},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":170},{"krate":0,"index":173}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27212,"byte_end":27226,"line_start":188,"line_end":188,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":199},{"krate":0,"index":202},{"krate":0,"index":205},{"krate":0,"index":207},{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32768,"byte_end":32790,"line_start":360,"line_end":360,"column_start":10,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":216}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32997,"byte_end":33019,"line_start":367,"line_end":367,"column_start":23,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":220},{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34664,"byte_end":34673,"line_start":416,"line_end":416,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":231}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34892,"byte_end":34906,"line_start":424,"line_end":424,"column_start":37,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":235}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36227,"byte_end":36240,"line_start":472,"line_end":472,"column_start":41,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":244}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":41798,"byte_end":41803,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":272}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":43150,"byte_end":43155,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":274},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":277}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":47981,"byte_end":47986,"line_start":228,"line_end":228,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":48132,"byte_end":48137,"line_start":234,"line_end":234,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":318},{"krate":0,"index":319},{"krate":0,"index":320},{"krate":0,"index":321},{"krate":0,"index":322},{"krate":0,"index":323},{"krate":0,"index":325},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336},{"krate":0,"index":337},{"krate":0,"index":345},{"krate":0,"index":353},{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/outside_tag.rs","byte_start":89265,"byte_end":89275,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":394}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_processing_instruction.rs","byte_start":95030,"byte_end":95040,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_declaration.rs","byte_start":99210,"byte_end":99220,"line_start":12,"line_end":12,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":422}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_doctype.rs","byte_start":106298,"byte_end":106308,"line_start":5,"line_end":5,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":438}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_opening_tag.rs","byte_start":106780,"byte_end":106790,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_closing_tag_name.rs","byte_start":112622,"byte_end":112632,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_comment.rs","byte_start":114197,"byte_end":114207,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_cdata.rs","byte_start":115212,"byte_end":115222,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":486}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_reference.rs","byte_start":116123,"byte_end":116133,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":72844,"byte_end":72854,"line_start":91,"line_end":91,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":73879,"byte_end":73889,"line_start":126,"line_end":126,"column_start":19,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":523}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":75346,"byte_end":75356,"line_start":206,"line_end":206,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":76483,"byte_end":76493,"line_start":238,"line_end":238,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":538},{"krate":0,"index":540},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544},{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551},{"krate":0,"index":552},{"krate":0,"index":555},{"krate":0,"index":557},{"krate":0,"index":558}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121286,"byte_end":121298,"line_start":59,"line_end":59,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":563},{"krate":0,"index":564}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122703,"byte_end":122715,"line_start":106,"line_end":106,"column_start":18,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":567}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":127266,"byte_end":127274,"line_start":117,"line_end":117,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":128898,"byte_end":128906,"line_start":152,"line_end":152,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37157,"byte_end":37162,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37298,"byte_end":37303,"line_start":39,"line_end":39,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":585}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37380,"byte_end":37385,"line_start":44,"line_end":44,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":587},{"krate":0,"index":590}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37820,"byte_end":37825,"line_start":57,"line_end":57,"column_start":23,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38160,"byte_end":38171,"line_start":71,"line_end":71,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":602},{"krate":0,"index":603}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38985,"byte_end":38996,"line_start":94,"line_end":94,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39199,"byte_end":39210,"line_start":102,"line_end":102,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":609},{"krate":0,"index":610},{"krate":0,"index":611}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39719,"byte_end":39725,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":618}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39917,"byte_end":39923,"line_start":128,"line_end":128,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":40307,"byte_end":40318,"line_start":145,"line_end":145,"column_start":10,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":625}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135976,"byte_end":135988,"line_start":37,"line_end":37,"column_start":26,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":656}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":136098,"byte_end":136110,"line_start":43,"line_end":43,"column_start":23,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":658}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":137383,"byte_end":137390,"line_start":80,"line_end":80,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":670}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":138496,"byte_end":138503,"line_start":129,"line_end":129,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681},{"krate":0,"index":683},{"krate":0,"index":685},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152734,"byte_end":152747,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":726},{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154379,"byte_end":154392,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":730}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157985,"byte_end":157993,"line_start":95,"line_end":95,"column_start":10,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159785,"byte_end":159793,"line_start":143,"line_end":143,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":774}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160002,"byte_end":160019,"line_start":153,"line_end":153,"column_start":10,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":780}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160615,"byte_end":160623,"line_start":167,"line_end":167,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":784}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160915,"byte_end":160934,"line_start":180,"line_end":180,"column_start":10,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":797}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":163063,"byte_end":163071,"line_start":231,"line_end":231,"column_start":44,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132505,"byte_end":132516,"line_start":26,"line_end":26,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163519,"byte_end":163532,"line_start":12,"line_end":12,"column_start":31,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":820}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163650,"byte_end":163663,"line_start":18,"line_end":18,"column_start":26,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163771,"byte_end":163784,"line_start":24,"line_end":24,"column_start":23,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":349,"byte_end":355,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":8}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":365,"byte_end":369,"line_start":17,"line_end":17,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":11}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":379,"byte_end":388,"line_start":18,"line_end":18,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":68}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":398,"byte_end":404,"line_start":19,"line_end":19,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":87}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":414,"byte_end":420,"line_start":20,"line_end":20,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":107}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":430,"byte_end":439,"line_start":21,"line_end":21,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":144}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":449,"byte_end":455,"line_start":22,"line_end":22,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":246}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/lib.rs","byte_start":465,"byte_end":471,"line_start":23,"line_end":23,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":626}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132307,"byte_end":132313,"line_start":17,"line_end":17,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":731}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":3687,"byte_end":3691,"line_start":59,"line_end":59,"column_start":28,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4044,"byte_end":4048,"line_start":70,"line_end":70,"column_start":39,"column_end":43},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4189,"byte_end":4193,"line_start":76,"line_end":76,"column_start":27,"column_end":31},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":830},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":4532,"byte_end":4536,"line_start":90,"line_end":90,"column_start":10,"column_end":14},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":830},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":6795,"byte_end":6806,"line_start":160,"line_end":160,"column_start":34,"column_end":45},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":35},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7511,"byte_end":7520,"line_start":184,"line_end":184,"column_start":23,"column_end":32},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":858},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":7655,"byte_end":7664,"line_start":191,"line_end":191,"column_start":6,"column_end":15},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":858},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9240,"byte_end":9249,"line_start":239,"line_end":239,"column_start":29,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":858},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/name.rs","byte_start":9353,"byte_end":9362,"line_start":246,"line_end":246,"column_start":18,"column_end":27},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":858},"to":{"krate":2,"index":9023}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11770,"byte_end":11779,"line_start":21,"line_end":21,"column_start":27,"column_end":36},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":876},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":11939,"byte_end":11948,"line_start":27,"line_end":27,"column_start":10,"column_end":19},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":876},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":12750,"byte_end":12764,"line_start":59,"line_end":59,"column_start":6,"column_end":20},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/attribute.rs","byte_start":13286,"byte_end":13300,"line_start":78,"line_end":78,"column_start":23,"column_end":37},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14224,"byte_end":14236,"line_start":14,"line_end":14,"column_start":6,"column_end":18},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":920},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":14964,"byte_end":14976,"line_start":42,"line_end":42,"column_start":21,"column_end":33},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":920},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15141,"byte_end":15153,"line_start":49,"line_end":49,"column_start":23,"column_end":35},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":920},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15588,"byte_end":15600,"line_start":64,"line_end":64,"column_start":19,"column_end":31},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":920},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/common.rs","byte_start":15875,"byte_end":15885,"line_start":81,"line_end":81,"column_start":23,"column_end":33},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":933},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":17792,"byte_end":17797,"line_start":13,"line_end":13,"column_start":6,"column_end":11},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":115},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":18303,"byte_end":18310,"line_start":39,"line_end":39,"column_start":10,"column_end":17},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":125},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/escape.rs","byte_start":19014,"byte_end":19021,"line_start":65,"line_end":65,"column_start":28,"column_end":35},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":125},"to":{"krate":2,"index":5531}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":23302,"byte_end":23311,"line_start":69,"line_end":69,"column_start":6,"column_end":15},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":947},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":27212,"byte_end":27226,"line_start":188,"line_end":188,"column_start":6,"column_end":20},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":961},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32768,"byte_end":32790,"line_start":360,"line_end":360,"column_start":10,"column_end":32},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":209},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":32997,"byte_end":33019,"line_start":367,"line_end":367,"column_start":23,"column_end":45},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34664,"byte_end":34673,"line_start":416,"line_end":416,"column_start":37,"column_end":46},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":947},"to":{"krate":2,"index":5531}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":34892,"byte_end":34906,"line_start":424,"line_end":424,"column_start":37,"column_end":51},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":961},"to":{"krate":2,"index":5531}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/namespace.rs","byte_start":36227,"byte_end":36240,"line_start":472,"line_end":472,"column_start":41,"column_end":54},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":237},"to":{"krate":2,"index":5531}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":41798,"byte_end":41803,"line_start":59,"line_end":59,"column_start":23,"column_end":28},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":975},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":43150,"byte_end":43155,"line_start":87,"line_end":87,"column_start":6,"column_end":11},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":975},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":47981,"byte_end":47986,"line_start":228,"line_end":228,"column_start":19,"column_end":24},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":306},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/lexer.rs","byte_start":48132,"byte_end":48137,"line_start":234,"line_end":234,"column_start":6,"column_end":11},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":306},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/outside_tag.rs","byte_start":89265,"byte_end":89275,"line_start":11,"line_end":11,"column_start":6,"column_end":16},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_processing_instruction.rs","byte_start":95030,"byte_end":95040,"line_start":10,"line_end":10,"column_start":6,"column_end":16},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_declaration.rs","byte_start":99210,"byte_end":99220,"line_start":12,"line_end":12,"column_start":6,"column_end":16},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_doctype.rs","byte_start":106298,"byte_end":106308,"line_start":5,"line_end":5,"column_start":6,"column_end":16},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_opening_tag.rs","byte_start":106780,"byte_end":106790,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_closing_tag_name.rs","byte_start":112622,"byte_end":112632,"line_start":7,"line_end":7,"column_start":6,"column_end":16},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_comment.rs","byte_start":114197,"byte_end":114207,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_cdata.rs","byte_start":115212,"byte_end":115222,"line_start":6,"line_end":6,"column_start":6,"column_end":16},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/inside_reference.rs","byte_start":116123,"byte_end":116133,"line_start":9,"line_end":9,"column_start":6,"column_end":16},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":72844,"byte_end":72854,"line_start":91,"line_end":91,"column_start":6,"column_end":16},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":73879,"byte_end":73889,"line_start":126,"line_end":126,"column_start":19,"column_end":29},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":504},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":75346,"byte_end":75356,"line_start":206,"line_end":206,"column_start":6,"column_end":16},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1193},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/parser/mod.rs","byte_start":76483,"byte_end":76493,"line_start":238,"line_end":238,"column_start":6,"column_end":16},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":504},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":121286,"byte_end":121298,"line_start":59,"line_end":59,"column_start":6,"column_end":18},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1207},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/config.rs","byte_start":122703,"byte_end":122715,"line_start":106,"line_end":106,"column_start":18,"column_end":30},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":1207},"to":{"krate":2,"index":2062}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":127266,"byte_end":127274,"line_start":117,"line_end":117,"column_start":21,"column_end":29},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1234},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/events.rs","byte_start":128898,"byte_end":128906,"line_start":152,"line_end":152,"column_start":6,"column_end":14},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1234},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37157,"byte_end":37162,"line_start":33,"line_end":33,"column_start":23,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1269},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37298,"byte_end":37303,"line_start":39,"line_end":39,"column_start":19,"column_end":24},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1269},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37380,"byte_end":37385,"line_start":44,"line_end":44,"column_start":6,"column_end":11},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":1269},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":37820,"byte_end":37825,"line_start":57,"line_end":57,"column_start":23,"column_end":28},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1269},"to":{"krate":1,"index":1751}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38160,"byte_end":38171,"line_start":71,"line_end":71,"column_start":15,"column_end":26},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":38985,"byte_end":38996,"line_start":94,"line_end":94,"column_start":28,"column_end":39},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":595},"to":{"krate":0,"index":98}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39199,"byte_end":39210,"line_start":102,"line_end":102,"column_start":32,"column_end":43},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":595},"to":{"krate":2,"index":5522}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39719,"byte_end":39725,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":612},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":39917,"byte_end":39923,"line_start":128,"line_end":128,"column_start":28,"column_end":34},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":612},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/reader/mod.rs","byte_start":40307,"byte_end":40318,"line_start":145,"line_end":145,"column_start":10,"column_end":21},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":595},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":135976,"byte_end":135988,"line_start":37,"line_end":37,"column_start":26,"column_end":38},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":136098,"byte_end":136110,"line_start":43,"line_end":43,"column_start":23,"column_end":35},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":1283},"to":{"krate":2,"index":6951}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":137383,"byte_end":137390,"line_start":80,"line_end":80,"column_start":6,"column_end":13},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/emitter.rs","byte_start":138496,"byte_end":138503,"line_start":129,"line_end":129,"column_start":6,"column_end":13},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":661},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":152734,"byte_end":152747,"line_start":78,"line_end":78,"column_start":6,"column_end":19},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1366},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/config.rs","byte_start":154379,"byte_end":154392,"line_start":130,"line_end":130,"column_start":18,"column_end":31},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1366},"to":{"krate":2,"index":2062}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":157985,"byte_end":157993,"line_start":95,"line_end":95,"column_start":10,"column_end":18},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":739},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":159785,"byte_end":159793,"line_start":143,"line_end":143,"column_start":28,"column_end":36},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":739},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160002,"byte_end":160019,"line_start":153,"line_end":153,"column_start":10,"column_end":27},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":775},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160615,"byte_end":160623,"line_start":167,"line_end":167,"column_start":42,"column_end":50},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":739},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":160915,"byte_end":160934,"line_start":180,"line_end":180,"column_start":10,"column_end":29},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":785},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/events.rs","byte_start":163063,"byte_end":163071,"line_start":231,"line_end":231,"column_start":44,"column_end":52},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":739},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/writer/mod.rs","byte_start":132505,"byte_end":132516,"line_start":26,"line_end":26,"column_start":16,"column_end":27},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":802},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163519,"byte_end":163532,"line_start":12,"line_end":12,"column_start":31,"column_end":44},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163650,"byte_end":163663,"line_start":18,"line_end":18,"column_start":26,"column_end":39},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":1990}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/xml-rs-0.2.2/src/util.rs","byte_start":163771,"byte_end":163784,"line_start":24,"line_end":24,"column_start":23,"column_end":36},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":1405},"to":{"krate":2,"index":6951}}]}