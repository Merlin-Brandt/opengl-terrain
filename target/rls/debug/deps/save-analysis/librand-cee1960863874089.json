{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","rand","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts","--crate-type","lib","--emit=dep-info,metadata,link","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=cee1960863874089","-C","extra-filename=-cee1960863874089","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--extern","libc=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/liblibc-302392ff27438034.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/librand-cee1960863874089.rmeta"},"prelude":{"crate_id":{"name":"rand","disambiguator":[13104041085988065092,7800914977301136980]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","num":18,"id":{"name":"libc","disambiguator":[16653485095637875757,5630144362712828968]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":472,"byte_end":38897,"line_start":11,"line_end":1242,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":441},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9447,"byte_end":9452,"line_start":253,"line_end":253,"column_start":13,"column_end":18},"alias_span":null,"name":"OsRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9471,"byte_end":9479,"line_start":255,"line_end":255,"column_start":17,"column_end":25},"alias_span":null,"name":"IsaacRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":808},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9481,"byte_end":9491,"line_start":255,"line_end":255,"column_start":27,"column_end":37},"alias_span":null,"name":"Isaac64Rng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":820},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9510,"byte_end":9519,"line_start":256,"line_end":256,"column_start":17,"column_end":26},"alias_span":null,"name":"ChaChaRng","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":643},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39864,"byte_end":39869,"line_start":24,"line_end":24,"column_start":22,"column_end":27},"alias_span":null,"name":"Range","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":701},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39893,"byte_end":39898,"line_start":25,"line_end":25,"column_start":23,"column_end":28},"alias_span":null,"name":"Gamma","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":732},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39900,"byte_end":39910,"line_start":25,"line_end":25,"column_start":30,"column_end":40},"alias_span":null,"name":"ChiSquared","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":746},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39912,"byte_end":39919,"line_start":25,"line_end":25,"column_start":42,"column_end":49},"alias_span":null,"name":"FisherF","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":753},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39921,"byte_end":39929,"line_start":25,"line_end":25,"column_start":51,"column_end":59},"alias_span":null,"name":"StudentT","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":765},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39955,"byte_end":39961,"line_start":26,"line_end":26,"column_start":24,"column_end":30},"alias_span":null,"name":"Normal","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":771},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39963,"byte_end":39972,"line_start":26,"line_end":26,"column_start":32,"column_end":41},"alias_span":null,"name":"LogNormal","value":"","parent":{"krate":0,"index":19}},{"kind":"Use","ref_id":{"krate":0,"index":782},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40002,"byte_end":40005,"line_start":27,"line_end":27,"column_start":28,"column_end":31},"alias_span":null,"name":"Exp","value":"","parent":{"krate":0,"index":19}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":472,"byte_end":38897,"line_start":11,"line_end":1242,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":1212},{"krate":0,"index":9},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":15},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":235},{"krate":0,"index":308},{"krate":0,"index":345},{"krate":0,"index":383},{"krate":0,"index":436},{"krate":0,"index":499},{"krate":0,"index":519},{"krate":0,"index":520},{"krate":0,"index":521},{"krate":0,"index":524},{"krate":0,"index":552},{"krate":0,"index":560},{"krate":0,"index":567},{"krate":0,"index":573},{"krate":0,"index":579},{"krate":0,"index":583},{"krate":0,"index":589},{"krate":0,"index":1180},{"krate":0,"index":1185},{"krate":0,"index":593},{"krate":0,"index":595},{"krate":0,"index":597},{"krate":0,"index":603},{"krate":0,"index":606},{"krate":0,"index":610},{"krate":0,"index":1189},{"krate":0,"index":1193},{"krate":0,"index":1191},{"krate":0,"index":614},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":624},{"krate":0,"index":625},{"krate":0,"index":627},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":1194},{"krate":0,"index":1196},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":637},{"krate":0,"index":639}],"decl_id":null,"docs":" Utilities for random number generation","sig":null,"attributes":[{"value":"/ Utilities for random number generation","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":472,"byte_end":514,"line_start":11,"line_end":11,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":515,"byte_end":518,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ The key functions are `random()` and `Rng::gen()`. These are polymorphic and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":519,"byte_end":599,"line_start":13,"line_end":13,"column_start":1,"column_end":81}},{"value":"/ so can be used to generate any type that implements `Rand`. Type inference","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":600,"byte_end":678,"line_start":14,"line_end":14,"column_start":1,"column_end":79}},{"value":"/ means that often a simple call to `rand::random()` or `rng.gen()` will","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":679,"byte_end":753,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ suffice, but sometimes an annotation is required, e.g.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":754,"byte_end":812,"line_start":16,"line_end":16,"column_start":1,"column_end":59}},{"value":"/ `rand::random::<f64>()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":813,"byte_end":841,"line_start":17,"line_end":17,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":842,"byte_end":845,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ See the `distributions` submodule for sampling random numbers from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":846,"byte_end":916,"line_start":19,"line_end":19,"column_start":1,"column_end":71}},{"value":"/ distributions like normal and exponential.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":917,"byte_end":963,"line_start":20,"line_end":20,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":964,"byte_end":967,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ # Usage","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":968,"byte_end":979,"line_start":22,"line_end":22,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":980,"byte_end":983,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ This crate is [on crates.io](https://crates.io/crates/rand) and can be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":984,"byte_end":1058,"line_start":24,"line_end":24,"column_start":1,"column_end":75}},{"value":"/ used by adding `rand` to the dependencies in your project's `Cargo.toml`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1059,"byte_end":1136,"line_start":25,"line_end":25,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1137,"byte_end":1140,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```toml","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1141,"byte_end":1152,"line_start":27,"line_end":27,"column_start":1,"column_end":12}},{"value":"/ [dependencies]","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1153,"byte_end":1171,"line_start":28,"line_end":28,"column_start":1,"column_end":19}},{"value":"/ rand = \"0.3\"","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1172,"byte_end":1188,"line_start":29,"line_end":29,"column_start":1,"column_end":17}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1189,"byte_end":1196,"line_start":30,"line_end":30,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1197,"byte_end":1200,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ and this to your crate root:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1201,"byte_end":1233,"line_start":32,"line_end":32,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1234,"byte_end":1237,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1238,"byte_end":1249,"line_start":34,"line_end":34,"column_start":1,"column_end":12}},{"value":"/ extern crate rand;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1250,"byte_end":1272,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1273,"byte_end":1280,"line_start":36,"line_end":36,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1281,"byte_end":1284,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Thread-local RNG","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1285,"byte_end":1307,"line_start":38,"line_end":38,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1308,"byte_end":1311,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ There is built-in support for a RNG associated with each thread stored","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1312,"byte_end":1386,"line_start":40,"line_end":40,"column_start":1,"column_end":75}},{"value":"/ in thread-local storage. This RNG can be accessed via `thread_rng`, or","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1387,"byte_end":1461,"line_start":41,"line_end":41,"column_start":1,"column_end":75}},{"value":"/ used implicitly via `random`. This RNG is normally randomly seeded","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1462,"byte_end":1532,"line_start":42,"line_end":42,"column_start":1,"column_end":71}},{"value":"/ from an operating-system source of randomness, e.g. `/dev/urandom` on","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1533,"byte_end":1606,"line_start":43,"line_end":43,"column_start":1,"column_end":74}},{"value":"/ Unix systems, and will automatically reseed itself from this source","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1607,"byte_end":1678,"line_start":44,"line_end":44,"column_start":1,"column_end":72}},{"value":"/ after generating 32 KiB of random data.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1679,"byte_end":1722,"line_start":45,"line_end":45,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1723,"byte_end":1726,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Cryptographic security","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1727,"byte_end":1755,"line_start":47,"line_end":47,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1756,"byte_end":1759,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ An application that requires an entropy source for cryptographic purposes","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1760,"byte_end":1837,"line_start":49,"line_end":49,"column_start":1,"column_end":78}},{"value":"/ must use `OsRng`, which reads randomness from the source that the operating","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1838,"byte_end":1917,"line_start":50,"line_end":50,"column_start":1,"column_end":80}},{"value":"/ system provides (e.g. `/dev/urandom` on Unixes or `CryptGenRandom()` on","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1918,"byte_end":1993,"line_start":51,"line_end":51,"column_start":1,"column_end":76}},{"value":"/ Windows).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":1994,"byte_end":2007,"line_start":52,"line_end":52,"column_start":1,"column_end":14}},{"value":"/ The other random number generators provided by this module are not suitable","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2008,"byte_end":2087,"line_start":53,"line_end":53,"column_start":1,"column_end":80}},{"value":"/ for such purposes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2088,"byte_end":2110,"line_start":54,"line_end":54,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2111,"byte_end":2114,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ *Note*: many Unix systems provide `/dev/random` as well as `/dev/urandom`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2115,"byte_end":2193,"line_start":56,"line_end":56,"column_start":1,"column_end":79}},{"value":"/ This module uses `/dev/urandom` for the following reasons:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2194,"byte_end":2256,"line_start":57,"line_end":57,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2257,"byte_end":2260,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ -   On Linux, `/dev/random` may block if entropy pool is empty;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2261,"byte_end":2328,"line_start":59,"line_end":59,"column_start":1,"column_end":68}},{"value":"/     `/dev/urandom` will not block.  This does not mean that `/dev/random`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2329,"byte_end":2406,"line_start":60,"line_end":60,"column_start":1,"column_end":78}},{"value":"/     provides better output than `/dev/urandom`; the kernel internally runs a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2407,"byte_end":2487,"line_start":61,"line_end":61,"column_start":1,"column_end":81}},{"value":"/     cryptographically secure pseudorandom number generator (CSPRNG) based on","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2488,"byte_end":2568,"line_start":62,"line_end":62,"column_start":1,"column_end":81}},{"value":"/     entropy pool for random number generation, so the \"quality\" of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2569,"byte_end":2639,"line_start":63,"line_end":63,"column_start":1,"column_end":71}},{"value":"/     `/dev/random` is not better than `/dev/urandom` in most cases.  However,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2640,"byte_end":2720,"line_start":64,"line_end":64,"column_start":1,"column_end":81}},{"value":"/     this means that `/dev/urandom` can yield somewhat predictable randomness","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2721,"byte_end":2801,"line_start":65,"line_end":65,"column_start":1,"column_end":81}},{"value":"/     if the entropy pool is very small, such as immediately after first","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2802,"byte_end":2876,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/     booting.  Linux 3.17 added the `getrandom(2)` system call which solves","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2877,"byte_end":2955,"line_start":67,"line_end":67,"column_start":1,"column_end":79}},{"value":"/     the issue: it blocks if entropy pool is not initialized yet, but it does","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":2956,"byte_end":3036,"line_start":68,"line_end":68,"column_start":1,"column_end":81}},{"value":"/     not block once initialized.  `OsRng` tries to use `getrandom(2)` if","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3037,"byte_end":3112,"line_start":69,"line_end":69,"column_start":1,"column_end":76}},{"value":"/     available, and use `/dev/urandom` fallback if not.  If an application","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3113,"byte_end":3190,"line_start":70,"line_end":70,"column_start":1,"column_end":78}},{"value":"/     does not have `getrandom` and likely to be run soon after first booting,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3191,"byte_end":3271,"line_start":71,"line_end":71,"column_start":1,"column_end":81}},{"value":"/     or on a system with very few entropy sources, one should consider using","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3272,"byte_end":3351,"line_start":72,"line_end":72,"column_start":1,"column_end":80}},{"value":"/     `/dev/random` via `ReadRng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3352,"byte_end":3388,"line_start":73,"line_end":73,"column_start":1,"column_end":37}},{"value":"/ -   On some systems (e.g. FreeBSD, OpenBSD and Mac OS X) there is no","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3389,"byte_end":3461,"line_start":74,"line_end":74,"column_start":1,"column_end":73}},{"value":"/     difference between the two sources. (Also note that, on some systems","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3462,"byte_end":3538,"line_start":75,"line_end":75,"column_start":1,"column_end":77}},{"value":"/     e.g.  FreeBSD, both `/dev/random` and `/dev/urandom` may block once if","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3539,"byte_end":3617,"line_start":76,"line_end":76,"column_start":1,"column_end":79}},{"value":"/     the CSPRNG has not seeded yet.)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3618,"byte_end":3657,"line_start":77,"line_end":77,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3658,"byte_end":3661,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3662,"byte_end":3676,"line_start":79,"line_end":79,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3677,"byte_end":3680,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3681,"byte_end":3692,"line_start":81,"line_end":81,"column_start":1,"column_end":12}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3693,"byte_end":3711,"line_start":82,"line_end":82,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3712,"byte_end":3715,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3716,"byte_end":3753,"line_start":84,"line_end":84,"column_start":1,"column_end":38}},{"value":"/ if rng.gen() { // random bool","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3754,"byte_end":3787,"line_start":85,"line_end":85,"column_start":1,"column_end":34}},{"value":"/     println!(\"i32: {}, u32: {}\", rng.gen::<i32>(), rng.gen::<u32>())","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3788,"byte_end":3860,"line_start":86,"line_end":86,"column_start":1,"column_end":73}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3861,"byte_end":3866,"line_start":87,"line_end":87,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3867,"byte_end":3874,"line_start":88,"line_end":88,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3875,"byte_end":3878,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3879,"byte_end":3890,"line_start":90,"line_end":90,"column_start":1,"column_end":12}},{"value":"/ let tuple = rand::random::<(f64, char)>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3891,"byte_end":3937,"line_start":91,"line_end":91,"column_start":1,"column_end":47}},{"value":"/ println!(\"{:?}\", tuple)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3938,"byte_end":3965,"line_start":92,"line_end":92,"column_start":1,"column_end":28}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3966,"byte_end":3973,"line_start":93,"line_end":93,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3974,"byte_end":3977,"line_start":94,"line_end":94,"column_start":1,"column_end":4}},{"value":"/ ## Monte Carlo estimation of π","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":3978,"byte_end":4013,"line_start":95,"line_end":95,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4014,"byte_end":4017,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ For this example, imagine we have a square with sides of length 2 and a unit","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4018,"byte_end":4098,"line_start":97,"line_end":97,"column_start":1,"column_end":81}},{"value":"/ circle, both centered at the origin. Since the area of a unit circle is π,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4099,"byte_end":4178,"line_start":98,"line_end":98,"column_start":1,"column_end":79}},{"value":"/ we have:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4179,"byte_end":4191,"line_start":99,"line_end":99,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4192,"byte_end":4195,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4196,"byte_end":4207,"line_start":101,"line_end":101,"column_start":1,"column_end":12}},{"value":"/     (area of unit circle) / (area of square) = π / 4","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4208,"byte_end":4265,"line_start":102,"line_end":102,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4266,"byte_end":4273,"line_start":103,"line_end":103,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4274,"byte_end":4277,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ So if we sample many points randomly from the square, roughly π / 4 of them","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4278,"byte_end":4358,"line_start":105,"line_end":105,"column_start":1,"column_end":80}},{"value":"/ should be inside the circle.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4359,"byte_end":4391,"line_start":106,"line_end":106,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4392,"byte_end":4395,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ We can use the above fact to estimate the value of π: pick many points in","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4396,"byte_end":4474,"line_start":108,"line_end":108,"column_start":1,"column_end":78}},{"value":"/ the square at random, calculate the fraction that fall within the circle,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4475,"byte_end":4552,"line_start":109,"line_end":109,"column_start":1,"column_end":78}},{"value":"/ and multiply this fraction by 4.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4553,"byte_end":4589,"line_start":110,"line_end":110,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4590,"byte_end":4593,"line_start":111,"line_end":111,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4594,"byte_end":4601,"line_start":112,"line_end":112,"column_start":1,"column_end":8}},{"value":"/ use rand::distributions::{IndependentSample, Range};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4602,"byte_end":4658,"line_start":113,"line_end":113,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4659,"byte_end":4662,"line_start":114,"line_end":114,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4663,"byte_end":4678,"line_start":115,"line_end":115,"column_start":1,"column_end":16}},{"value":"/    let between = Range::new(-1f64, 1.);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4679,"byte_end":4722,"line_start":116,"line_end":116,"column_start":1,"column_end":44}},{"value":"/    let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4723,"byte_end":4763,"line_start":117,"line_end":117,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4764,"byte_end":4767,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/    let total = 1_000_000;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4768,"byte_end":4797,"line_start":119,"line_end":119,"column_start":1,"column_end":30}},{"value":"/    let mut in_circle = 0;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4798,"byte_end":4827,"line_start":120,"line_end":120,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4828,"byte_end":4831,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/    for _ in 0..total {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4832,"byte_end":4858,"line_start":122,"line_end":122,"column_start":1,"column_end":27}},{"value":"/        let a = between.ind_sample(&mut rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4859,"byte_end":4907,"line_start":123,"line_end":123,"column_start":1,"column_end":49}},{"value":"/        let b = between.ind_sample(&mut rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4908,"byte_end":4956,"line_start":124,"line_end":124,"column_start":1,"column_end":49}},{"value":"/        if a*a + b*b <= 1. {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4957,"byte_end":4988,"line_start":125,"line_end":125,"column_start":1,"column_end":32}},{"value":"/            in_circle += 1;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":4989,"byte_end":5019,"line_start":126,"line_end":126,"column_start":1,"column_end":31}},{"value":"/        }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5020,"byte_end":5032,"line_start":127,"line_end":127,"column_start":1,"column_end":13}},{"value":"/    }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5033,"byte_end":5041,"line_start":128,"line_end":128,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5042,"byte_end":5045,"line_start":129,"line_end":129,"column_start":1,"column_end":4}},{"value":"/    // prints something close to 3.14159...","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5046,"byte_end":5092,"line_start":130,"line_end":130,"column_start":1,"column_end":47}},{"value":"/    println!(\"{}\", 4. * (in_circle as f64) / (total as f64));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5093,"byte_end":5157,"line_start":131,"line_end":131,"column_start":1,"column_end":65}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5158,"byte_end":5163,"line_start":132,"line_end":132,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5164,"byte_end":5171,"line_start":133,"line_end":133,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5172,"byte_end":5175,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ ## Monty Hall Problem","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5176,"byte_end":5201,"line_start":135,"line_end":135,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5202,"byte_end":5205,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ This is a simulation of the [Monty Hall Problem][]:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5206,"byte_end":5261,"line_start":137,"line_end":137,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5262,"byte_end":5265,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ > Suppose you're on a game show, and you're given the choice of three doors:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5266,"byte_end":5346,"line_start":139,"line_end":139,"column_start":1,"column_end":81}},{"value":"/ > Behind one door is a car; behind the others, goats. You pick a door, say","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5347,"byte_end":5425,"line_start":140,"line_end":140,"column_start":1,"column_end":79}},{"value":"/ > No. 1, and the host, who knows what's behind the doors, opens another","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5426,"byte_end":5501,"line_start":141,"line_end":141,"column_start":1,"column_end":76}},{"value":"/ > door, say No. 3, which has a goat. He then says to you, \"Do you want to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5502,"byte_end":5579,"line_start":142,"line_end":142,"column_start":1,"column_end":78}},{"value":"/ > pick door No. 2?\" Is it to your advantage to switch your choice?","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5580,"byte_end":5650,"line_start":143,"line_end":143,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5651,"byte_end":5654,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ The rather unintuitive answer is that you will have a 2/3 chance of winning","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5655,"byte_end":5734,"line_start":145,"line_end":145,"column_start":1,"column_end":80}},{"value":"/ if you switch and a 1/3 chance of winning if you don't, so it's better to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5735,"byte_end":5812,"line_start":146,"line_end":146,"column_start":1,"column_end":78}},{"value":"/ switch.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5813,"byte_end":5824,"line_start":147,"line_end":147,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5825,"byte_end":5828,"line_start":148,"line_end":148,"column_start":1,"column_end":4}},{"value":"/ This program will simulate the game show and with large enough simulation","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5829,"byte_end":5906,"line_start":149,"line_end":149,"column_start":1,"column_end":78}},{"value":"/ steps it will indeed confirm that it is better to switch.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5907,"byte_end":5968,"line_start":150,"line_end":150,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5969,"byte_end":5972,"line_start":151,"line_end":151,"column_start":1,"column_end":4}},{"value":"/ [Monty Hall Problem]: http://en.wikipedia.org/wiki/Monty_Hall_problem","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":5973,"byte_end":6046,"line_start":152,"line_end":152,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6047,"byte_end":6050,"line_start":153,"line_end":153,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6051,"byte_end":6058,"line_start":154,"line_end":154,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6059,"byte_end":6077,"line_start":155,"line_end":155,"column_start":1,"column_end":19}},{"value":"/ use rand::distributions::{IndependentSample, Range};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6078,"byte_end":6134,"line_start":156,"line_end":156,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6135,"byte_end":6138,"line_start":157,"line_end":157,"column_start":1,"column_end":4}},{"value":"/ struct SimulationResult {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6139,"byte_end":6168,"line_start":158,"line_end":158,"column_start":1,"column_end":30}},{"value":"/     win: bool,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6169,"byte_end":6187,"line_start":159,"line_end":159,"column_start":1,"column_end":19}},{"value":"/     switch: bool,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6188,"byte_end":6209,"line_start":160,"line_end":160,"column_start":1,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6210,"byte_end":6215,"line_start":161,"line_end":161,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6216,"byte_end":6219,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ // Run a single simulation of the Monty Hall problem.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6220,"byte_end":6277,"line_start":163,"line_end":163,"column_start":1,"column_end":58}},{"value":"/ fn simulate<R: Rng>(random_door: &Range<u32>, rng: &mut R)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6278,"byte_end":6340,"line_start":164,"line_end":164,"column_start":1,"column_end":63}},{"value":"/                     -> SimulationResult {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6341,"byte_end":6386,"line_start":165,"line_end":165,"column_start":1,"column_end":46}},{"value":"/     let car = random_door.ind_sample(rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6387,"byte_end":6433,"line_start":166,"line_end":166,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6434,"byte_end":6437,"line_start":167,"line_end":167,"column_start":1,"column_end":4}},{"value":"/     // This is our initial choice","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6438,"byte_end":6475,"line_start":168,"line_end":168,"column_start":1,"column_end":38}},{"value":"/     let mut choice = random_door.ind_sample(rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6476,"byte_end":6529,"line_start":169,"line_end":169,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6530,"byte_end":6533,"line_start":170,"line_end":170,"column_start":1,"column_end":4}},{"value":"/     // The game host opens a door","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6534,"byte_end":6571,"line_start":171,"line_end":171,"column_start":1,"column_end":38}},{"value":"/     let open = game_host_open(car, choice, rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6572,"byte_end":6624,"line_start":172,"line_end":172,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6625,"byte_end":6628,"line_start":173,"line_end":173,"column_start":1,"column_end":4}},{"value":"/     // Shall we switch?","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6629,"byte_end":6656,"line_start":174,"line_end":174,"column_start":1,"column_end":28}},{"value":"/     let switch = rng.gen();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6657,"byte_end":6688,"line_start":175,"line_end":175,"column_start":1,"column_end":32}},{"value":"/     if switch {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6689,"byte_end":6708,"line_start":176,"line_end":176,"column_start":1,"column_end":20}},{"value":"/         choice = switch_door(choice, open);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6709,"byte_end":6756,"line_start":177,"line_end":177,"column_start":1,"column_end":48}},{"value":"/     }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6757,"byte_end":6766,"line_start":178,"line_end":178,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6767,"byte_end":6770,"line_start":179,"line_end":179,"column_start":1,"column_end":4}},{"value":"/     SimulationResult { win: choice == car, switch: switch }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6771,"byte_end":6834,"line_start":180,"line_end":180,"column_start":1,"column_end":64}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6835,"byte_end":6840,"line_start":181,"line_end":181,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6841,"byte_end":6844,"line_start":182,"line_end":182,"column_start":1,"column_end":4}},{"value":"/ // Returns the door the game host opens given our choice and knowledge of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6845,"byte_end":6922,"line_start":183,"line_end":183,"column_start":1,"column_end":78}},{"value":"/ // where the car is. The game host will never open the door with the car.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":6923,"byte_end":7000,"line_start":184,"line_end":184,"column_start":1,"column_end":78}},{"value":"/ fn game_host_open<R: Rng>(car: u32, choice: u32, rng: &mut R) -> u32 {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7001,"byte_end":7075,"line_start":185,"line_end":185,"column_start":1,"column_end":75}},{"value":"/     let choices = free_doors(&[car, choice]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7076,"byte_end":7125,"line_start":186,"line_end":186,"column_start":1,"column_end":50}},{"value":"/     rand::sample(rng, choices.into_iter(), 1)[0]","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7126,"byte_end":7178,"line_start":187,"line_end":187,"column_start":1,"column_end":53}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7179,"byte_end":7184,"line_start":188,"line_end":188,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7185,"byte_end":7188,"line_start":189,"line_end":189,"column_start":1,"column_end":4}},{"value":"/ // Returns the door we switch to, given our current choice and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7189,"byte_end":7255,"line_start":190,"line_end":190,"column_start":1,"column_end":67}},{"value":"/ // the open door. There will only be one valid door.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7256,"byte_end":7312,"line_start":191,"line_end":191,"column_start":1,"column_end":57}},{"value":"/ fn switch_door(choice: u32, open: u32) -> u32 {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7313,"byte_end":7364,"line_start":192,"line_end":192,"column_start":1,"column_end":52}},{"value":"/     free_doors(&[choice, open])[0]","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7365,"byte_end":7403,"line_start":193,"line_end":193,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7404,"byte_end":7409,"line_start":194,"line_end":194,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7410,"byte_end":7413,"line_start":195,"line_end":195,"column_start":1,"column_end":4}},{"value":"/ fn free_doors(blocked: &[u32]) -> Vec<u32> {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7414,"byte_end":7462,"line_start":196,"line_end":196,"column_start":1,"column_end":49}},{"value":"/     (0..3).filter(|x| !blocked.contains(x)).collect()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7463,"byte_end":7520,"line_start":197,"line_end":197,"column_start":1,"column_end":58}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7521,"byte_end":7526,"line_start":198,"line_end":198,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7527,"byte_end":7530,"line_start":199,"line_end":199,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7531,"byte_end":7546,"line_start":200,"line_end":200,"column_start":1,"column_end":16}},{"value":"/     // The estimation will be more accurate with more simulations","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7547,"byte_end":7616,"line_start":201,"line_end":201,"column_start":1,"column_end":70}},{"value":"/     let num_simulations = 10000;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7617,"byte_end":7653,"line_start":202,"line_end":202,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7654,"byte_end":7657,"line_start":203,"line_end":203,"column_start":1,"column_end":4}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7658,"byte_end":7699,"line_start":204,"line_end":204,"column_start":1,"column_end":42}},{"value":"/     let random_door = Range::new(0, 3);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7700,"byte_end":7743,"line_start":205,"line_end":205,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7744,"byte_end":7747,"line_start":206,"line_end":206,"column_start":1,"column_end":4}},{"value":"/     let (mut switch_wins, mut switch_losses) = (0, 0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7748,"byte_end":7806,"line_start":207,"line_end":207,"column_start":1,"column_end":59}},{"value":"/     let (mut keep_wins, mut keep_losses) = (0, 0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7807,"byte_end":7861,"line_start":208,"line_end":208,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7862,"byte_end":7865,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/     println!(\"Running {} simulations...\", num_simulations);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7866,"byte_end":7929,"line_start":210,"line_end":210,"column_start":1,"column_end":64}},{"value":"/     for _ in 0..num_simulations {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7930,"byte_end":7967,"line_start":211,"line_end":211,"column_start":1,"column_end":38}},{"value":"/         let result = simulate(&random_door, &mut rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":7968,"byte_end":8026,"line_start":212,"line_end":212,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8027,"byte_end":8030,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/         match (result.win, result.switch) {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8031,"byte_end":8078,"line_start":214,"line_end":214,"column_start":1,"column_end":48}},{"value":"/             (true, true) => switch_wins += 1,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8079,"byte_end":8128,"line_start":215,"line_end":215,"column_start":1,"column_end":50}},{"value":"/             (true, false) => keep_wins += 1,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8129,"byte_end":8177,"line_start":216,"line_end":216,"column_start":1,"column_end":49}},{"value":"/             (false, true) => switch_losses += 1,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8178,"byte_end":8230,"line_start":217,"line_end":217,"column_start":1,"column_end":53}},{"value":"/             (false, false) => keep_losses += 1,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8231,"byte_end":8282,"line_start":218,"line_end":218,"column_start":1,"column_end":52}},{"value":"/         }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8283,"byte_end":8296,"line_start":219,"line_end":219,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8297,"byte_end":8306,"line_start":220,"line_end":220,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8307,"byte_end":8310,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/     let total_switches = switch_wins + switch_losses;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8311,"byte_end":8368,"line_start":222,"line_end":222,"column_start":1,"column_end":58}},{"value":"/     let total_keeps = keep_wins + keep_losses;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8369,"byte_end":8419,"line_start":223,"line_end":223,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8420,"byte_end":8423,"line_start":224,"line_end":224,"column_start":1,"column_end":4}},{"value":"/     println!(\"Switched door {} times with {} wins and {} losses\",","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8424,"byte_end":8493,"line_start":225,"line_end":225,"column_start":1,"column_end":70}},{"value":"/              total_switches, switch_wins, switch_losses);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8494,"byte_end":8555,"line_start":226,"line_end":226,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8556,"byte_end":8559,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/     println!(\"Kept our choice {} times with {} wins and {} losses\",","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8560,"byte_end":8631,"line_start":228,"line_end":228,"column_start":1,"column_end":72}},{"value":"/              total_keeps, keep_wins, keep_losses);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8632,"byte_end":8686,"line_start":229,"line_end":229,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8687,"byte_end":8690,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/     // With a large number of simulations, the values should converge to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8691,"byte_end":8767,"line_start":231,"line_end":231,"column_start":1,"column_end":77}},{"value":"/     // 0.667 and 0.333 respectively.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8768,"byte_end":8808,"line_start":232,"line_end":232,"column_start":1,"column_end":41}},{"value":"/     println!(\"Estimated chance to win if we switch: {}\",","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8809,"byte_end":8869,"line_start":233,"line_end":233,"column_start":1,"column_end":61}},{"value":"/              switch_wins as f32 / total_switches as f32);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8870,"byte_end":8931,"line_start":234,"line_end":234,"column_start":1,"column_end":62}},{"value":"/     println!(\"Estimated chance to win if we don't: {}\",","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8932,"byte_end":8991,"line_start":235,"line_end":235,"column_start":1,"column_end":60}},{"value":"/              keep_wins as f32 / total_keeps as f32);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":8992,"byte_end":9048,"line_start":236,"line_end":236,"column_start":1,"column_end":57}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9049,"byte_end":9054,"line_start":237,"line_end":237,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9055,"byte_end":9062,"line_start":238,"line_end":238,"column_start":1,"column_end":8}}]},{"kind":"Mod","id":{"krate":0,"index":19},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"distributions","qualname":"::distributions","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21},{"krate":0,"index":22},{"krate":0,"index":23},{"krate":0,"index":24},{"krate":0,"index":25},{"krate":0,"index":26},{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":57},{"krate":0,"index":116},{"krate":0,"index":148},{"krate":0,"index":171},{"krate":0,"index":175},{"krate":0,"index":179},{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":187},{"krate":0,"index":191},{"krate":0,"index":195},{"krate":0,"index":787},{"krate":0,"index":791},{"krate":0,"index":794},{"krate":0,"index":198},{"krate":0,"index":203},{"krate":0,"index":207},{"krate":0,"index":212},{"krate":0,"index":217},{"krate":0,"index":230}],"decl_id":null,"docs":" Sampling from random distributions.","sig":null,"attributes":[{"value":"/ Sampling from random distributions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39366,"byte_end":39405,"line_start":11,"line_end":11,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39406,"byte_end":39409,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ This is a generalization of `Rand` to allow parameters to control the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39410,"byte_end":39483,"line_start":13,"line_end":13,"column_start":1,"column_end":74}},{"value":"/ exact properties of the generated values, e.g. the mean and standard","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39484,"byte_end":39556,"line_start":14,"line_end":14,"column_start":1,"column_end":73}},{"value":"/ deviation of a normal distribution. The `Sample` trait is the most","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39557,"byte_end":39627,"line_start":15,"line_end":15,"column_start":1,"column_end":71}},{"value":"/ general, and allows for generating values that change some state","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39628,"byte_end":39696,"line_start":16,"line_end":16,"column_start":1,"column_end":69}},{"value":"/ internally. The `IndependentSample` trait is for generating values","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39697,"byte_end":39767,"line_start":17,"line_end":17,"column_start":1,"column_end":71}},{"value":"/ that do not need to record state.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":39768,"byte_end":39805,"line_start":18,"line_end":18,"column_start":1,"column_end":38}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"range","qualname":"::distributions::range","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":1252},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":643},{"krate":0,"index":650},{"krate":0,"index":648},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":47},{"krate":0,"index":51},{"krate":0,"index":653},{"krate":0,"index":657},{"krate":0,"index":661},{"krate":0,"index":665},{"krate":0,"index":669},{"krate":0,"index":673},{"krate":0,"index":677},{"krate":0,"index":681},{"krate":0,"index":685},{"krate":0,"index":689},{"krate":0,"index":693},{"krate":0,"index":697}],"decl_id":null,"docs":" Generating numbers between two others.\n","sig":null,"attributes":[{"value":"/ Generating numbers between two others.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":53680,"byte_end":53722,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":643},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54937,"byte_end":54942,"line_start":50,"line_end":50,"column_start":12,"column_end":17},"name":"Range","qualname":"::distributions::range::Range","value":"Range {  }","parent":null,"children":[{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647}],"decl_id":null,"docs":" Sample values uniformly between two bounds.","sig":null,"attributes":[{"value":"/ Sample values uniformly between two bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":53878,"byte_end":53925,"line_start":20,"line_end":20,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":53926,"byte_end":53929,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ This gives a uniform distribution (assuming the RNG used to sample","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":53930,"byte_end":54000,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ it is itself uniform & the `SampleRange` implementation for the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54001,"byte_end":54068,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ given type is correct), even for edge cases like `low = 0u8`,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54069,"byte_end":54134,"line_start":24,"line_end":24,"column_start":1,"column_end":66}},{"value":"/ `high = 170u8`, for which a naive modulo operation would return","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54135,"byte_end":54202,"line_start":25,"line_end":25,"column_start":1,"column_end":68}},{"value":"/ numbers less than 85 with double the probability to those greater","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54203,"byte_end":54272,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ than 85.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54273,"byte_end":54285,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54286,"byte_end":54289,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ Types should attempt to sample in `[low, high)`, i.e., not","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54290,"byte_end":54352,"line_start":29,"line_end":29,"column_start":1,"column_end":63}},{"value":"/ including `high`, but this may be very difficult. All the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54353,"byte_end":54414,"line_start":30,"line_end":30,"column_start":1,"column_end":62}},{"value":"/ primitive integer types satisfy this property, and the float types","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54415,"byte_end":54485,"line_start":31,"line_end":31,"column_start":1,"column_end":71}},{"value":"/ normally satisfy it, but rounding may mean `high` can occur.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54486,"byte_end":54550,"line_start":32,"line_end":32,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54551,"byte_end":54554,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54555,"byte_end":54568,"line_start":34,"line_end":34,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54569,"byte_end":54572,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54573,"byte_end":54584,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{IndependentSample, Range};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54585,"byte_end":54641,"line_start":37,"line_end":37,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54642,"byte_end":54645,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54646,"byte_end":54661,"line_start":39,"line_end":39,"column_start":1,"column_end":16}},{"value":"/     let between = Range::new(10, 10000);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54662,"byte_end":54706,"line_start":40,"line_end":40,"column_start":1,"column_end":45}},{"value":"/     let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54707,"byte_end":54748,"line_start":41,"line_end":41,"column_start":1,"column_end":42}},{"value":"/     let mut sum = 0;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54749,"byte_end":54773,"line_start":42,"line_end":42,"column_start":1,"column_end":25}},{"value":"/     for _ in 0..1000 {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54774,"byte_end":54800,"line_start":43,"line_end":43,"column_start":1,"column_end":27}},{"value":"/         sum += between.ind_sample(&mut rng);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54801,"byte_end":54849,"line_start":44,"line_end":44,"column_start":1,"column_end":49}},{"value":"/     }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54850,"byte_end":54859,"line_start":45,"line_end":45,"column_start":1,"column_end":10}},{"value":"/     println!(\"{}\", sum);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54860,"byte_end":54888,"line_start":46,"line_end":46,"column_start":1,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54889,"byte_end":54894,"line_start":47,"line_end":47,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":54895,"byte_end":54902,"line_start":48,"line_end":48,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":42},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55166,"byte_end":55169,"line_start":59,"line_end":59,"column_start":12,"column_end":15},"name":"new","qualname":"<Range<X>>::new","value":"pub fn new(X, X) -> Range<X>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `Range` instance that samples uniformly from\n `[low, high)`. Panics if `low >= high`.\n","sig":null,"attributes":[{"value":"/ Create a new `Range` instance that samples uniformly from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55045,"byte_end":55106,"line_start":57,"line_end":57,"column_start":5,"column_end":66}},{"value":"/ `[low, high)`. Panics if `low >= high`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55111,"byte_end":55154,"line_start":58,"line_end":58,"column_start":5,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":51},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55828,"byte_end":55839,"line_start":78,"line_end":78,"column_start":11,"column_end":22},"name":"SampleRange","qualname":"::distributions::range::SampleRange","value":"SampleRange: Sized","parent":null,"children":[{"krate":0,"index":52},{"krate":0,"index":53}],"decl_id":null,"docs":" The helper trait for types that have a sensible way to sample\n uniformly between two values. This should not be used directly,\n and is only to facilitate `Range`.\n","sig":null,"attributes":[{"value":"/ The helper trait for types that have a sensible way to sample","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55645,"byte_end":55710,"line_start":75,"line_end":75,"column_start":1,"column_end":66}},{"value":"/ uniformly between two values. This should not be used directly,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55711,"byte_end":55778,"line_start":76,"line_end":76,"column_start":1,"column_end":68}},{"value":"/ and is only to facilitate `Range`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55779,"byte_end":55817,"line_start":77,"line_end":77,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":56099,"byte_end":56114,"line_start":83,"line_end":83,"column_start":8,"column_end":23},"name":"construct_range","qualname":"::distributions::range::SampleRange::construct_range","value":"pub fn construct_range(Self, Self) -> Range<Self>","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Construct the `Range` object that `sample_range`\n requires. This should not ever be called directly, only via\n `Range::new`, which will check that `low < high`, so this\n function doesn't have to repeat the check.\n","sig":null,"attributes":[{"value":"/ Construct the `Range` object that `sample_range`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55854,"byte_end":55906,"line_start":79,"line_end":79,"column_start":5,"column_end":57}},{"value":"/ requires. This should not ever be called directly, only via","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55911,"byte_end":55974,"line_start":80,"line_end":80,"column_start":5,"column_end":68}},{"value":"/ `Range::new`, which will check that `low < high`, so this","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55979,"byte_end":56040,"line_start":81,"line_end":81,"column_start":5,"column_end":66}},{"value":"/ function doesn't have to repeat the check.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":56045,"byte_end":56091,"line_start":82,"line_end":82,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":56264,"byte_end":56276,"line_start":87,"line_end":87,"column_start":8,"column_end":20},"name":"sample_range","qualname":"::distributions::range::SampleRange::sample_range","value":"pub fn sample_range<R: Rng>(&Range<Self>, &mut R) -> Self","parent":{"krate":0,"index":51},"children":[],"decl_id":null,"docs":" Sample a value from the given `Range` with the given `Rng` as\n a source of randomness.\n","sig":null,"attributes":[{"value":"/ Sample a value from the given `Range` with the given `Rng` as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":56159,"byte_end":56224,"line_start":85,"line_end":85,"column_start":5,"column_end":70}},{"value":"/ a source of randomness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":56229,"byte_end":56256,"line_start":86,"line_end":86,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":57},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"gamma","qualname":"::distributions::gamma","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":1262},{"krate":0,"index":63},{"krate":0,"index":1264},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":701},{"krate":0,"index":704},{"krate":0,"index":703},{"krate":0,"index":706},{"krate":0,"index":717},{"krate":0,"index":716},{"krate":0,"index":719},{"krate":0,"index":723},{"krate":0,"index":722},{"krate":0,"index":725},{"krate":0,"index":730},{"krate":0,"index":729},{"krate":0,"index":68},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":83},{"krate":0,"index":86},{"krate":0,"index":89},{"krate":0,"index":732},{"krate":0,"index":735},{"krate":0,"index":734},{"krate":0,"index":737},{"krate":0,"index":744},{"krate":0,"index":743},{"krate":0,"index":92},{"krate":0,"index":94},{"krate":0,"index":97},{"krate":0,"index":746},{"krate":0,"index":751},{"krate":0,"index":750},{"krate":0,"index":100},{"krate":0,"index":102},{"krate":0,"index":105},{"krate":0,"index":753},{"krate":0,"index":757},{"krate":0,"index":756},{"krate":0,"index":108},{"krate":0,"index":110},{"krate":0,"index":113}],"decl_id":null,"docs":" The Gamma and derived distributions.\n","sig":null,"attributes":[{"value":"/ The Gamma and derived distributions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61571,"byte_end":61611,"line_start":13,"line_end":13,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":701},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62850,"byte_end":62855,"line_start":53,"line_end":53,"column_start":12,"column_end":17},"name":"Gamma","qualname":"::distributions::gamma::Gamma","value":"Gamma {  }","parent":null,"children":[{"krate":0,"index":702}],"decl_id":null,"docs":" The Gamma distribution `Gamma(shape, scale)` distribution.","sig":null,"attributes":[{"value":"/ The Gamma distribution `Gamma(shape, scale)` distribution.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61767,"byte_end":61829,"line_start":22,"line_end":22,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61830,"byte_end":61833,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ The density function of this distribution is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61834,"byte_end":61882,"line_start":24,"line_end":24,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61883,"byte_end":61886,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61887,"byte_end":61898,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ f(x) =  x^(k - 1) * exp(-x / θ) / (Γ(k) * θ^k)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61899,"byte_end":61952,"line_start":27,"line_end":27,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61953,"byte_end":61960,"line_start":28,"line_end":28,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61961,"byte_end":61964,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ where `Γ` is the Gamma function, `k` is the shape and `θ` is the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":61965,"byte_end":62035,"line_start":30,"line_end":30,"column_start":1,"column_end":69}},{"value":"/ scale and both `k` and `θ` are strictly positive.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62036,"byte_end":62090,"line_start":31,"line_end":31,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62091,"byte_end":62094,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ The algorithm used is that described by Marsaglia & Tsang 2000[1],","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62095,"byte_end":62165,"line_start":33,"line_end":33,"column_start":1,"column_end":71}},{"value":"/ falling back to directly sampling from an Exponential for `shape","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62166,"byte_end":62234,"line_start":34,"line_end":34,"column_start":1,"column_end":69}},{"value":"/ == 1`, and using the boosting technique described in [1] for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62235,"byte_end":62299,"line_start":35,"line_end":35,"column_start":1,"column_end":65}},{"value":"/ `shape < 1`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62300,"byte_end":62316,"line_start":36,"line_end":36,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62317,"byte_end":62320,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62321,"byte_end":62334,"line_start":38,"line_end":38,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62335,"byte_end":62338,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62339,"byte_end":62350,"line_start":40,"line_end":40,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{IndependentSample, Gamma};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62351,"byte_end":62407,"line_start":41,"line_end":41,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62408,"byte_end":62411,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ let gamma = Gamma::new(2.0, 5.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62412,"byte_end":62449,"line_start":43,"line_end":43,"column_start":1,"column_end":38}},{"value":"/ let v = gamma.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62450,"byte_end":62504,"line_start":44,"line_end":44,"column_start":1,"column_end":55}},{"value":"/ println!(\"{} is from a Gamma(2, 5) distribution\", v);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62505,"byte_end":62562,"line_start":45,"line_end":45,"column_start":1,"column_end":58}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62563,"byte_end":62570,"line_start":46,"line_end":46,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62571,"byte_end":62574,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ [1]: George Marsaglia and Wai Wan Tsang. 2000. \"A Simple Method","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62575,"byte_end":62642,"line_start":48,"line_end":48,"column_start":1,"column_end":68}},{"value":"/ for Generating Gamma Variables\" *ACM Trans. Math. Softw.* 26, 3","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62643,"byte_end":62710,"line_start":49,"line_end":49,"column_start":1,"column_end":68}},{"value":"/ (September 2000),","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62711,"byte_end":62732,"line_start":50,"line_end":50,"column_start":1,"column_end":22}},{"value":"/ 363-372. DOI:[10.1145/358407.358414](http://doi.acm.org/10.1145/358407.358414)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":62733,"byte_end":62815,"line_start":51,"line_end":51,"column_start":1,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":69},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64119,"byte_end":64122,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"new","qualname":"<Gamma>::new","value":"pub fn new(f64, f64) -> Gamma","parent":null,"children":[],"decl_id":null,"docs":" Construct an object representing the `Gamma(shape, scale)`\n distribution.","sig":null,"attributes":[{"value":"/ Construct an object representing the `Gamma(shape, scale)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":63953,"byte_end":64015,"line_start":96,"line_end":96,"column_start":5,"column_end":67}},{"value":"/ distribution.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64020,"byte_end":64037,"line_start":97,"line_end":97,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64042,"byte_end":64045,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Panics if `shape <= 0` or `scale <= 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64050,"byte_end":64093,"line_start":99,"line_end":99,"column_start":5,"column_end":48}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64098,"byte_end":64107,"line_start":100,"line_end":100,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":732},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67155,"byte_end":67165,"line_start":199,"line_end":199,"column_start":12,"column_end":22},"name":"ChiSquared","qualname":"::distributions::gamma::ChiSquared","value":"ChiSquared {  }","parent":null,"children":[{"krate":0,"index":733}],"decl_id":null,"docs":" The chi-squared distribution `χ²(k)`, where `k` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"/ The chi-squared distribution `χ²(k)`, where `k` is the degrees of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66561,"byte_end":66632,"line_start":181,"line_end":181,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66633,"byte_end":66645,"line_start":182,"line_end":182,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66646,"byte_end":66649,"line_start":183,"line_end":183,"column_start":1,"column_end":4}},{"value":"/ For `k > 0` integral, this distribution is the sum of the squares","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66650,"byte_end":66719,"line_start":184,"line_end":184,"column_start":1,"column_end":70}},{"value":"/ of `k` independent standard normal random variables. For other","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66720,"byte_end":66786,"line_start":185,"line_end":185,"column_start":1,"column_end":67}},{"value":"/ `k`, this uses the equivalent characterisation `χ²(k) = Gamma(k/2,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66787,"byte_end":66859,"line_start":186,"line_end":186,"column_start":1,"column_end":71}},{"value":"/ 2)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66860,"byte_end":66868,"line_start":187,"line_end":187,"column_start":1,"column_end":9}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66869,"byte_end":66872,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66873,"byte_end":66886,"line_start":189,"line_end":189,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66887,"byte_end":66890,"line_start":190,"line_end":190,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66891,"byte_end":66902,"line_start":191,"line_end":191,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{ChiSquared, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66903,"byte_end":66964,"line_start":192,"line_end":192,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66965,"byte_end":66968,"line_start":193,"line_end":193,"column_start":1,"column_end":4}},{"value":"/ let chi = ChiSquared::new(11.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":66969,"byte_end":67005,"line_start":194,"line_end":194,"column_start":1,"column_end":37}},{"value":"/ let v = chi.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67006,"byte_end":67058,"line_start":195,"line_end":195,"column_start":1,"column_end":53}},{"value":"/ println!(\"{} is from a χ²(11) distribution\", v)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67059,"byte_end":67112,"line_start":196,"line_end":196,"column_start":1,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67113,"byte_end":67120,"line_start":197,"line_end":197,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67624,"byte_end":67627,"line_start":215,"line_end":215,"column_start":12,"column_end":15},"name":"new","qualname":"<ChiSquared>::new","value":"pub fn new(f64) -> ChiSquared","parent":null,"children":[],"decl_id":null,"docs":" Create a new chi-squared distribution with degrees-of-freedom\n `k`. Panics if `k < 0`.\n","sig":null,"attributes":[{"value":"/ Create a new chi-squared distribution with degrees-of-freedom","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67515,"byte_end":67580,"line_start":213,"line_end":213,"column_start":5,"column_end":70}},{"value":"/ `k`. Panics if `k < 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67585,"byte_end":67612,"line_start":214,"line_end":214,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":746},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68878,"byte_end":68885,"line_start":257,"line_end":257,"column_start":12,"column_end":19},"name":"FisherF","qualname":"::distributions::gamma::FisherF","value":"FisherF {  }","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749}],"decl_id":null,"docs":" The Fisher F distribution `F(m, n)`.","sig":null,"attributes":[{"value":"/ The Fisher F distribution `F(m, n)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68402,"byte_end":68442,"line_start":241,"line_end":241,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68443,"byte_end":68446,"line_start":242,"line_end":242,"column_start":1,"column_end":4}},{"value":"/ This distribution is equivalent to the ratio of two normalised","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68447,"byte_end":68513,"line_start":243,"line_end":243,"column_start":1,"column_end":67}},{"value":"/ chi-squared distributions, that is, `F(m,n) = (χ²(m)/m) /","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68514,"byte_end":68577,"line_start":244,"line_end":244,"column_start":1,"column_end":62}},{"value":"/ (χ²(n)/n)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68578,"byte_end":68595,"line_start":245,"line_end":245,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68596,"byte_end":68599,"line_start":246,"line_end":246,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68600,"byte_end":68613,"line_start":247,"line_end":247,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68614,"byte_end":68617,"line_start":248,"line_end":248,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68618,"byte_end":68629,"line_start":249,"line_end":249,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{FisherF, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68630,"byte_end":68688,"line_start":250,"line_end":250,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68689,"byte_end":68692,"line_start":251,"line_end":251,"column_start":1,"column_end":4}},{"value":"/ let f = FisherF::new(2.0, 32.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68693,"byte_end":68729,"line_start":252,"line_end":252,"column_start":1,"column_end":37}},{"value":"/ let v = f.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68730,"byte_end":68780,"line_start":253,"line_end":253,"column_start":1,"column_end":51}},{"value":"/ println!(\"{} is from an F(2, 32) distribution\", v)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68781,"byte_end":68835,"line_start":254,"line_end":254,"column_start":1,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68836,"byte_end":68843,"line_start":255,"line_end":255,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69220,"byte_end":69223,"line_start":268,"line_end":268,"column_start":12,"column_end":15},"name":"new","qualname":"<FisherF>::new","value":"pub fn new(f64, f64) -> FisherF","parent":null,"children":[],"decl_id":null,"docs":" Create a new `FisherF` distribution, with the given\n parameter. Panics if either `m` or `n` are not positive.\n","sig":null,"attributes":[{"value":"/ Create a new `FisherF` distribution, with the given","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69088,"byte_end":69143,"line_start":266,"line_end":266,"column_start":5,"column_end":60}},{"value":"/ parameter. Panics if either `m` or `n` are not positive.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69148,"byte_end":69208,"line_start":267,"line_end":267,"column_start":5,"column_end":65}}]},{"kind":"Struct","id":{"krate":0,"index":753},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70177,"byte_end":70185,"line_start":301,"line_end":301,"column_start":12,"column_end":20},"name":"StudentT","qualname":"::distributions::gamma::StudentT","value":"StudentT {  }","parent":null,"children":[{"krate":0,"index":754},{"krate":0,"index":755}],"decl_id":null,"docs":" The Student t distribution, `t(nu)`, where `nu` is the degrees of\n freedom.","sig":null,"attributes":[{"value":"/ The Student t distribution, `t(nu)`, where `nu` is the degrees of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69819,"byte_end":69888,"line_start":288,"line_end":288,"column_start":1,"column_end":70}},{"value":"/ freedom.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69889,"byte_end":69901,"line_start":289,"line_end":289,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69902,"byte_end":69905,"line_start":290,"line_end":290,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69906,"byte_end":69919,"line_start":291,"line_end":291,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69920,"byte_end":69923,"line_start":292,"line_end":292,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69924,"byte_end":69935,"line_start":293,"line_end":293,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{StudentT, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69936,"byte_end":69995,"line_start":294,"line_end":294,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69996,"byte_end":69999,"line_start":295,"line_end":295,"column_start":1,"column_end":4}},{"value":"/ let t = StudentT::new(11.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70000,"byte_end":70032,"line_start":296,"line_end":296,"column_start":1,"column_end":33}},{"value":"/ let v = t.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70033,"byte_end":70083,"line_start":297,"line_end":297,"column_start":1,"column_end":51}},{"value":"/ println!(\"{} is from a t(11) distribution\", v)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70084,"byte_end":70134,"line_start":298,"line_end":298,"column_start":1,"column_end":51}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70135,"byte_end":70142,"line_start":299,"line_end":299,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":109},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70353,"byte_end":70356,"line_start":309,"line_end":309,"column_start":12,"column_end":15},"name":"new","qualname":"<StudentT>::new","value":"pub fn new(f64) -> StudentT","parent":null,"children":[],"decl_id":null,"docs":" Create a new Student t distribution with `n` degrees of\n freedom. Panics if `n <= 0`.\n","sig":null,"attributes":[{"value":"/ Create a new Student t distribution with `n` degrees of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70245,"byte_end":70304,"line_start":307,"line_end":307,"column_start":5,"column_end":64}},{"value":"/ freedom. Panics if `n <= 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70309,"byte_end":70341,"line_start":308,"line_end":308,"column_start":5,"column_end":37}}]},{"kind":"Mod","id":{"krate":0,"index":116},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"normal","qualname":"::distributions::normal","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","parent":null,"children":[{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120},{"krate":0,"index":1276},{"krate":0,"index":121},{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":759},{"krate":0,"index":763},{"krate":0,"index":762},{"krate":0,"index":126},{"krate":0,"index":765},{"krate":0,"index":769},{"krate":0,"index":768},{"krate":0,"index":132},{"krate":0,"index":134},{"krate":0,"index":137},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":773},{"krate":0,"index":140},{"krate":0,"index":142},{"krate":0,"index":145}],"decl_id":null,"docs":" The normal and derived distributions.\n","sig":null,"attributes":[{"value":"/ The normal and derived distributions.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":72752,"byte_end":72793,"line_start":11,"line_end":11,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":759},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73524,"byte_end":73538,"line_start":37,"line_end":37,"column_start":12,"column_end":26},"name":"StandardNormal","qualname":"::distributions::normal::StandardNormal","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around an `f64` to generate N(0, 1) random numbers\n (a.k.a.  a standard normal, or Gaussian).","sig":null,"attributes":[{"value":"/ A wrapper around an `f64` to generate N(0, 1) random numbers","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":72896,"byte_end":72960,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/ (a.k.a.  a standard normal, or Gaussian).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":72961,"byte_end":73006,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73007,"byte_end":73010,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ See `Normal` for the general normal distribution.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73011,"byte_end":73064,"line_start":19,"line_end":19,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73065,"byte_end":73068,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[1] of the Ziggurat method.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73069,"byte_end":73134,"line_start":21,"line_end":21,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73135,"byte_end":73138,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ [1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73139,"byte_end":73206,"line_start":23,"line_end":23,"column_start":1,"column_end":68}},{"value":"/ Generate Normal Random","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73207,"byte_end":73233,"line_start":24,"line_end":24,"column_start":1,"column_end":27}},{"value":"/ Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73234,"byte_end":73303,"line_start":25,"line_end":25,"column_start":1,"column_end":70}},{"value":"/ College, Oxford","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73304,"byte_end":73323,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73324,"byte_end":73327,"line_start":27,"line_end":27,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73328,"byte_end":73341,"line_start":28,"line_end":28,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73342,"byte_end":73345,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73346,"byte_end":73357,"line_start":30,"line_end":30,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::normal::StandardNormal;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73358,"byte_end":73410,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73411,"byte_end":73414,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ let StandardNormal(x) = rand::random();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73415,"byte_end":73458,"line_start":33,"line_end":33,"column_start":1,"column_end":44}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73459,"byte_end":73481,"line_start":34,"line_end":34,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73482,"byte_end":73489,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":761},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73539,"byte_end":73546,"line_start":37,"line_end":37,"column_start":27,"column_end":34},"name":"0","qualname":"::distributions::normal::StandardNormal::0","value":"f64","parent":{"krate":0,"index":759},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":765},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75210,"byte_end":75216,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"Normal","qualname":"::distributions::normal::Normal","value":"Normal {  }","parent":null,"children":[{"krate":0,"index":766},{"krate":0,"index":767}],"decl_id":null,"docs":" The normal distribution `N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The normal distribution `N(mean, std_dev**2)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74732,"byte_end":74782,"line_start":76,"line_end":76,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74783,"byte_end":74786,"line_start":77,"line_end":77,"column_start":1,"column_end":4}},{"value":"/ This uses the ZIGNOR variant of the Ziggurat method, see","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74787,"byte_end":74847,"line_start":78,"line_end":78,"column_start":1,"column_end":61}},{"value":"/ `StandardNormal` for more details.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74848,"byte_end":74886,"line_start":79,"line_end":79,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74887,"byte_end":74890,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74891,"byte_end":74904,"line_start":81,"line_end":81,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74905,"byte_end":74908,"line_start":82,"line_end":82,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74909,"byte_end":74920,"line_start":83,"line_end":83,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Normal, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74921,"byte_end":74978,"line_start":84,"line_end":84,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74979,"byte_end":74982,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ // mean 2, standard deviation 3","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":74983,"byte_end":75018,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/ let normal = Normal::new(2.0, 3.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75019,"byte_end":75058,"line_start":87,"line_end":87,"column_start":1,"column_end":40}},{"value":"/ let v = normal.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75059,"byte_end":75114,"line_start":88,"line_end":88,"column_start":1,"column_end":56}},{"value":"/ println!(\"{} is from a N(2, 9) distribution\", v)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75115,"byte_end":75167,"line_start":89,"line_end":89,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75168,"byte_end":75175,"line_start":90,"line_end":90,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75458,"byte_end":75461,"line_start":105,"line_end":105,"column_start":12,"column_end":15},"name":"new","qualname":"<Normal>::new","value":"pub fn new(f64, f64) -> Normal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Normal` distribution with the given mean and\n standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `Normal` distribution with the given mean and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75273,"byte_end":75338,"line_start":98,"line_end":98,"column_start":5,"column_end":70}},{"value":"/ standard deviation.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75343,"byte_end":75366,"line_start":99,"line_end":99,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75371,"byte_end":75374,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75379,"byte_end":75391,"line_start":101,"line_end":101,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75396,"byte_end":75399,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75404,"byte_end":75432,"line_start":103,"line_end":103,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75437,"byte_end":75446,"line_start":104,"line_end":104,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":771},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76471,"byte_end":76480,"line_start":140,"line_end":140,"column_start":12,"column_end":21},"name":"LogNormal","qualname":"::distributions::normal::LogNormal","value":"LogNormal {  }","parent":null,"children":[{"krate":0,"index":772}],"decl_id":null,"docs":" The log-normal distribution `ln N(mean, std_dev**2)`.","sig":null,"attributes":[{"value":"/ The log-normal distribution `ln N(mean, std_dev**2)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75975,"byte_end":76032,"line_start":124,"line_end":124,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76033,"byte_end":76036,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/ If `X` is log-normal distributed, then `ln(X)` is `N(mean,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76037,"byte_end":76099,"line_start":126,"line_end":126,"column_start":1,"column_end":63}},{"value":"/ std_dev**2)` distributed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76100,"byte_end":76129,"line_start":127,"line_end":127,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76130,"byte_end":76133,"line_start":128,"line_end":128,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76134,"byte_end":76147,"line_start":129,"line_end":129,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76148,"byte_end":76151,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76152,"byte_end":76163,"line_start":131,"line_end":131,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{LogNormal, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76164,"byte_end":76224,"line_start":132,"line_end":132,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76225,"byte_end":76228,"line_start":133,"line_end":133,"column_start":1,"column_end":4}},{"value":"/ // mean 2, standard deviation 3","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76229,"byte_end":76264,"line_start":134,"line_end":134,"column_start":1,"column_end":36}},{"value":"/ let log_normal = LogNormal::new(2.0, 3.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76265,"byte_end":76311,"line_start":135,"line_end":135,"column_start":1,"column_end":47}},{"value":"/ let v = log_normal.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76312,"byte_end":76371,"line_start":136,"line_end":136,"column_start":1,"column_end":60}},{"value":"/ println!(\"{} is from an ln N(2, 9) distribution\", v)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76372,"byte_end":76428,"line_start":137,"line_end":137,"column_start":1,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76429,"byte_end":76436,"line_start":138,"line_end":138,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76712,"byte_end":76715,"line_start":152,"line_end":152,"column_start":12,"column_end":15},"name":"new","qualname":"<LogNormal>::new","value":"pub fn new(f64, f64) -> LogNormal","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `LogNormal` distribution with the given mean\n and standard deviation.","sig":null,"attributes":[{"value":"/ Construct a new `LogNormal` distribution with the given mean","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76524,"byte_end":76588,"line_start":145,"line_end":145,"column_start":5,"column_end":69}},{"value":"/ and standard deviation.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76593,"byte_end":76620,"line_start":146,"line_end":146,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76625,"byte_end":76628,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76633,"byte_end":76645,"line_start":148,"line_end":148,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76650,"byte_end":76653,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ Panics if `std_dev < 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76658,"byte_end":76686,"line_start":150,"line_end":150,"column_start":5,"column_end":33}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76691,"byte_end":76700,"line_start":151,"line_end":151,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":148},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"exponential","qualname":"::distributions::exponential","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","parent":null,"children":[{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":776},{"krate":0,"index":780},{"krate":0,"index":779},{"krate":0,"index":157},{"krate":0,"index":782},{"krate":0,"index":785},{"krate":0,"index":784},{"krate":0,"index":163},{"krate":0,"index":165},{"krate":0,"index":168}],"decl_id":null,"docs":" The exponential distribution.\n","sig":null,"attributes":[{"value":"/ The exponential distribution.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78444,"byte_end":78477,"line_start":11,"line_end":11,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":776},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79264,"byte_end":79268,"line_start":38,"line_end":38,"column_start":12,"column_end":16},"name":"Exp1","qualname":"::distributions::exponential::Exp1","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper around an `f64` to generate Exp(1) random numbers.","sig":null,"attributes":[{"value":"/ A wrapper around an `f64` to generate Exp(1) random numbers.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78572,"byte_end":78636,"line_start":16,"line_end":16,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78637,"byte_end":78640,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See `Exp` for the general exponential distribution.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78641,"byte_end":78696,"line_start":18,"line_end":18,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78697,"byte_end":78700,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ Implemented via the ZIGNOR variant[1] of the Ziggurat method. The","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78701,"byte_end":78770,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/ exact description in the paper was adjusted to use tables for the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78771,"byte_end":78840,"line_start":21,"line_end":21,"column_start":1,"column_end":70}},{"value":"/ exponential distribution rather than normal.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78841,"byte_end":78889,"line_start":22,"line_end":22,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78890,"byte_end":78893,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ [1]: Jurgen A. Doornik (2005). [*An Improved Ziggurat Method to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78894,"byte_end":78961,"line_start":24,"line_end":24,"column_start":1,"column_end":68}},{"value":"/ Generate Normal Random","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78962,"byte_end":78988,"line_start":25,"line_end":25,"column_start":1,"column_end":27}},{"value":"/ Samples*](http://www.doornik.com/research/ziggurat.pdf). Nuffield","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":78989,"byte_end":79058,"line_start":26,"line_end":26,"column_start":1,"column_end":70}},{"value":"/ College, Oxford","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79059,"byte_end":79078,"line_start":27,"line_end":27,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79079,"byte_end":79082,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79083,"byte_end":79096,"line_start":29,"line_end":29,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79097,"byte_end":79100,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79101,"byte_end":79112,"line_start":31,"line_end":31,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::exponential::Exp1;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79113,"byte_end":79160,"line_start":32,"line_end":32,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79161,"byte_end":79164,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ let Exp1(x) = rand::random();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79165,"byte_end":79198,"line_start":34,"line_end":34,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79199,"byte_end":79221,"line_start":35,"line_end":35,"column_start":1,"column_end":23}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79222,"byte_end":79229,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":778},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79269,"byte_end":79276,"line_start":38,"line_end":38,"column_start":17,"column_end":24},"name":"0","qualname":"::distributions::exponential::Exp1::0","value":"f64","parent":{"krate":0,"index":776},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":782},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80264,"byte_end":80267,"line_start":75,"line_end":75,"column_start":12,"column_end":15},"name":"Exp","qualname":"::distributions::exponential::Exp","value":"Exp {  }","parent":null,"children":[{"krate":0,"index":783}],"decl_id":null,"docs":" The exponential distribution `Exp(lambda)`.","sig":null,"attributes":[{"value":"/ The exponential distribution `Exp(lambda)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79846,"byte_end":79893,"line_start":60,"line_end":60,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79894,"byte_end":79897,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ This distribution has density function: `f(x) = lambda *","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79898,"byte_end":79958,"line_start":62,"line_end":62,"column_start":1,"column_end":61}},{"value":"/ exp(-lambda * x)` for `x > 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79959,"byte_end":79993,"line_start":63,"line_end":63,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79994,"byte_end":79997,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79998,"byte_end":80011,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80012,"byte_end":80015,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80016,"byte_end":80027,"line_start":67,"line_end":67,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Exp, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80028,"byte_end":80082,"line_start":68,"line_end":68,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80083,"byte_end":80086,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ let exp = Exp::new(2.0);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80087,"byte_end":80115,"line_start":70,"line_end":70,"column_start":1,"column_end":29}},{"value":"/ let v = exp.ind_sample(&mut rand::thread_rng());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80116,"byte_end":80168,"line_start":71,"line_end":71,"column_start":1,"column_end":53}},{"value":"/ println!(\"{} is from a Exp(2) distribution\", v);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80169,"byte_end":80221,"line_start":72,"line_end":72,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80222,"byte_end":80229,"line_start":73,"line_end":73,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":164},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80508,"byte_end":80511,"line_start":84,"line_end":84,"column_start":12,"column_end":15},"name":"new","qualname":"<Exp>::new","value":"pub fn new(f64) -> Exp","parent":null,"children":[],"decl_id":null,"docs":" Construct a new `Exp` with the given shape parameter\n `lambda`. Panics if `lambda <= 0`.\n","sig":null,"attributes":[{"value":"/ Construct a new `Exp` with the given shape parameter","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80383,"byte_end":80439,"line_start":81,"line_end":81,"column_start":5,"column_end":61}},{"value":"/ `lambda`. Panics if `lambda <= 0`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80444,"byte_end":80482,"line_start":82,"line_end":82,"column_start":5,"column_end":43}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80487,"byte_end":80496,"line_start":83,"line_end":83,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":171},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40155,"byte_end":40161,"line_start":35,"line_end":35,"column_start":11,"column_end":17},"name":"Sample","qualname":"::distributions::Sample","value":"Sample<Support>","parent":null,"children":[{"krate":0,"index":173}],"decl_id":null,"docs":" Types that can be used to create a random instance of `Support`.\n","sig":null,"attributes":[{"value":"/ Types that can be used to create a random instance of `Support`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40076,"byte_end":40144,"line_start":34,"line_end":34,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":173},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40275,"byte_end":40281,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"sample","qualname":"::distributions::Sample::sample","value":"pub fn sample<R: Rng>(&mut Self, &mut R) -> Support","parent":{"krate":0,"index":171},"children":[],"decl_id":null,"docs":" Generate a random value of `Support`, using `rng` as the\n source of randomness.\n","sig":null,"attributes":[{"value":"/ Generate a random value of `Support`, using `rng` as the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40177,"byte_end":40237,"line_start":36,"line_end":36,"column_start":5,"column_end":65}},{"value":"/ source of randomness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40242,"byte_end":40267,"line_start":37,"line_end":37,"column_start":5,"column_end":30}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40747,"byte_end":40764,"line_start":49,"line_end":49,"column_start":11,"column_end":28},"name":"IndependentSample","qualname":"::distributions::IndependentSample","value":"IndependentSample<Support>: Sample<Support>","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" `Sample`s that do not require keeping track of state.","sig":null,"attributes":[{"value":"/ `Sample`s that do not require keeping track of state.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40329,"byte_end":40386,"line_start":41,"line_end":41,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40387,"byte_end":40390,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ Since no state is recorded, each sample is (statistically)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40391,"byte_end":40453,"line_start":43,"line_end":43,"column_start":1,"column_end":63}},{"value":"/ independent of all others, assuming the `Rng` used has this","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40454,"byte_end":40517,"line_start":44,"line_end":44,"column_start":1,"column_end":64}},{"value":"/ property.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40518,"byte_end":40531,"line_start":45,"line_end":45,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40833,"byte_end":40843,"line_start":51,"line_end":51,"column_start":8,"column_end":18},"name":"ind_sample","qualname":"::distributions::IndependentSample::ind_sample","value":"pub fn ind_sample<R: Rng>(&Self, &mut R) -> Support","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Generate a random value.\n","sig":null,"attributes":[{"value":"/ Generate a random value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40797,"byte_end":40825,"line_start":50,"line_end":50,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":179},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41001,"byte_end":41011,"line_start":56,"line_end":56,"column_start":12,"column_end":22},"name":"RandSample","qualname":"::distributions::RandSample","value":"RandSample {  }","parent":null,"children":[{"krate":0,"index":181}],"decl_id":null,"docs":" A wrapper for generating types that implement `Rand` via the\n `Sample` & `IndependentSample` traits.\n","sig":null,"attributes":[{"value":"/ A wrapper for generating types that implement `Rand` via the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40882,"byte_end":40946,"line_start":54,"line_end":54,"column_start":1,"column_end":65}},{"value":"/ `Sample` & `IndependentSample` traits.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40947,"byte_end":40989,"line_start":55,"line_end":55,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":197},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41499,"byte_end":41502,"line_start":76,"line_end":76,"column_start":12,"column_end":15},"name":"new","qualname":"<RandSample<Sup>>::new","value":"pub fn new() -> RandSample<Sup>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":787},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41699,"byte_end":41707,"line_start":84,"line_end":84,"column_start":12,"column_end":20},"name":"Weighted","qualname":"::distributions::Weighted","value":"Weighted { weight, item }","parent":null,"children":[{"krate":0,"index":789},{"krate":0,"index":790}],"decl_id":null,"docs":" A value with a particular weight for use with `WeightedChoice`.\n","sig":null,"attributes":[{"value":"/ A value with a particular weight for use with `WeightedChoice`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41587,"byte_end":41654,"line_start":81,"line_end":81,"column_start":1,"column_end":68}}]},{"kind":"Field","id":{"krate":0,"index":789},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41763,"byte_end":41769,"line_start":86,"line_end":86,"column_start":9,"column_end":15},"name":"weight","qualname":"::distributions::Weighted::weight","value":"u32","parent":{"krate":0,"index":787},"children":[],"decl_id":null,"docs":" The numerical weight of this item\n","sig":null,"attributes":[{"value":"/ The numerical weight of this item","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41717,"byte_end":41754,"line_start":85,"line_end":85,"column_start":5,"column_end":42}}]},{"kind":"Field","id":{"krate":0,"index":790},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41832,"byte_end":41836,"line_start":88,"line_end":88,"column_start":9,"column_end":13},"name":"item","qualname":"::distributions::Weighted::item","value":"T","parent":{"krate":0,"index":787},"children":[],"decl_id":null,"docs":" The actual item which is being weighted\n","sig":null,"attributes":[{"value":"/ The actual item which is being weighted","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41780,"byte_end":41823,"line_start":87,"line_end":87,"column_start":5,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":198},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42813,"byte_end":42827,"line_start":116,"line_end":116,"column_start":12,"column_end":26},"name":"WeightedChoice","qualname":"::distributions::WeightedChoice","value":"WeightedChoice {  }","parent":null,"children":[{"krate":0,"index":201},{"krate":0,"index":202}],"decl_id":null,"docs":" A distribution that selects from a finite collection of weighted items.","sig":null,"attributes":[{"value":"/ A distribution that selects from a finite collection of weighted items.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41844,"byte_end":41919,"line_start":91,"line_end":91,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41920,"byte_end":41923,"line_start":92,"line_end":92,"column_start":1,"column_end":4}},{"value":"/ Each item has an associated weight that influences how likely it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41924,"byte_end":41992,"line_start":93,"line_end":93,"column_start":1,"column_end":69}},{"value":"/ is to be chosen: higher weight is more likely.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41993,"byte_end":42043,"line_start":94,"line_end":94,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42044,"byte_end":42047,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ The `Clone` restriction is a limitation of the `Sample` and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42048,"byte_end":42111,"line_start":96,"line_end":96,"column_start":1,"column_end":64}},{"value":"/ `IndependentSample` traits. Note that `&T` is (cheaply) `Clone` for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42112,"byte_end":42183,"line_start":97,"line_end":97,"column_start":1,"column_end":72}},{"value":"/ all `T`, as is `u32`, so one can store references or indices into","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42184,"byte_end":42253,"line_start":98,"line_end":98,"column_start":1,"column_end":70}},{"value":"/ another vector.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42254,"byte_end":42273,"line_start":99,"line_end":99,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42274,"byte_end":42277,"line_start":100,"line_end":100,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42278,"byte_end":42291,"line_start":101,"line_end":101,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42292,"byte_end":42295,"line_start":102,"line_end":102,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42296,"byte_end":42307,"line_start":103,"line_end":103,"column_start":1,"column_end":12}},{"value":"/ use rand::distributions::{Weighted, WeightedChoice, IndependentSample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42308,"byte_end":42383,"line_start":104,"line_end":104,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42384,"byte_end":42387,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ let mut items = vec!(Weighted { weight: 2, item: 'a' },","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42388,"byte_end":42447,"line_start":106,"line_end":106,"column_start":1,"column_end":60}},{"value":"/                      Weighted { weight: 4, item: 'b' },","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42448,"byte_end":42507,"line_start":107,"line_end":107,"column_start":1,"column_end":60}},{"value":"/                      Weighted { weight: 1, item: 'c' });","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42508,"byte_end":42568,"line_start":108,"line_end":108,"column_start":1,"column_end":61}},{"value":"/ let wc = WeightedChoice::new(&mut items);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42569,"byte_end":42614,"line_start":109,"line_end":109,"column_start":1,"column_end":46}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42615,"byte_end":42652,"line_start":110,"line_end":110,"column_start":1,"column_end":38}},{"value":"/ for _ in 0..16 {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42653,"byte_end":42673,"line_start":111,"line_end":111,"column_start":1,"column_end":21}},{"value":"/      // on average prints 'a' 4 times, 'b' 8 and 'c' twice.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42674,"byte_end":42737,"line_start":112,"line_end":112,"column_start":1,"column_end":64}},{"value":"/      println!(\"{}\", wc.ind_sample(&mut rng));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42738,"byte_end":42787,"line_start":113,"line_end":113,"column_start":1,"column_end":50}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42788,"byte_end":42793,"line_start":114,"line_end":114,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42794,"byte_end":42801,"line_start":115,"line_end":115,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":206},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":43144,"byte_end":43147,"line_start":128,"line_end":128,"column_start":12,"column_end":15},"name":"new","qualname":"<WeightedChoice>::new","value":"pub fn new(&'a mut [Weighted<T>]) -> WeightedChoice","parent":null,"children":[],"decl_id":null,"docs":" Create a new `WeightedChoice`.","sig":null,"attributes":[{"value":"/ Create a new `WeightedChoice`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42953,"byte_end":42987,"line_start":122,"line_end":122,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42992,"byte_end":42995,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ Panics if:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":43000,"byte_end":43014,"line_start":124,"line_end":124,"column_start":5,"column_end":19}},{"value":"/ - `v` is empty","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":43019,"byte_end":43037,"line_start":125,"line_end":125,"column_start":5,"column_end":23}},{"value":"/ - the total weight is 0","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":43042,"byte_end":43069,"line_start":126,"line_end":126,"column_start":5,"column_end":32}},{"value":"/ - the total weight is larger than a `u32` can contain.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":43074,"byte_end":43132,"line_start":127,"line_end":127,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":235},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"isaac","qualname":"::isaac","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":1302},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242},{"krate":0,"index":243},{"krate":0,"index":244},{"krate":0,"index":245},{"krate":0,"index":246},{"krate":0,"index":247},{"krate":0,"index":796},{"krate":0,"index":805},{"krate":0,"index":248},{"krate":0,"index":251},{"krate":0,"index":263},{"krate":0,"index":265},{"krate":0,"index":267},{"krate":0,"index":272},{"krate":0,"index":275},{"krate":0,"index":276},{"krate":0,"index":808},{"krate":0,"index":817},{"krate":0,"index":277},{"krate":0,"index":280},{"krate":0,"index":295},{"krate":0,"index":297},{"krate":0,"index":300},{"krate":0,"index":305}],"decl_id":null,"docs":" The ISAAC random number generator.\n","sig":null,"attributes":[{"value":"/ The ISAAC random number generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":106752,"byte_end":106790,"line_start":11,"line_end":11,"column_start":1,"column_end":39}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":106792,"byte_end":106823,"line_start":13,"line_end":13,"column_start":1,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":796},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107549,"byte_end":107557,"line_start":35,"line_end":35,"column_start":12,"column_end":20},"name":"IsaacRng","qualname":"::isaac::IsaacRng","value":"IsaacRng {  }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":800},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804}],"decl_id":null,"docs":" A random number generator that uses the ISAAC algorithm[1].","sig":null,"attributes":[{"value":"/ A random number generator that uses the ISAAC algorithm[1].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107062,"byte_end":107125,"line_start":25,"line_end":25,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107126,"byte_end":107129,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ The ISAAC algorithm is generally accepted as suitable for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107130,"byte_end":107191,"line_start":27,"line_end":27,"column_start":1,"column_end":62}},{"value":"/ cryptographic purposes, but this implementation has not be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107192,"byte_end":107254,"line_start":28,"line_end":28,"column_start":1,"column_end":63}},{"value":"/ verified as such. Prefer a generator like `OsRng` that defers to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107255,"byte_end":107323,"line_start":29,"line_end":29,"column_start":1,"column_end":69}},{"value":"/ the operating system for cases that need high security.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107324,"byte_end":107383,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107384,"byte_end":107387,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107388,"byte_end":107453,"line_start":32,"line_end":32,"column_start":1,"column_end":66}},{"value":"/ generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107454,"byte_end":107521,"line_start":33,"line_end":33,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107944,"byte_end":107956,"line_start":55,"line_end":55,"column_start":12,"column_end":24},"name":"new_unseeded","qualname":"<IsaacRng>::new_unseeded","value":"pub fn new_unseeded() -> IsaacRng","parent":null,"children":[],"decl_id":null,"docs":" Create an ISAAC random number generator using the default\n fixed seed.\n","sig":null,"attributes":[{"value":"/ Create an ISAAC random number generator using the default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107851,"byte_end":107912,"line_start":53,"line_end":53,"column_start":5,"column_end":66}},{"value":"/ fixed seed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107917,"byte_end":107932,"line_start":54,"line_end":54,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":808},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114881,"byte_end":114891,"line_start":277,"line_end":277,"column_start":12,"column_end":22},"name":"Isaac64Rng","qualname":"::isaac::Isaac64Rng","value":"Isaac64Rng {  }","parent":null,"children":[{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":815},{"krate":0,"index":816}],"decl_id":null,"docs":" A random number generator that uses ISAAC-64[1], the 64-bit\n variant of the ISAAC algorithm.","sig":null,"attributes":[{"value":"/ A random number generator that uses ISAAC-64[1], the 64-bit","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114358,"byte_end":114421,"line_start":266,"line_end":266,"column_start":1,"column_end":64}},{"value":"/ variant of the ISAAC algorithm.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114422,"byte_end":114457,"line_start":267,"line_end":267,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114458,"byte_end":114461,"line_start":268,"line_end":268,"column_start":1,"column_end":4}},{"value":"/ The ISAAC algorithm is generally accepted as suitable for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114462,"byte_end":114523,"line_start":269,"line_end":269,"column_start":1,"column_end":62}},{"value":"/ cryptographic purposes, but this implementation has not be","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114524,"byte_end":114586,"line_start":270,"line_end":270,"column_start":1,"column_end":63}},{"value":"/ verified as such. Prefer a generator like `OsRng` that defers to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114587,"byte_end":114655,"line_start":271,"line_end":271,"column_start":1,"column_end":69}},{"value":"/ the operating system for cases that need high security.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114656,"byte_end":114715,"line_start":272,"line_end":272,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114716,"byte_end":114719,"line_start":273,"line_end":273,"column_start":1,"column_end":4}},{"value":"/ [1]: Bob Jenkins, [*ISAAC: A fast cryptographic random number","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114720,"byte_end":114785,"line_start":274,"line_end":274,"column_start":1,"column_end":66}},{"value":"/ generator*](http://www.burtleburtle.net/bob/rand/isaacafa.html)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":114786,"byte_end":114853,"line_start":275,"line_end":275,"column_start":1,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":281},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":115282,"byte_end":115294,"line_start":296,"line_end":296,"column_start":12,"column_end":24},"name":"new_unseeded","qualname":"<Isaac64Rng>::new_unseeded","value":"pub fn new_unseeded() -> Isaac64Rng","parent":null,"children":[],"decl_id":null,"docs":" Create a 64-bit ISAAC random number generator using the\n default fixed seed.\n","sig":null,"attributes":[{"value":"/ Create a 64-bit ISAAC random number generator using the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":115183,"byte_end":115242,"line_start":294,"line_end":294,"column_start":5,"column_end":64}},{"value":"/ default fixed seed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":115247,"byte_end":115270,"line_start":295,"line_end":295,"column_start":5,"column_end":28}}]},{"kind":"Mod","id":{"krate":0,"index":308},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"chacha","qualname":"::chacha","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","parent":null,"children":[{"krate":0,"index":309},{"krate":0,"index":1314},{"krate":0,"index":310},{"krate":0,"index":311},{"krate":0,"index":312},{"krate":0,"index":313},{"krate":0,"index":314},{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":317},{"krate":0,"index":820},{"krate":0,"index":830},{"krate":0,"index":826},{"krate":0,"index":318},{"krate":0,"index":323},{"krate":0,"index":326},{"krate":0,"index":333},{"krate":0,"index":335},{"krate":0,"index":340}],"decl_id":null,"docs":" The ChaCha random number generator.\n","sig":null,"attributes":[{"value":"/ The ChaCha random number generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127377,"byte_end":127416,"line_start":11,"line_end":11,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":820},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":128130,"byte_end":128139,"line_start":30,"line_end":30,"column_start":12,"column_end":21},"name":"ChaChaRng","qualname":"::chacha::ChaChaRng","value":"ChaChaRng {  }","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":823},{"krate":0,"index":825}],"decl_id":null,"docs":" A random number generator that uses the ChaCha20 algorithm [1].","sig":null,"attributes":[{"value":"/ A random number generator that uses the ChaCha20 algorithm [1].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127674,"byte_end":127741,"line_start":20,"line_end":20,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127742,"byte_end":127745,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ The ChaCha algorithm is widely accepted as suitable for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127746,"byte_end":127805,"line_start":22,"line_end":22,"column_start":1,"column_end":60}},{"value":"/ cryptographic purposes, but this implementation has not been","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127806,"byte_end":127870,"line_start":23,"line_end":23,"column_start":1,"column_end":65}},{"value":"/ verified as such. Prefer a generator like `OsRng` that defers to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127871,"byte_end":127939,"line_start":24,"line_end":24,"column_start":1,"column_end":69}},{"value":"/ the operating system for cases that need high security.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":127940,"byte_end":127999,"line_start":25,"line_end":25,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":128000,"byte_end":128003,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ [1]: D. J. Bernstein, [*ChaCha, a variant of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":128004,"byte_end":128052,"line_start":27,"line_end":27,"column_start":1,"column_end":49}},{"value":"/ Salsa20*](http://cr.yp.to/chacha.html)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":128053,"byte_end":128095,"line_start":28,"line_end":28,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130230,"byte_end":130242,"line_start":101,"line_end":101,"column_start":12,"column_end":24},"name":"new_unseeded","qualname":"<ChaChaRng>::new_unseeded","value":"pub fn new_unseeded() -> ChaChaRng","parent":null,"children":[],"decl_id":null,"docs":" Create an ChaCha random number generator using the default\n fixed key of 8 zero words.","sig":null,"attributes":[{"value":"/ Create an ChaCha random number generator using the default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129639,"byte_end":129701,"line_start":82,"line_end":82,"column_start":5,"column_end":67}},{"value":"/ fixed key of 8 zero words.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129706,"byte_end":129736,"line_start":83,"line_end":83,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129741,"byte_end":129744,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129749,"byte_end":129763,"line_start":85,"line_end":85,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129768,"byte_end":129771,"line_start":86,"line_end":86,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129776,"byte_end":129787,"line_start":87,"line_end":87,"column_start":5,"column_end":16}},{"value":"/ use rand::{Rng, ChaChaRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129792,"byte_end":129823,"line_start":88,"line_end":88,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129828,"byte_end":129831,"line_start":89,"line_end":89,"column_start":5,"column_end":8}},{"value":"/ let mut ra = ChaChaRng::new_unseeded();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129836,"byte_end":129879,"line_start":90,"line_end":90,"column_start":5,"column_end":48}},{"value":"/ println!(\"{:?}\", ra.next_u32());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129884,"byte_end":129920,"line_start":91,"line_end":91,"column_start":5,"column_end":41}},{"value":"/ println!(\"{:?}\", ra.next_u32());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129925,"byte_end":129961,"line_start":92,"line_end":92,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129966,"byte_end":129973,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129978,"byte_end":129981,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ Since this equivalent to a RNG with a fixed seed, repeated executions","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129986,"byte_end":130059,"line_start":95,"line_end":95,"column_start":5,"column_end":78}},{"value":"/ of an unseeded RNG will produce the same result. This code sample will","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130064,"byte_end":130138,"line_start":96,"line_end":96,"column_start":5,"column_end":79}},{"value":"/ consistently produce:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130143,"byte_end":130168,"line_start":97,"line_end":97,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130173,"byte_end":130176,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ - 2917185654","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130181,"byte_end":130197,"line_start":99,"line_end":99,"column_start":5,"column_end":21}},{"value":"/ - 2419978656","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130202,"byte_end":130218,"line_start":100,"line_end":100,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":131076,"byte_end":131087,"line_start":126,"line_end":126,"column_start":12,"column_end":23},"name":"set_counter","qualname":"<ChaChaRng>::set_counter","value":"pub fn set_counter(&mut Self, u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Sets the internal 128-bit ChaCha counter to\n a user-provided value. This permits jumping\n arbitrarily ahead (or backwards) in the pseudorandom stream.","sig":null,"attributes":[{"value":"/ Sets the internal 128-bit ChaCha counter to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130347,"byte_end":130394,"line_start":107,"line_end":107,"column_start":5,"column_end":52}},{"value":"/ a user-provided value. This permits jumping","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130399,"byte_end":130446,"line_start":108,"line_end":108,"column_start":5,"column_end":52}},{"value":"/ arbitrarily ahead (or backwards) in the pseudorandom stream.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130451,"byte_end":130515,"line_start":109,"line_end":109,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130520,"byte_end":130523,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ Since the nonce words are used to extend the counter to 128 bits,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130528,"byte_end":130597,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/ users wishing to obtain the conventional ChaCha pseudorandom stream","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130602,"byte_end":130673,"line_start":112,"line_end":112,"column_start":5,"column_end":76}},{"value":"/ associated with a particular nonce can call this function with","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130678,"byte_end":130744,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/ arguments `0, desired_nonce`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130749,"byte_end":130782,"line_start":114,"line_end":114,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130787,"byte_end":130790,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130795,"byte_end":130809,"line_start":116,"line_end":116,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130814,"byte_end":130817,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130822,"byte_end":130833,"line_start":118,"line_end":118,"column_start":5,"column_end":16}},{"value":"/ use rand::{Rng, ChaChaRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130838,"byte_end":130869,"line_start":119,"line_end":119,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130874,"byte_end":130877,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ let mut ra = ChaChaRng::new_unseeded();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130882,"byte_end":130925,"line_start":121,"line_end":121,"column_start":5,"column_end":48}},{"value":"/ ra.set_counter(0u64, 1234567890u64);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130930,"byte_end":130970,"line_start":122,"line_end":122,"column_start":5,"column_end":45}},{"value":"/ println!(\"{:?}\", ra.next_u32());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":130975,"byte_end":131011,"line_start":123,"line_end":123,"column_start":5,"column_end":41}},{"value":"/ println!(\"{:?}\", ra.next_u32());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":131016,"byte_end":131052,"line_start":124,"line_end":124,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":131057,"byte_end":131064,"line_start":125,"line_end":125,"column_start":5,"column_end":12}}]},{"kind":"Mod","id":{"krate":0,"index":345},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"reseeding","qualname":"::reseeding","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","parent":null,"children":[{"krate":0,"index":346},{"krate":0,"index":1324},{"krate":0,"index":347},{"krate":0,"index":348},{"krate":0,"index":349},{"krate":0,"index":350},{"krate":0,"index":351},{"krate":0,"index":358},{"krate":0,"index":363},{"krate":0,"index":369},{"krate":0,"index":375},{"krate":0,"index":831},{"krate":0,"index":834},{"krate":0,"index":833},{"krate":0,"index":378},{"krate":0,"index":381}],"decl_id":null,"docs":" A wrapper around another RNG that reseeds it after it\n generates a certain number of random bytes.\n","sig":null,"attributes":[{"value":"/ A wrapper around another RNG that reseeds it after it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138106,"byte_end":138163,"line_start":11,"line_end":11,"column_start":1,"column_end":58}},{"value":"/ generates a certain number of random bytes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138164,"byte_end":138211,"line_start":12,"line_end":12,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":351},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138551,"byte_end":138563,"line_start":24,"line_end":24,"column_start":12,"column_end":24},"name":"ReseedingRng","qualname":"::reseeding::ReseedingRng","value":"ReseedingRng { reseeder }","parent":null,"children":[{"krate":0,"index":354},{"krate":0,"index":355},{"krate":0,"index":356},{"krate":0,"index":357}],"decl_id":null,"docs":" A wrapper around any RNG which reseeds the underlying RNG after it\n has generated a certain number of random bytes.\n","sig":null,"attributes":[{"value":"/ A wrapper around any RNG which reseeds the underlying RNG after it","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138417,"byte_end":138487,"line_start":22,"line_end":22,"column_start":1,"column_end":71}},{"value":"/ has generated a certain number of random bytes.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138488,"byte_end":138539,"line_start":23,"line_end":23,"column_start":1,"column_end":52}}]},{"kind":"Field","id":{"krate":0,"index":357},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138707,"byte_end":138715,"line_start":29,"line_end":29,"column_start":9,"column_end":17},"name":"reseeder","qualname":"::reseeding::ReseedingRng::reseeder","value":"Rsdr","parent":{"krate":0,"index":351},"children":[],"decl_id":null,"docs":" Controls the behaviour when reseeding the RNG.\n","sig":null,"attributes":[{"value":"/ Controls the behaviour when reseeding the RNG.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138648,"byte_end":138698,"line_start":28,"line_end":28,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":361},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139089,"byte_end":139092,"line_start":40,"line_end":40,"column_start":12,"column_end":15},"name":"new","qualname":"<ReseedingRng<R, Rsdr>>::new","value":"pub fn new(R, u64, Rsdr) -> ReseedingRng<R, Rsdr>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReseedingRng` with the given parameters.","sig":null,"attributes":[{"value":"/ Create a new `ReseedingRng` with the given parameters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138786,"byte_end":138844,"line_start":33,"line_end":33,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138849,"byte_end":138852,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ # Arguments","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138857,"byte_end":138872,"line_start":35,"line_end":35,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138877,"byte_end":138880,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ * `rng`: the random number generator to use.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138885,"byte_end":138933,"line_start":37,"line_end":37,"column_start":5,"column_end":53}},{"value":"/ * `generation_threshold`: the number of bytes of entropy at which to reseed the RNG.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138938,"byte_end":139026,"line_start":38,"line_end":38,"column_start":5,"column_end":93}},{"value":"/ * `reseeder`: the reseeding object to use.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139031,"byte_end":139077,"line_start":39,"line_end":39,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":362},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139472,"byte_end":139491,"line_start":51,"line_end":51,"column_start":12,"column_end":31},"name":"reseed_if_necessary","qualname":"<ReseedingRng<R, Rsdr>>::reseed_if_necessary","value":"pub fn reseed_if_necessary(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reseed the internal RNG if the number of bytes that have been\n generated exceed the threshold.\n","sig":null,"attributes":[{"value":"/ Reseed the internal RNG if the number of bytes that have been","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139355,"byte_end":139420,"line_start":49,"line_end":49,"column_start":5,"column_end":70}},{"value":"/ generated exceed the threshold.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139425,"byte_end":139460,"line_start":50,"line_end":50,"column_start":5,"column_end":40}}]},{"kind":"Trait","id":{"krate":0,"index":375},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141723,"byte_end":141731,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"name":"Reseeder","qualname":"::reseeding::Reseeder","value":"Reseeder<R>","parent":null,"children":[{"krate":0,"index":377}],"decl_id":null,"docs":" Something that can be used to reseed an RNG via `ReseedingRng`.","sig":null,"attributes":[{"value":"/ Something that can be used to reseed an RNG via `ReseedingRng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140880,"byte_end":140947,"line_start":100,"line_end":100,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140948,"byte_end":140951,"line_start":101,"line_end":101,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140952,"byte_end":140965,"line_start":102,"line_end":102,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140966,"byte_end":140969,"line_start":103,"line_end":103,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140970,"byte_end":140981,"line_start":104,"line_end":104,"column_start":1,"column_end":12}},{"value":"/ use rand::{Rng, SeedableRng, StdRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140982,"byte_end":141023,"line_start":105,"line_end":105,"column_start":1,"column_end":42}},{"value":"/ use rand::reseeding::{Reseeder, ReseedingRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141024,"byte_end":141074,"line_start":106,"line_end":106,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141075,"byte_end":141078,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ struct TickTockReseeder { tick: bool }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141079,"byte_end":141121,"line_start":108,"line_end":108,"column_start":1,"column_end":43}},{"value":"/ impl Reseeder<StdRng> for TickTockReseeder {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141122,"byte_end":141170,"line_start":109,"line_end":109,"column_start":1,"column_end":49}},{"value":"/     fn reseed(&mut self, rng: &mut StdRng) {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141171,"byte_end":141219,"line_start":110,"line_end":110,"column_start":1,"column_end":49}},{"value":"/         let val = if self.tick {0} else {1};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141220,"byte_end":141268,"line_start":111,"line_end":111,"column_start":1,"column_end":49}},{"value":"/         rng.reseed(&[val]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141269,"byte_end":141300,"line_start":112,"line_end":112,"column_start":1,"column_end":32}},{"value":"/         self.tick = !self.tick;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141301,"byte_end":141336,"line_start":113,"line_end":113,"column_start":1,"column_end":36}},{"value":"/     }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141337,"byte_end":141346,"line_start":114,"line_end":114,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141347,"byte_end":141352,"line_start":115,"line_end":115,"column_start":1,"column_end":6}},{"value":"/ fn main() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141353,"byte_end":141368,"line_start":116,"line_end":116,"column_start":1,"column_end":16}},{"value":"/     let rsdr = TickTockReseeder { tick: true };","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141369,"byte_end":141420,"line_start":117,"line_end":117,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141421,"byte_end":141424,"line_start":118,"line_end":118,"column_start":1,"column_end":4}},{"value":"/     let inner = StdRng::new().unwrap();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141425,"byte_end":141468,"line_start":119,"line_end":119,"column_start":1,"column_end":44}},{"value":"/     let mut rng = ReseedingRng::new(inner, 10, rsdr);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141469,"byte_end":141526,"line_start":120,"line_end":120,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141527,"byte_end":141530,"line_start":121,"line_end":121,"column_start":1,"column_end":4}},{"value":"/     // this will repeat, because it gets reseeded very regularly.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141531,"byte_end":141600,"line_start":122,"line_end":122,"column_start":1,"column_end":70}},{"value":"/     let s: String = rng.gen_ascii_chars().take(100).collect();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141601,"byte_end":141667,"line_start":123,"line_end":123,"column_start":1,"column_end":67}},{"value":"/     println!(\"{}\", s);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141668,"byte_end":141694,"line_start":124,"line_end":124,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141695,"byte_end":141700,"line_start":125,"line_end":125,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141701,"byte_end":141704,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141705,"byte_end":141712,"line_start":127,"line_end":127,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":377},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141774,"byte_end":141780,"line_start":130,"line_end":130,"column_start":8,"column_end":14},"name":"reseed","qualname":"::reseeding::Reseeder::reseed","value":"pub fn reseed(&mut Self, &mut R)","parent":{"krate":0,"index":375},"children":[],"decl_id":null,"docs":" Reseed the given RNG.\n","sig":null,"attributes":[{"value":"/ Reseed the given RNG.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141741,"byte_end":141766,"line_start":129,"line_end":129,"column_start":5,"column_end":30}}]},{"kind":"Struct","id":{"krate":0,"index":831},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141973,"byte_end":141990,"line_start":136,"line_end":136,"column_start":12,"column_end":29},"name":"ReseedWithDefault","qualname":"::reseeding::ReseedWithDefault","value":"","parent":null,"children":[],"decl_id":null,"docs":" Reseed an RNG using a `Default` instance. This reseeds by\n replacing the RNG with the result of a `Default::default` call.\n","sig":null,"attributes":[{"value":"/ Reseed an RNG using a `Default` instance. This reseeds by","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141809,"byte_end":141870,"line_start":133,"line_end":133,"column_start":1,"column_end":62}},{"value":"/ replacing the RNG with the result of a `Default::default` call.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":141871,"byte_end":141938,"line_start":134,"line_end":134,"column_start":1,"column_end":68}}]},{"kind":"Mod","id":{"krate":0,"index":436},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"os","qualname":"::os","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","parent":null,"children":[{"krate":0,"index":437},{"krate":0,"index":438},{"krate":0,"index":439},{"krate":0,"index":440},{"krate":0,"index":441},{"krate":0,"index":444},{"krate":0,"index":446},{"krate":0,"index":450},{"krate":0,"index":454},{"krate":0,"index":458}],"decl_id":null,"docs":" Interfaces to the operating system provided random number\n generators.\n","sig":null,"attributes":[{"value":"/ Interfaces to the operating system provided random number","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152519,"byte_end":152580,"line_start":11,"line_end":11,"column_start":1,"column_end":62}},{"value":"/ generators.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152581,"byte_end":152596,"line_start":12,"line_end":12,"column_start":1,"column_end":16}}]},{"kind":"Struct","id":{"krate":0,"index":441},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153277,"byte_end":153282,"line_start":30,"line_end":30,"column_start":12,"column_end":17},"name":"OsRng","qualname":"::os::OsRng","value":"","parent":null,"children":[],"decl_id":null,"docs":" A random number generator that retrieves randomness straight from\n the operating system. Platform sources:","sig":null,"attributes":[{"value":"/ A random number generator that retrieves randomness straight from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152628,"byte_end":152697,"line_start":17,"line_end":17,"column_start":1,"column_end":70}},{"value":"/ the operating system. Platform sources:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152698,"byte_end":152741,"line_start":18,"line_end":18,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152742,"byte_end":152745,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ - Unix-like systems (Linux, Android, Mac OSX): read directly from","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152746,"byte_end":152815,"line_start":20,"line_end":20,"column_start":1,"column_end":70}},{"value":"/   `/dev/urandom`, or from `getrandom(2)` system call if available.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152816,"byte_end":152886,"line_start":21,"line_end":21,"column_start":1,"column_end":71}},{"value":"/ - OpenBSD: calls `getentropy(2)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152887,"byte_end":152923,"line_start":22,"line_end":22,"column_start":1,"column_end":37}},{"value":"/ - FreeBSD: uses the `kern.arandom` `sysctl(2)` mib","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152924,"byte_end":152978,"line_start":23,"line_end":23,"column_start":1,"column_end":55}},{"value":"/ - Windows: calls `CryptGenRandom`, using the default cryptographic","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":152979,"byte_end":153049,"line_start":24,"line_end":24,"column_start":1,"column_end":71}},{"value":"/   service provider with the `PROV_RSA_FULL` type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153050,"byte_end":153103,"line_start":25,"line_end":25,"column_start":1,"column_end":54}},{"value":"/ - iOS: calls SecRandomCopyBytes as /dev/(u)random is sandboxed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153104,"byte_end":153171,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/ - PNaCl: calls into the `nacl-irt-random-0.1` IRT interface.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153172,"byte_end":153236,"line_start":27,"line_end":27,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153237,"byte_end":153240,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ This does not block.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153241,"byte_end":153265,"line_start":29,"line_end":29,"column_start":1,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":445},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153351,"byte_end":153354,"line_start":34,"line_end":34,"column_start":12,"column_end":15},"name":"new","qualname":"<OsRng>::new","value":"pub fn new() -> io::Result<OsRng>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `OsRng`.\n","sig":null,"attributes":[{"value":"/ Create a new `OsRng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153314,"byte_end":153339,"line_start":33,"line_end":33,"column_start":5,"column_end":30}}]},{"kind":"Mod","id":{"krate":0,"index":499},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"read","qualname":"::read","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":502},{"krate":0,"index":503},{"krate":0,"index":504},{"krate":0,"index":505},{"krate":0,"index":508},{"krate":0,"index":511},{"krate":0,"index":518}],"decl_id":null,"docs":" A wrapper around any Read to treat it as an RNG.\n","sig":null,"attributes":[{"value":"/ A wrapper around any Read to treat it as an RNG.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169608,"byte_end":169660,"line_start":11,"line_end":11,"column_start":1,"column_end":53}}]},{"kind":"Struct","id":{"krate":0,"index":505},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170159,"byte_end":170166,"line_start":33,"line_end":33,"column_start":12,"column_end":19},"name":"ReadRng","qualname":"::read::ReadRng","value":"ReadRng {  }","parent":null,"children":[{"krate":0,"index":507}],"decl_id":null,"docs":" An RNG that reads random bytes straight from a `Read`. This will\n work best with an infinite reader, but this is not required.","sig":null,"attributes":[{"value":"/ An RNG that reads random bytes straight from a `Read`. This will","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169713,"byte_end":169781,"line_start":17,"line_end":17,"column_start":1,"column_end":69}},{"value":"/ work best with an infinite reader, but this is not required.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169782,"byte_end":169846,"line_start":18,"line_end":18,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169847,"byte_end":169850,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169851,"byte_end":169863,"line_start":20,"line_end":20,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169864,"byte_end":169867,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ It will panic if it there is insufficient data to fulfill a request.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169868,"byte_end":169940,"line_start":22,"line_end":22,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169941,"byte_end":169944,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169945,"byte_end":169958,"line_start":24,"line_end":24,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169959,"byte_end":169962,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169963,"byte_end":169974,"line_start":26,"line_end":26,"column_start":1,"column_end":12}},{"value":"/ use rand::{read, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":169975,"byte_end":170001,"line_start":27,"line_end":27,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170002,"byte_end":170005,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ let data = vec![1, 2, 3, 4, 5, 6, 7, 8];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170006,"byte_end":170050,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/ let mut rng = read::ReadRng::new(&data[..]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170051,"byte_end":170099,"line_start":30,"line_end":30,"column_start":1,"column_end":49}},{"value":"/ println!(\"{:x}\", rng.gen::<u32>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170100,"byte_end":170139,"line_start":31,"line_end":31,"column_start":1,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170140,"byte_end":170147,"line_start":32,"line_end":32,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170273,"byte_end":170276,"line_start":39,"line_end":39,"column_start":12,"column_end":15},"name":"new","qualname":"<ReadRng<R>>::new","value":"pub fn new(R) -> ReadRng<R>","parent":null,"children":[],"decl_id":null,"docs":" Create a new `ReadRng` from a `Read`.\n","sig":null,"attributes":[{"value":"/ Create a new `ReadRng` from a `Read`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170220,"byte_end":170261,"line_start":38,"line_end":38,"column_start":5,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":521},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10007,"byte_end":10011,"line_start":280,"line_end":280,"column_start":11,"column_end":15},"name":"Rand","qualname":"::Rand","value":"Rand: Sized","parent":null,"children":[{"krate":0,"index":522}],"decl_id":null,"docs":" A type that can be randomly generated using an `Rng`.\n","sig":null,"attributes":[{"value":"/ A type that can be randomly generated using an `Rng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9939,"byte_end":9996,"line_start":279,"line_end":279,"column_start":1,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10128,"byte_end":10132,"line_start":283,"line_end":283,"column_start":8,"column_end":12},"name":"rand","qualname":"::Rand::rand","value":"pub fn rand<R: Rng>(&mut R) -> Self","parent":{"krate":0,"index":521},"children":[],"decl_id":null,"docs":" Generates a random instance of this type using the specified source of\n randomness.\n","sig":null,"attributes":[{"value":"/ Generates a random instance of this type using the specified source of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10026,"byte_end":10100,"line_start":281,"line_end":281,"column_start":5,"column_end":79}},{"value":"/ randomness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10105,"byte_end":10120,"line_start":282,"line_end":282,"column_start":5,"column_end":20}}]},{"kind":"Trait","id":{"krate":0,"index":524},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10207,"byte_end":10210,"line_start":287,"line_end":287,"column_start":11,"column_end":14},"name":"Rng","qualname":"::Rng","value":"Rng","parent":null,"children":[{"krate":0,"index":525},{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":530},{"krate":0,"index":533},{"krate":0,"index":534},{"krate":0,"index":536},{"krate":0,"index":539},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":544},{"krate":0,"index":547},{"krate":0,"index":550}],"decl_id":null,"docs":" A random number generator.\n","sig":null,"attributes":[{"value":"/ A random number generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10166,"byte_end":10196,"line_start":286,"line_end":286,"column_start":1,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":525},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10420,"byte_end":10428,"line_start":293,"line_end":293,"column_start":8,"column_end":16},"name":"next_u32","qualname":"::Rng::next_u32","value":"pub fn next_u32(&mut Self) -> u32","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return the next random u32.","sig":null,"attributes":[{"value":"/ Return the next random u32.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10217,"byte_end":10248,"line_start":288,"line_end":288,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10253,"byte_end":10256,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ This rarely needs to be called directly, prefer `r.gen()` to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10261,"byte_end":10325,"line_start":290,"line_end":290,"column_start":5,"column_end":69}},{"value":"/ `r.next_u32()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10330,"byte_end":10349,"line_start":291,"line_end":291,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10769,"byte_end":10777,"line_start":301,"line_end":301,"column_start":8,"column_end":16},"name":"next_u64","qualname":"::Rng::next_u64","value":"pub fn next_u64(&mut Self) -> u64","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return the next random u64.","sig":null,"attributes":[{"value":"/ Return the next random u64.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10453,"byte_end":10484,"line_start":295,"line_end":295,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10489,"byte_end":10492,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented in terms of `next_u32`. An","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10497,"byte_end":10558,"line_start":297,"line_end":297,"column_start":5,"column_end":66}},{"value":"/ implementation of this trait must provide at least one of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10563,"byte_end":10624,"line_start":298,"line_end":298,"column_start":5,"column_end":66}},{"value":"/ these two methods. Similarly to `next_u32`, this rarely needs","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10629,"byte_end":10694,"line_start":299,"line_end":299,"column_start":5,"column_end":70}},{"value":"/ to be called directly, prefer `r.gen()` to `r.next_u64()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10699,"byte_end":10761,"line_start":300,"line_end":300,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12161,"byte_end":12169,"line_start":330,"line_end":330,"column_start":8,"column_end":16},"name":"next_f32","qualname":"::Rng::next_f32","value":"pub fn next_f32(&mut Self) -> f32","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return the next random f32 selected from the half-open\n interval `[0, 1)`.","sig":null,"attributes":[{"value":"/ Return the next random f32 selected from the half-open","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10877,"byte_end":10935,"line_start":305,"line_end":305,"column_start":5,"column_end":63}},{"value":"/ interval `[0, 1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10940,"byte_end":10962,"line_start":306,"line_end":306,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10967,"byte_end":10970,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ This uses a technique described by Saito and Matsumoto at","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10975,"byte_end":11036,"line_start":308,"line_end":308,"column_start":5,"column_end":66}},{"value":"/ MCQMC'08. Given that the IEEE floating point numbers are","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11041,"byte_end":11101,"line_start":309,"line_end":309,"column_start":5,"column_end":65}},{"value":"/ uniformly distributed over [1,2), we generate a number in","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11106,"byte_end":11167,"line_start":310,"line_end":310,"column_start":5,"column_end":66}},{"value":"/ this range and then offset it onto the range [0,1). Our","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11172,"byte_end":11231,"line_start":311,"line_end":311,"column_start":5,"column_end":64}},{"value":"/ choice of bits (masking v. shifting) is arbitrary and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11236,"byte_end":11293,"line_start":312,"line_end":312,"column_start":5,"column_end":62}},{"value":"/ should be immaterial for high quality generators. For low","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11298,"byte_end":11359,"line_start":313,"line_end":313,"column_start":5,"column_end":66}},{"value":"/ quality generators (ex. LCG), prefer bitshifting due to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11364,"byte_end":11423,"line_start":314,"line_end":314,"column_start":5,"column_end":64}},{"value":"/ correlation between sequential low order bits.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11428,"byte_end":11478,"line_start":315,"line_end":315,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11483,"byte_end":11486,"line_start":316,"line_end":316,"column_start":5,"column_end":8}},{"value":"/ See:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11491,"byte_end":11499,"line_start":317,"line_end":317,"column_start":5,"column_end":13}},{"value":"/ A PRNG specialized in double precision floating point numbers using","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11504,"byte_end":11575,"line_start":318,"line_end":318,"column_start":5,"column_end":76}},{"value":"/ an affine transition","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11580,"byte_end":11604,"line_start":319,"line_end":319,"column_start":5,"column_end":29}},{"value":"/ http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/ARTICLES/dSFMT.pdf","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11609,"byte_end":11679,"line_start":320,"line_end":320,"column_start":5,"column_end":75}},{"value":"/ http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/SFMT/dSFMT-slide-e.pdf","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11684,"byte_end":11758,"line_start":321,"line_end":321,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11763,"byte_end":11766,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented in terms of `next_u32`, but a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11771,"byte_end":11835,"line_start":323,"line_end":323,"column_start":5,"column_end":69}},{"value":"/ random number generator which can generate numbers satisfying","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11840,"byte_end":11905,"line_start":324,"line_end":324,"column_start":5,"column_end":70}},{"value":"/ the requirements directly can overload this for performance.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11910,"byte_end":11974,"line_start":325,"line_end":325,"column_start":5,"column_end":69}},{"value":"/ It is required that the return value lies in `[0, 1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":11979,"byte_end":12037,"line_start":326,"line_end":326,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12042,"byte_end":12045,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ See `Closed01` for the closed interval `[0,1]`, and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12050,"byte_end":12105,"line_start":328,"line_end":328,"column_start":5,"column_end":60}},{"value":"/ `Open01` for the open interval `(0,1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12110,"byte_end":12153,"line_start":329,"line_end":329,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12917,"byte_end":12925,"line_start":348,"line_end":348,"column_start":8,"column_end":16},"name":"next_f64","qualname":"::Rng::next_f64","value":"pub fn next_f64(&mut Self) -> f64","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return the next random f64 selected from the half-open\n interval `[0, 1)`.","sig":null,"attributes":[{"value":"/ Return the next random f64 selected from the half-open","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12429,"byte_end":12487,"line_start":338,"line_end":338,"column_start":5,"column_end":63}},{"value":"/ interval `[0, 1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12492,"byte_end":12514,"line_start":339,"line_end":339,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12519,"byte_end":12522,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ By default this is implemented in terms of `next_u64`, but a","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12527,"byte_end":12591,"line_start":341,"line_end":341,"column_start":5,"column_end":69}},{"value":"/ random number generator which can generate numbers satisfying","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12596,"byte_end":12661,"line_start":342,"line_end":342,"column_start":5,"column_end":70}},{"value":"/ the requirements directly can overload this for performance.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12666,"byte_end":12730,"line_start":343,"line_end":343,"column_start":5,"column_end":69}},{"value":"/ It is required that the return value lies in `[0, 1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12735,"byte_end":12793,"line_start":344,"line_end":344,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12798,"byte_end":12801,"line_start":345,"line_end":345,"column_start":5,"column_end":8}},{"value":"/ See `Closed01` for the closed interval `[0,1]`, and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12806,"byte_end":12861,"line_start":346,"line_end":346,"column_start":5,"column_end":60}},{"value":"/ `Open01` for the open interval `(0,1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":12866,"byte_end":12909,"line_start":347,"line_end":347,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":533},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14243,"byte_end":14253,"line_start":383,"line_end":383,"column_start":8,"column_end":18},"name":"fill_bytes","qualname":"::Rng::fill_bytes","value":"pub fn fill_bytes(&mut Self, &mut [u8])","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Fill `dest` with random data.","sig":null,"attributes":[{"value":"/ Fill `dest` with random data.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13200,"byte_end":13233,"line_start":356,"line_end":356,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13238,"byte_end":13241,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ This has a default implementation in terms of `next_u64` and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13246,"byte_end":13310,"line_start":358,"line_end":358,"column_start":5,"column_end":69}},{"value":"/ `next_u32`, but should be overridden by implementations that","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13315,"byte_end":13379,"line_start":359,"line_end":359,"column_start":5,"column_end":69}},{"value":"/ offer a more efficient solution than just calling those","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13384,"byte_end":13443,"line_start":360,"line_end":360,"column_start":5,"column_end":64}},{"value":"/ methods repeatedly.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13448,"byte_end":13471,"line_start":361,"line_end":361,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13476,"byte_end":13479,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ This method does *not* have a requirement to bear any fixed","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13484,"byte_end":13547,"line_start":363,"line_end":363,"column_start":5,"column_end":68}},{"value":"/ relationship to the other methods, for example, it does *not*","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13552,"byte_end":13617,"line_start":364,"line_end":364,"column_start":5,"column_end":70}},{"value":"/ have to result in the same output as progressively filling","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13622,"byte_end":13684,"line_start":365,"line_end":365,"column_start":5,"column_end":67}},{"value":"/ `dest` with `self.gen::<u8>()`, and any such behaviour should","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13689,"byte_end":13754,"line_start":366,"line_end":366,"column_start":5,"column_end":70}},{"value":"/ not be relied upon.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13759,"byte_end":13782,"line_start":367,"line_end":367,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13787,"byte_end":13790,"line_start":368,"line_end":368,"column_start":5,"column_end":8}},{"value":"/ This method should guarantee that `dest` is entirely filled","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13795,"byte_end":13858,"line_start":369,"line_end":369,"column_start":5,"column_end":68}},{"value":"/ with new data, and may panic if this is impossible","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13863,"byte_end":13917,"line_start":370,"line_end":370,"column_start":5,"column_end":59}},{"value":"/ (e.g. reading past the end of a file that is being used as the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13922,"byte_end":13988,"line_start":371,"line_end":371,"column_start":5,"column_end":71}},{"value":"/ source of randomness).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":13993,"byte_end":14019,"line_start":372,"line_end":372,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14024,"byte_end":14027,"line_start":373,"line_end":373,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14032,"byte_end":14045,"line_start":374,"line_end":374,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14050,"byte_end":14053,"line_start":375,"line_end":375,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14058,"byte_end":14069,"line_start":376,"line_end":376,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14074,"byte_end":14106,"line_start":377,"line_end":377,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14111,"byte_end":14114,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ let mut v = [0u8; 13579];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14119,"byte_end":14148,"line_start":379,"line_end":379,"column_start":5,"column_end":34}},{"value":"/ thread_rng().fill_bytes(&mut v);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14153,"byte_end":14189,"line_start":380,"line_end":380,"column_start":5,"column_end":41}},{"value":"/ println!(\"{:?}\", &v[..]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14194,"byte_end":14223,"line_start":381,"line_end":381,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":14228,"byte_end":14235,"line_start":382,"line_end":382,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":534},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15457,"byte_end":15460,"line_start":420,"line_end":420,"column_start":8,"column_end":11},"name":"gen","qualname":"::Rng::gen","value":"pub fn gen<T: Rand>(&mut Self) -> T where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return a random value of a `Rand` type.","sig":null,"attributes":[{"value":"/ Return a random value of a `Rand` type.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15130,"byte_end":15173,"line_start":407,"line_end":407,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15178,"byte_end":15181,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15186,"byte_end":15199,"line_start":409,"line_end":409,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15204,"byte_end":15207,"line_start":410,"line_end":410,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15212,"byte_end":15223,"line_start":411,"line_end":411,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15228,"byte_end":15260,"line_start":412,"line_end":412,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15265,"byte_end":15268,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15273,"byte_end":15304,"line_start":414,"line_end":414,"column_start":5,"column_end":36}},{"value":"/ let x: u32 = rng.gen();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15309,"byte_end":15336,"line_start":415,"line_end":415,"column_start":5,"column_end":32}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15341,"byte_end":15363,"line_start":416,"line_end":416,"column_start":5,"column_end":27}},{"value":"/ println!(\"{:?}\", rng.gen::<(f64, bool)>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15368,"byte_end":15415,"line_start":417,"line_end":417,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15420,"byte_end":15427,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"inline(always)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15432,"byte_end":15449,"line_start":419,"line_end":419,"column_start":5,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":536},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16006,"byte_end":16014,"line_start":438,"line_end":438,"column_start":8,"column_end":16},"name":"gen_iter","qualname":"::Rng::gen_iter","value":"pub fn gen_iter<'a, T: Rand>(&'a mut Self) -> Generator where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return an iterator that will yield an infinite number of randomly\n generated items.","sig":null,"attributes":[{"value":"/ Return an iterator that will yield an infinite number of randomly","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15542,"byte_end":15611,"line_start":424,"line_end":424,"column_start":5,"column_end":74}},{"value":"/ generated items.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15616,"byte_end":15636,"line_start":425,"line_end":425,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15641,"byte_end":15644,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15649,"byte_end":15662,"line_start":427,"line_end":427,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15667,"byte_end":15670,"line_start":428,"line_end":428,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15675,"byte_end":15682,"line_start":429,"line_end":429,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15687,"byte_end":15719,"line_start":430,"line_end":430,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15724,"byte_end":15727,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15732,"byte_end":15763,"line_start":432,"line_end":432,"column_start":5,"column_end":36}},{"value":"/ let x = rng.gen_iter::<u32>().take(10).collect::<Vec<u32>>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15768,"byte_end":15833,"line_start":433,"line_end":433,"column_start":5,"column_end":70}},{"value":"/ println!(\"{:?}\", x);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15838,"byte_end":15862,"line_start":434,"line_end":434,"column_start":5,"column_end":29}},{"value":"/ println!(\"{:?}\", rng.gen_iter::<(f64, bool)>().take(5)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15867,"byte_end":15925,"line_start":435,"line_end":435,"column_start":5,"column_end":63}},{"value":"/                     .collect::<Vec<(f64, bool)>>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15930,"byte_end":15986,"line_start":436,"line_end":436,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":15991,"byte_end":15998,"line_start":437,"line_end":437,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":539},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16902,"byte_end":16911,"line_start":465,"line_end":465,"column_start":8,"column_end":17},"name":"gen_range","qualname":"::Rng::gen_range","value":"pub fn gen_range<T: PartialOrd + SampleRange>(&mut Self, T, T) -> T where\nSelf: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Generate a random value in the range [`low`, `high`).","sig":null,"attributes":[{"value":"/ Generate a random value in the range [`low`, `high`).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16161,"byte_end":16218,"line_start":442,"line_end":442,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16223,"byte_end":16226,"line_start":443,"line_end":443,"column_start":5,"column_end":8}},{"value":"/ This is a convenience wrapper around","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16231,"byte_end":16271,"line_start":444,"line_end":444,"column_start":5,"column_end":45}},{"value":"/ `distributions::Range`. If this function will be called","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16276,"byte_end":16335,"line_start":445,"line_end":445,"column_start":5,"column_end":64}},{"value":"/ repeatedly with the same arguments, one should use `Range`, as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16340,"byte_end":16406,"line_start":446,"line_end":446,"column_start":5,"column_end":71}},{"value":"/ that will amortize the computations that allow for perfect","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16411,"byte_end":16473,"line_start":447,"line_end":447,"column_start":5,"column_end":67}},{"value":"/ uniformity, as they only happen on initialization.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16478,"byte_end":16532,"line_start":448,"line_end":448,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16537,"byte_end":16540,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16545,"byte_end":16557,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16562,"byte_end":16565,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ Panics if `low >= high`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16570,"byte_end":16598,"line_start":452,"line_end":452,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16603,"byte_end":16606,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16611,"byte_end":16624,"line_start":454,"line_end":454,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16629,"byte_end":16632,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16637,"byte_end":16648,"line_start":456,"line_end":456,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16653,"byte_end":16685,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16690,"byte_end":16693,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16698,"byte_end":16729,"line_start":459,"line_end":459,"column_start":5,"column_end":36}},{"value":"/ let n: u32 = rng.gen_range(0, 10);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16734,"byte_end":16772,"line_start":460,"line_end":460,"column_start":5,"column_end":43}},{"value":"/ println!(\"{}\", n);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16777,"byte_end":16799,"line_start":461,"line_end":461,"column_start":5,"column_end":27}},{"value":"/ let m: f64 = rng.gen_range(-40.0f64, 1.3e5f64);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16804,"byte_end":16855,"line_start":462,"line_end":462,"column_start":5,"column_end":56}},{"value":"/ println!(\"{}\", m);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16860,"byte_end":16882,"line_start":463,"line_end":463,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":16887,"byte_end":16894,"line_start":464,"line_end":464,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":541},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17369,"byte_end":17386,"line_start":480,"line_end":480,"column_start":8,"column_end":25},"name":"gen_weighted_bool","qualname":"::Rng::gen_weighted_bool","value":"pub fn gen_weighted_bool(&mut Self, u32) -> bool where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return a bool with a 1 in n chance of true","sig":null,"attributes":[{"value":"/ Return a bool with a 1 in n chance of true","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17122,"byte_end":17168,"line_start":470,"line_end":470,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17173,"byte_end":17176,"line_start":471,"line_end":471,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17181,"byte_end":17194,"line_start":472,"line_end":472,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17199,"byte_end":17202,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17207,"byte_end":17218,"line_start":474,"line_end":474,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17223,"byte_end":17255,"line_start":475,"line_end":475,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17260,"byte_end":17263,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17268,"byte_end":17299,"line_start":477,"line_end":477,"column_start":5,"column_end":36}},{"value":"/ println!(\"{}\", rng.gen_weighted_bool(3));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17304,"byte_end":17349,"line_start":478,"line_end":478,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17354,"byte_end":17361,"line_start":479,"line_end":479,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":542},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17775,"byte_end":17790,"line_start":494,"line_end":494,"column_start":8,"column_end":23},"name":"gen_ascii_chars","qualname":"::Rng::gen_ascii_chars","value":"pub fn gen_ascii_chars<'a>(&'a mut Self) -> AsciiGenerator where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return an iterator of random characters from the set A-Z,a-z,0-9.","sig":null,"attributes":[{"value":"/ Return an iterator of random characters from the set A-Z,a-z,0-9.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17489,"byte_end":17558,"line_start":484,"line_end":484,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17563,"byte_end":17566,"line_start":485,"line_end":485,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17571,"byte_end":17584,"line_start":486,"line_end":486,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17589,"byte_end":17592,"line_start":487,"line_end":487,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17597,"byte_end":17608,"line_start":488,"line_end":488,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17613,"byte_end":17645,"line_start":489,"line_end":489,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17650,"byte_end":17653,"line_start":490,"line_end":490,"column_start":5,"column_end":8}},{"value":"/ let s: String = thread_rng().gen_ascii_chars().take(10).collect();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17658,"byte_end":17728,"line_start":491,"line_end":491,"column_start":5,"column_end":75}},{"value":"/ println!(\"{}\", s);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17733,"byte_end":17755,"line_start":492,"line_end":492,"column_start":5,"column_end":27}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17760,"byte_end":17767,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18291,"byte_end":18297,"line_start":512,"line_end":512,"column_start":8,"column_end":14},"name":"choose","qualname":"::Rng::choose","value":"pub fn choose<'a, T>(&mut Self, &'a [T]) -> Option<&'a T> where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return a random element from `values`.","sig":null,"attributes":[{"value":"/ Return a random element from `values`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17905,"byte_end":17947,"line_start":498,"line_end":498,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17952,"byte_end":17955,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `values` is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":17960,"byte_end":17999,"line_start":500,"line_end":500,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18004,"byte_end":18007,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18012,"byte_end":18025,"line_start":502,"line_end":502,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18030,"byte_end":18033,"line_start":503,"line_end":503,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18038,"byte_end":18045,"line_start":504,"line_end":504,"column_start":5,"column_end":12}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18050,"byte_end":18082,"line_start":505,"line_end":505,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18087,"byte_end":18090,"line_start":506,"line_end":506,"column_start":5,"column_end":8}},{"value":"/ let choices = [1, 2, 4, 8, 16, 32];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18095,"byte_end":18134,"line_start":507,"line_end":507,"column_start":5,"column_end":44}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18139,"byte_end":18170,"line_start":508,"line_end":508,"column_start":5,"column_end":36}},{"value":"/ println!(\"{:?}\", rng.choose(&choices));","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18175,"byte_end":18218,"line_start":509,"line_end":509,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(rng.choose(&choices[..0]), None);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18223,"byte_end":18271,"line_start":510,"line_end":510,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18276,"byte_end":18283,"line_start":511,"line_end":511,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18638,"byte_end":18648,"line_start":523,"line_end":523,"column_start":8,"column_end":18},"name":"choose_mut","qualname":"::Rng::choose_mut","value":"pub fn choose_mut<'a, T>(&mut Self, &'a mut [T]) -> Option<&'a mut T> where\nSelf: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Return a mutable pointer to a random element from `values`.","sig":null,"attributes":[{"value":"/ Return a mutable pointer to a random element from `values`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18515,"byte_end":18578,"line_start":520,"line_end":520,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18583,"byte_end":18586,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `values` is empty.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18591,"byte_end":18630,"line_start":522,"line_end":522,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19240,"byte_end":19247,"line_start":546,"line_end":546,"column_start":8,"column_end":15},"name":"shuffle","qualname":"::Rng::shuffle","value":"pub fn shuffle<T>(&mut Self, &mut [T]) where Self: Sized","parent":{"krate":0,"index":524},"children":[],"decl_id":null,"docs":" Shuffle a mutable slice in place.","sig":null,"attributes":[{"value":"/ Shuffle a mutable slice in place.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18905,"byte_end":18942,"line_start":532,"line_end":532,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18947,"byte_end":18950,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18955,"byte_end":18968,"line_start":534,"line_end":534,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18973,"byte_end":18976,"line_start":535,"line_end":535,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18981,"byte_end":18992,"line_start":536,"line_end":536,"column_start":5,"column_end":16}},{"value":"/ use rand::{thread_rng, Rng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":18997,"byte_end":19029,"line_start":537,"line_end":537,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19034,"byte_end":19037,"line_start":538,"line_end":538,"column_start":5,"column_end":8}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19042,"byte_end":19073,"line_start":539,"line_end":539,"column_start":5,"column_end":36}},{"value":"/ let mut y = [1, 2, 3];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19078,"byte_end":19104,"line_start":540,"line_end":540,"column_start":5,"column_end":31}},{"value":"/ rng.shuffle(&mut y);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19109,"byte_end":19133,"line_start":541,"line_end":541,"column_start":5,"column_end":29}},{"value":"/ println!(\"{:?}\", y);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19138,"byte_end":19162,"line_start":542,"line_end":542,"column_start":5,"column_end":29}},{"value":"/ rng.shuffle(&mut y);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19167,"byte_end":19191,"line_start":543,"line_end":543,"column_start":5,"column_end":29}},{"value":"/ println!(\"{:?}\", y);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19196,"byte_end":19220,"line_start":544,"line_end":544,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":19225,"byte_end":19232,"line_start":545,"line_end":545,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":567},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20641,"byte_end":20650,"line_start":607,"line_end":607,"column_start":12,"column_end":21},"name":"Generator","qualname":"::Generator","value":"Generator {  }","parent":null,"children":[{"krate":0,"index":571},{"krate":0,"index":572}],"decl_id":null,"docs":" Iterator which will generate a stream of random items.","sig":null,"attributes":[{"value":"/ Iterator which will generate a stream of random items.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20417,"byte_end":20475,"line_start":601,"line_end":601,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20476,"byte_end":20479,"line_start":602,"line_end":602,"column_start":1,"column_end":4}},{"value":"/ This iterator is created via the [`gen_iter`] method on [`Rng`].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20480,"byte_end":20548,"line_start":603,"line_end":603,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20549,"byte_end":20552,"line_start":604,"line_end":604,"column_start":1,"column_end":4}},{"value":"/ [`gen_iter`]: trait.Rng.html#method.gen_iter","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20553,"byte_end":20601,"line_start":605,"line_end":605,"column_start":1,"column_end":49}},{"value":"/ [`Rng`]: trait.Rng.html","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20602,"byte_end":20629,"line_start":606,"line_end":606,"column_start":1,"column_end":28}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21148,"byte_end":21162,"line_start":626,"line_end":626,"column_start":12,"column_end":26},"name":"AsciiGenerator","qualname":"::AsciiGenerator","value":"AsciiGenerator {  }","parent":null,"children":[{"krate":0,"index":582}],"decl_id":null,"docs":" Iterator which will continuously generate random ascii characters.","sig":null,"attributes":[{"value":"/ Iterator which will continuously generate random ascii characters.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20891,"byte_end":20961,"line_start":620,"line_end":620,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20962,"byte_end":20965,"line_start":621,"line_end":621,"column_start":1,"column_end":4}},{"value":"/ This iterator is created via the [`gen_ascii_chars`] method on [`Rng`].","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20966,"byte_end":21041,"line_start":622,"line_end":622,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21042,"byte_end":21045,"line_start":623,"line_end":623,"column_start":1,"column_end":4}},{"value":"/ [`gen_ascii_chars`]: trait.Rng.html#method.gen_ascii_chars","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21046,"byte_end":21108,"line_start":624,"line_end":624,"column_start":1,"column_end":63}},{"value":"/ [`Rng`]: trait.Rng.html","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21109,"byte_end":21136,"line_start":625,"line_end":625,"column_start":1,"column_end":28}}]},{"kind":"Trait","id":{"krate":0,"index":589},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21691,"byte_end":21702,"line_start":644,"line_end":644,"column_start":11,"column_end":22},"name":"SeedableRng","qualname":"::SeedableRng","value":"SeedableRng<Seed>: Rng","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592}],"decl_id":null,"docs":" A random number generator that can be explicitly seeded to produce\n the same stream of randomness multiple times.\n","sig":null,"attributes":[{"value":"/ A random number generator that can be explicitly seeded to produce","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21560,"byte_end":21630,"line_start":642,"line_end":642,"column_start":1,"column_end":71}},{"value":"/ the same stream of randomness multiple times.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21631,"byte_end":21680,"line_start":643,"line_end":643,"column_start":1,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22101,"byte_end":22107,"line_start":658,"line_end":658,"column_start":8,"column_end":14},"name":"reseed","qualname":"::SeedableRng::reseed","value":"pub fn reseed(&mut Self, Seed)","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Reseed an RNG with the given seed.","sig":null,"attributes":[{"value":"/ Reseed an RNG with the given seed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21720,"byte_end":21758,"line_start":645,"line_end":645,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21763,"byte_end":21766,"line_start":646,"line_end":646,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21771,"byte_end":21784,"line_start":647,"line_end":647,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21789,"byte_end":21792,"line_start":648,"line_end":648,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21797,"byte_end":21808,"line_start":649,"line_end":649,"column_start":5,"column_end":16}},{"value":"/ use rand::{Rng, SeedableRng, StdRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21813,"byte_end":21854,"line_start":650,"line_end":650,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21859,"byte_end":21862,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ let seed: &[_] = &[1, 2, 3, 4];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21867,"byte_end":21902,"line_start":652,"line_end":652,"column_start":5,"column_end":40}},{"value":"/ let mut rng: StdRng = SeedableRng::from_seed(seed);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21907,"byte_end":21962,"line_start":653,"line_end":653,"column_start":5,"column_end":60}},{"value":"/ println!(\"{}\", rng.gen::<f64>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21967,"byte_end":22004,"line_start":654,"line_end":654,"column_start":5,"column_end":42}},{"value":"/ rng.reseed(&[5, 6, 7, 8]);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22009,"byte_end":22039,"line_start":655,"line_end":655,"column_start":5,"column_end":35}},{"value":"/ println!(\"{}\", rng.gen::<f64>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22044,"byte_end":22081,"line_start":656,"line_end":656,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22086,"byte_end":22093,"line_start":657,"line_end":657,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22438,"byte_end":22447,"line_start":671,"line_end":671,"column_start":8,"column_end":17},"name":"from_seed","qualname":"::SeedableRng::from_seed","value":"pub fn from_seed(Seed) -> Self","parent":{"krate":0,"index":589},"children":[],"decl_id":null,"docs":" Create a new RNG with the given seed.","sig":null,"attributes":[{"value":"/ Create a new RNG with the given seed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22131,"byte_end":22172,"line_start":660,"line_end":660,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22177,"byte_end":22180,"line_start":661,"line_end":661,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22185,"byte_end":22198,"line_start":662,"line_end":662,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22203,"byte_end":22206,"line_start":663,"line_end":663,"column_start":5,"column_end":8}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22211,"byte_end":22222,"line_start":664,"line_end":664,"column_start":5,"column_end":16}},{"value":"/ use rand::{Rng, SeedableRng, StdRng};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22227,"byte_end":22268,"line_start":665,"line_end":665,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22273,"byte_end":22276,"line_start":666,"line_end":666,"column_start":5,"column_end":8}},{"value":"/ let seed: &[_] = &[1, 2, 3, 4];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22281,"byte_end":22316,"line_start":667,"line_end":667,"column_start":5,"column_end":40}},{"value":"/ let mut rng: StdRng = SeedableRng::from_seed(seed);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22321,"byte_end":22376,"line_start":668,"line_end":668,"column_start":5,"column_end":60}},{"value":"/ println!(\"{}\", rng.gen::<f64>());","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22381,"byte_end":22418,"line_start":669,"line_end":669,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22423,"byte_end":22430,"line_start":670,"line_end":670,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":1180},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22965,"byte_end":22976,"line_start":686,"line_end":686,"column_start":12,"column_end":23},"name":"XorShiftRng","qualname":"::XorShiftRng","value":"XorShiftRng {  }","parent":null,"children":[{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184}],"decl_id":null,"docs":" An Xorshift[1] random number\n generator.","sig":null,"attributes":[{"value":"/ An Xorshift[1] random number","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22472,"byte_end":22504,"line_start":674,"line_end":674,"column_start":1,"column_end":33}},{"value":"/ generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22505,"byte_end":22519,"line_start":675,"line_end":675,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22520,"byte_end":22523,"line_start":676,"line_end":676,"column_start":1,"column_end":4}},{"value":"/ The Xorshift algorithm is not suitable for cryptographic purposes","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22524,"byte_end":22593,"line_start":677,"line_end":677,"column_start":1,"column_end":70}},{"value":"/ but is very fast. If you do not know for sure that it fits your","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22594,"byte_end":22661,"line_start":678,"line_end":678,"column_start":1,"column_end":68}},{"value":"/ requirements, use a more secure one such as `IsaacRng` or `OsRng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22662,"byte_end":22732,"line_start":679,"line_end":679,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22733,"byte_end":22736,"line_start":680,"line_end":680,"column_start":1,"column_end":4}},{"value":"/ [1]: Marsaglia, George (July 2003). [\"Xorshift","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22737,"byte_end":22787,"line_start":681,"line_end":681,"column_start":1,"column_end":51}},{"value":"/ RNGs\"](http://www.jstatsoft.org/v08/i14/paper). *Journal of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22788,"byte_end":22851,"line_start":682,"line_end":682,"column_start":1,"column_end":64}},{"value":"/ Statistical Software*. Vol. 8 (Issue 14).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22852,"byte_end":22897,"line_start":683,"line_end":683,"column_start":1,"column_end":46}},{"value":"allow(missing_copy_implementations)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":22898,"byte_end":22936,"line_start":684,"line_end":684,"column_start":1,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23392,"byte_end":23404,"line_start":700,"line_end":700,"column_start":12,"column_end":24},"name":"new_unseeded","qualname":"<XorShiftRng>::new_unseeded","value":"pub fn new_unseeded() -> XorShiftRng","parent":null,"children":[],"decl_id":null,"docs":" Creates a new XorShiftRng instance which is not seeded.","sig":null,"attributes":[{"value":"/ Creates a new XorShiftRng instance which is not seeded.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23053,"byte_end":23112,"line_start":694,"line_end":694,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23117,"byte_end":23120,"line_start":695,"line_end":695,"column_start":5,"column_end":8}},{"value":"/ The initial values of this RNG are constants, so all generators created","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23125,"byte_end":23200,"line_start":696,"line_end":696,"column_start":5,"column_end":80}},{"value":"/ by this function will yield the same stream of random numbers. It is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23205,"byte_end":23277,"line_start":697,"line_end":697,"column_start":5,"column_end":77}},{"value":"/ highly recommended that this is created through `SeedableRng` instead of","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23282,"byte_end":23358,"line_start":698,"line_end":698,"column_start":5,"column_end":81}},{"value":"/ this function","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23363,"byte_end":23380,"line_start":699,"line_end":699,"column_start":5,"column_end":22}}]},{"kind":"Struct","id":{"krate":0,"index":606},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25457,"byte_end":25463,"line_start":775,"line_end":775,"column_start":12,"column_end":18},"name":"Open01","qualname":"::Open01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for generating floating point numbers uniformly in the\n open interval `(0,1)` (not including either endpoint).","sig":null,"attributes":[{"value":"/ A wrapper for generating floating point numbers uniformly in the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25007,"byte_end":25075,"line_start":761,"line_end":761,"column_start":1,"column_end":69}},{"value":"/ open interval `(0,1)` (not including either endpoint).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25076,"byte_end":25134,"line_start":762,"line_end":762,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25135,"byte_end":25138,"line_start":763,"line_end":763,"column_start":1,"column_end":4}},{"value":"/ Use `Closed01` for the closed interval `[0,1]`, and the default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25139,"byte_end":25206,"line_start":764,"line_end":764,"column_start":1,"column_end":68}},{"value":"/ `Rand` implementation for `f32` and `f64` for the half-open","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25207,"byte_end":25270,"line_start":765,"line_end":765,"column_start":1,"column_end":64}},{"value":"/ `[0,1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25271,"byte_end":25283,"line_start":766,"line_end":766,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25284,"byte_end":25287,"line_start":767,"line_end":767,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25288,"byte_end":25301,"line_start":768,"line_end":768,"column_start":1,"column_end":14}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25302,"byte_end":25313,"line_start":769,"line_end":769,"column_start":1,"column_end":12}},{"value":"/ use rand::{random, Open01};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25314,"byte_end":25345,"line_start":770,"line_end":770,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25346,"byte_end":25349,"line_start":771,"line_end":771,"column_start":1,"column_end":4}},{"value":"/ let Open01(val) = random::<Open01<f32>>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25350,"byte_end":25396,"line_start":772,"line_end":772,"column_start":1,"column_end":47}},{"value":"/ println!(\"f32 from (0,1): {}\", val);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25397,"byte_end":25437,"line_start":773,"line_end":773,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25438,"byte_end":25445,"line_start":774,"line_end":774,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":609},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25467,"byte_end":25472,"line_start":775,"line_end":775,"column_start":22,"column_end":27},"name":"0","qualname":"::Open01::0","value":"F","parent":{"krate":0,"index":606},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":610},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25930,"byte_end":25938,"line_start":792,"line_end":792,"column_start":12,"column_end":20},"name":"Closed01","qualname":"::Closed01","value":"","parent":null,"children":[],"decl_id":null,"docs":" A wrapper for generating floating point numbers uniformly in the\n closed interval `[0,1]` (including both endpoints).","sig":null,"attributes":[{"value":"/ A wrapper for generating floating point numbers uniformly in the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25476,"byte_end":25544,"line_start":777,"line_end":777,"column_start":1,"column_end":69}},{"value":"/ closed interval `[0,1]` (including both endpoints).","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25545,"byte_end":25600,"line_start":778,"line_end":778,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25601,"byte_end":25604,"line_start":779,"line_end":779,"column_start":1,"column_end":4}},{"value":"/ Use `Open01` for the closed interval `(0,1)`, and the default","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25605,"byte_end":25670,"line_start":780,"line_end":780,"column_start":1,"column_end":66}},{"value":"/ `Rand` implementation of `f32` and `f64` for the half-open","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25671,"byte_end":25733,"line_start":781,"line_end":781,"column_start":1,"column_end":63}},{"value":"/ `[0,1)`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25734,"byte_end":25746,"line_start":782,"line_end":782,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25747,"byte_end":25750,"line_start":783,"line_end":783,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25751,"byte_end":25764,"line_start":784,"line_end":784,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25765,"byte_end":25768,"line_start":785,"line_end":785,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25769,"byte_end":25780,"line_start":786,"line_end":786,"column_start":1,"column_end":12}},{"value":"/ use rand::{random, Closed01};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25781,"byte_end":25814,"line_start":787,"line_end":787,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25815,"byte_end":25818,"line_start":788,"line_end":788,"column_start":1,"column_end":4}},{"value":"/ let Closed01(val) = random::<Closed01<f32>>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25819,"byte_end":25869,"line_start":789,"line_end":789,"column_start":1,"column_end":51}},{"value":"/ println!(\"f32 from [0,1]: {}\", val);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25870,"byte_end":25910,"line_start":790,"line_end":790,"column_start":1,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25911,"byte_end":25918,"line_start":791,"line_end":791,"column_start":1,"column_end":8}}]},{"kind":"Field","id":{"krate":0,"index":613},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25942,"byte_end":25947,"line_start":792,"line_end":792,"column_start":24,"column_end":29},"name":"0","qualname":"::Closed01::0","value":"F","parent":{"krate":0,"index":610},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1189},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26069,"byte_end":26075,"line_start":797,"line_end":797,"column_start":12,"column_end":18},"name":"StdRng","qualname":"::StdRng","value":"StdRng {  }","parent":null,"children":[{"krate":0,"index":1190}],"decl_id":null,"docs":" The standard RNG. This is designed to be efficient on the current\n platform.\n","sig":null,"attributes":[{"value":"/ The standard RNG. This is designed to be efficient on the current","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":25951,"byte_end":26020,"line_start":794,"line_end":794,"column_start":1,"column_end":70}},{"value":"/ platform.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26021,"byte_end":26034,"line_start":795,"line_end":795,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":615},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26685,"byte_end":26688,"line_start":813,"line_end":813,"column_start":12,"column_end":15},"name":"new","qualname":"<StdRng>::new","value":"pub fn new() -> io::Result<StdRng>","parent":null,"children":[],"decl_id":null,"docs":" Create a randomly seeded instance of `StdRng`.","sig":null,"attributes":[{"value":"/ Create a randomly seeded instance of `StdRng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26122,"byte_end":26172,"line_start":802,"line_end":802,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26177,"byte_end":26180,"line_start":803,"line_end":803,"column_start":5,"column_end":8}},{"value":"/ This is a very expensive operation as it has to read","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26185,"byte_end":26241,"line_start":804,"line_end":804,"column_start":5,"column_end":61}},{"value":"/ randomness from the operating system and use this in an","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26246,"byte_end":26305,"line_start":805,"line_end":805,"column_start":5,"column_end":64}},{"value":"/ expensive seeding operation. If one is only generating a small","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26310,"byte_end":26376,"line_start":806,"line_end":806,"column_start":5,"column_end":71}},{"value":"/ number of random numbers, or doesn't need the utmost speed for","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26381,"byte_end":26447,"line_start":807,"line_end":807,"column_start":5,"column_end":71}},{"value":"/ generating each number, `thread_rng` and/or `random` may be more","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26452,"byte_end":26520,"line_start":808,"line_end":808,"column_start":5,"column_end":73}},{"value":"/ appropriate.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26525,"byte_end":26541,"line_start":809,"line_end":809,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26546,"byte_end":26549,"line_start":810,"line_end":810,"column_start":5,"column_end":8}},{"value":"/ Reading the randomness from the OS may fail, and any error is","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26554,"byte_end":26619,"line_start":811,"line_end":811,"column_start":5,"column_end":70}},{"value":"/ propagated via the `io::Result` return value.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26624,"byte_end":26673,"line_start":812,"line_end":812,"column_start":5,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":624},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27791,"byte_end":27799,"line_start":851,"line_end":851,"column_start":8,"column_end":16},"name":"weak_rng","qualname":"::weak_rng","value":"pub fn weak_rng() -> XorShiftRng","parent":null,"children":[],"decl_id":null,"docs":" Create a weak random number generator with a default algorithm and seed.","sig":null,"attributes":[{"value":"/ Create a weak random number generator with a default algorithm and seed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27351,"byte_end":27427,"line_start":842,"line_end":842,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27428,"byte_end":27431,"line_start":843,"line_end":843,"column_start":1,"column_end":4}},{"value":"/ It returns the fastest `Rng` algorithm currently available in Rust without","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27432,"byte_end":27510,"line_start":844,"line_end":844,"column_start":1,"column_end":79}},{"value":"/ consideration for cryptography or security. If you require a specifically","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27511,"byte_end":27588,"line_start":845,"line_end":845,"column_start":1,"column_end":78}},{"value":"/ seeded `Rng` for consistency over time you should pick one algorithm and","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27589,"byte_end":27665,"line_start":846,"line_end":846,"column_start":1,"column_end":77}},{"value":"/ create the `Rng` yourself.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27666,"byte_end":27696,"line_start":847,"line_end":847,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27697,"byte_end":27700,"line_start":848,"line_end":848,"column_start":1,"column_end":4}},{"value":"/ This will read randomness from the operating system to seed the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27701,"byte_end":27768,"line_start":849,"line_end":849,"column_start":1,"column_end":68}},{"value":"/ generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27769,"byte_end":27783,"line_start":850,"line_end":850,"column_start":1,"column_end":15}}]},{"kind":"Struct","id":{"krate":0,"index":1194},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28462,"byte_end":28471,"line_start":874,"line_end":874,"column_start":12,"column_end":21},"name":"ThreadRng","qualname":"::ThreadRng","value":"ThreadRng {  }","parent":null,"children":[{"krate":0,"index":1195}],"decl_id":null,"docs":" The thread-local RNG.\n","sig":null,"attributes":[{"value":"/ The thread-local RNG.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28408,"byte_end":28433,"line_start":872,"line_end":872,"column_start":1,"column_end":26}}]},{"kind":"Function","id":{"krate":0,"index":631},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":29104,"byte_end":29114,"line_start":889,"line_end":889,"column_start":8,"column_end":18},"name":"thread_rng","qualname":"::thread_rng","value":"pub fn thread_rng() -> ThreadRng","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the lazily-initialized thread-local random number\n generator, seeded by the system. Intended to be used in method\n chaining style, e.g. `thread_rng().gen::<i32>()`.","sig":null,"attributes":[{"value":"/ Retrieve the lazily-initialized thread-local random number","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28515,"byte_end":28577,"line_start":878,"line_end":878,"column_start":1,"column_end":63}},{"value":"/ generator, seeded by the system. Intended to be used in method","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28578,"byte_end":28644,"line_start":879,"line_end":879,"column_start":1,"column_end":67}},{"value":"/ chaining style, e.g. `thread_rng().gen::<i32>()`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28645,"byte_end":28698,"line_start":880,"line_end":880,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28699,"byte_end":28702,"line_start":881,"line_end":881,"column_start":1,"column_end":4}},{"value":"/ The RNG provided will reseed itself from the operating system","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28703,"byte_end":28768,"line_start":882,"line_end":882,"column_start":1,"column_end":66}},{"value":"/ after generating a certain amount of randomness.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28769,"byte_end":28821,"line_start":883,"line_end":883,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28822,"byte_end":28825,"line_start":884,"line_end":884,"column_start":1,"column_end":4}},{"value":"/ The internal RNG used is platform and architecture dependent, even","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28826,"byte_end":28896,"line_start":885,"line_end":885,"column_start":1,"column_end":71}},{"value":"/ if the operating system random number generator is rigged to give","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28897,"byte_end":28966,"line_start":886,"line_end":886,"column_start":1,"column_end":70}},{"value":"/ the same sequence always. If absolute consistency is required,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28967,"byte_end":29033,"line_start":887,"line_end":887,"column_start":1,"column_end":67}},{"value":"/ explicitly select an RNG, e.g. `IsaacRng` or `Isaac64Rng`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":29034,"byte_end":29096,"line_start":888,"line_end":888,"column_start":1,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":637},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31057,"byte_end":31063,"line_start":963,"line_end":963,"column_start":8,"column_end":14},"name":"random","qualname":"::random","value":"pub fn random<T: Rand>() -> T","parent":null,"children":[],"decl_id":null,"docs":" Generates a random value using the thread-local random number generator.","sig":null,"attributes":[{"value":"/ Generates a random value using the thread-local random number generator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30023,"byte_end":30099,"line_start":920,"line_end":920,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30100,"byte_end":30103,"line_start":921,"line_end":921,"column_start":1,"column_end":4}},{"value":"/ `random()` can generate various types of random things, and so may require","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30104,"byte_end":30182,"line_start":922,"line_end":922,"column_start":1,"column_end":79}},{"value":"/ type hinting to generate the specific type you want.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30183,"byte_end":30239,"line_start":923,"line_end":923,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30240,"byte_end":30243,"line_start":924,"line_end":924,"column_start":1,"column_end":4}},{"value":"/ This function uses the thread local random number generator. This means","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30244,"byte_end":30319,"line_start":925,"line_end":925,"column_start":1,"column_end":76}},{"value":"/ that if you're calling `random()` in a loop, caching the generator can","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30320,"byte_end":30394,"line_start":926,"line_end":926,"column_start":1,"column_end":75}},{"value":"/ increase performance. An example is shown below.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30395,"byte_end":30447,"line_start":927,"line_end":927,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30448,"byte_end":30451,"line_start":928,"line_end":928,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30452,"byte_end":30466,"line_start":929,"line_end":929,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30467,"byte_end":30470,"line_start":930,"line_end":930,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30471,"byte_end":30478,"line_start":931,"line_end":931,"column_start":1,"column_end":8}},{"value":"/ let x = rand::random::<u8>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30479,"byte_end":30512,"line_start":932,"line_end":932,"column_start":1,"column_end":34}},{"value":"/ println!(\"{}\", x);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30513,"byte_end":30535,"line_start":933,"line_end":933,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30536,"byte_end":30539,"line_start":934,"line_end":934,"column_start":1,"column_end":4}},{"value":"/ let y = rand::random::<f64>();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30540,"byte_end":30574,"line_start":935,"line_end":935,"column_start":1,"column_end":35}},{"value":"/ println!(\"{}\", y);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30575,"byte_end":30597,"line_start":936,"line_end":936,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30598,"byte_end":30601,"line_start":937,"line_end":937,"column_start":1,"column_end":4}},{"value":"/ if rand::random() { // generates a boolean","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30602,"byte_end":30648,"line_start":938,"line_end":938,"column_start":1,"column_end":47}},{"value":"/     println!(\"Better lucky than good!\");","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30649,"byte_end":30693,"line_start":939,"line_end":939,"column_start":1,"column_end":45}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30694,"byte_end":30699,"line_start":940,"line_end":940,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30700,"byte_end":30707,"line_start":941,"line_end":941,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30708,"byte_end":30711,"line_start":942,"line_end":942,"column_start":1,"column_end":4}},{"value":"/ Caching the thread local random number generator:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30712,"byte_end":30765,"line_start":943,"line_end":943,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30766,"byte_end":30769,"line_start":944,"line_end":944,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30770,"byte_end":30777,"line_start":945,"line_end":945,"column_start":1,"column_end":8}},{"value":"/ use rand::Rng;","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30778,"byte_end":30796,"line_start":946,"line_end":946,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30797,"byte_end":30800,"line_start":947,"line_end":947,"column_start":1,"column_end":4}},{"value":"/ let mut v = vec![1, 2, 3];","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30801,"byte_end":30831,"line_start":948,"line_end":948,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30832,"byte_end":30835,"line_start":949,"line_end":949,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30836,"byte_end":30863,"line_start":950,"line_end":950,"column_start":1,"column_end":28}},{"value":"/     *x = rand::random()","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30864,"byte_end":30891,"line_start":951,"line_end":951,"column_start":1,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30892,"byte_end":30897,"line_start":952,"line_end":952,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30898,"byte_end":30901,"line_start":953,"line_end":953,"column_start":1,"column_end":4}},{"value":"/ // would be faster as","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30902,"byte_end":30927,"line_start":954,"line_end":954,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30928,"byte_end":30931,"line_start":955,"line_end":955,"column_start":1,"column_end":4}},{"value":"/ let mut rng = rand::thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30932,"byte_end":30969,"line_start":956,"line_end":956,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30970,"byte_end":30973,"line_start":957,"line_end":957,"column_start":1,"column_end":4}},{"value":"/ for x in v.iter_mut() {","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":30974,"byte_end":31001,"line_start":958,"line_end":958,"column_start":1,"column_end":28}},{"value":"/     *x = rng.gen();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31002,"byte_end":31025,"line_start":959,"line_end":959,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31026,"byte_end":31031,"line_start":960,"line_end":960,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31032,"byte_end":31039,"line_start":961,"line_end":961,"column_start":1,"column_end":8}},{"value":"inline","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31040,"byte_end":31049,"line_start":962,"line_end":962,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31367,"byte_end":31373,"line_start":978,"line_end":978,"column_start":8,"column_end":14},"name":"sample","qualname":"::sample","value":"pub fn sample<T, I, R>(&mut R, I, usize) -> Vec<T> where I: IntoIterator<Item\n= T>, R: Rng","parent":null,"children":[],"decl_id":null,"docs":" Randomly sample up to `amount` elements from an iterator.","sig":null,"attributes":[{"value":"/ Randomly sample up to `amount` elements from an iterator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31108,"byte_end":31169,"line_start":967,"line_end":967,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31170,"byte_end":31173,"line_start":968,"line_end":968,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31174,"byte_end":31187,"line_start":969,"line_end":969,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31188,"byte_end":31191,"line_start":970,"line_end":970,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31192,"byte_end":31203,"line_start":971,"line_end":971,"column_start":1,"column_end":12}},{"value":"/ use rand::{thread_rng, sample};","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31204,"byte_end":31239,"line_start":972,"line_end":972,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31240,"byte_end":31243,"line_start":973,"line_end":973,"column_start":1,"column_end":4}},{"value":"/ let mut rng = thread_rng();","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31244,"byte_end":31275,"line_start":974,"line_end":974,"column_start":1,"column_end":32}},{"value":"/ let sample = sample(&mut rng, 1..100, 5);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31276,"byte_end":31321,"line_start":975,"line_end":975,"column_start":1,"column_end":46}},{"value":"/ println!(\"{:?}\", sample);","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31322,"byte_end":31351,"line_start":976,"line_end":976,"column_start":1,"column_end":30}},{"value":"/ ```","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":31352,"byte_end":31359,"line_start":977,"line_end":977,"column_start":1,"column_end":8}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55030,"byte_end":55035,"line_start":56,"line_end":56,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":42}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55366,"byte_end":55371,"line_start":65,"line_end":65,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":45}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55523,"byte_end":55528,"line_start":69,"line_end":69,"column_start":51,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":49}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":63941,"byte_end":63946,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":69}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64582,"byte_end":64597,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64815,"byte_end":64830,"line_start":123,"line_end":123,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":73}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65072,"byte_end":65077,"line_start":134,"line_end":134,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65181,"byte_end":65196,"line_start":137,"line_end":137,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":78}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65300,"byte_end":65315,"line_start":140,"line_end":140,"column_start":22,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":81}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65431,"byte_end":65436,"line_start":144,"line_end":144,"column_start":33,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65709,"byte_end":65724,"line_start":153,"line_end":153,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":87}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65939,"byte_end":65954,"line_start":160,"line_end":160,"column_start":33,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":90}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67498,"byte_end":67508,"line_start":212,"line_end":212,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":93}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67925,"byte_end":67935,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68050,"byte_end":68060,"line_start":228,"line_end":228,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":98}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69074,"byte_end":69081,"line_start":265,"line_end":265,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69542,"byte_end":69549,"line_start":279,"line_end":279,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":103}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69664,"byte_end":69671,"line_start":282,"line_end":282,"column_start":33,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70230,"byte_end":70238,"line_start":306,"line_end":306,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":109}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70557,"byte_end":70565,"line_start":317,"line_end":317,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":111}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70680,"byte_end":70688,"line_start":320,"line_end":320,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73564,"byte_end":73578,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":127}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75260,"byte_end":75266,"line_start":97,"line_end":97,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":133}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75682,"byte_end":75688,"line_start":113,"line_end":113,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":135}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75803,"byte_end":75809,"line_start":116,"line_end":116,"column_start":33,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":138}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76508,"byte_end":76517,"line_start":144,"line_end":144,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76917,"byte_end":76926,"line_start":157,"line_end":157,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":143}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":77041,"byte_end":77050,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":146}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79365,"byte_end":79369,"line_start":41,"line_end":41,"column_start":15,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":158}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80373,"byte_end":80376,"line_start":80,"line_end":80,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80678,"byte_end":80681,"line_start":90,"line_end":90,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80796,"byte_end":80799,"line_start":93,"line_end":93,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":169}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41088,"byte_end":41098,"line_start":60,"line_end":60,"column_start":20,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41127,"byte_end":41137,"line_start":61,"line_end":61,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":186}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41218,"byte_end":41228,"line_start":65,"line_end":65,"column_start":33,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41360,"byte_end":41370,"line_start":69,"line_end":69,"column_start":44,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":193}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41470,"byte_end":41480,"line_start":75,"line_end":75,"column_start":11,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":197}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42925,"byte_end":42939,"line_start":121,"line_end":121,"column_start":20,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":206}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":44324,"byte_end":44338,"line_start":157,"line_end":157,"column_start":34,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":210}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":44471,"byte_end":44485,"line_start":161,"line_end":161,"column_start":45,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":215}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107835,"byte_end":107843,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253},{"krate":0,"index":257}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":111956,"byte_end":111964,"line_start":185,"line_end":185,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":112037,"byte_end":112045,"line_start":191,"line_end":191,"column_start":14,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":266}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":112875,"byte_end":112883,"line_start":215,"line_end":215,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":269},{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":113844,"byte_end":113852,"line_start":244,"line_end":244,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":273}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":115166,"byte_end":115176,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":281},{"krate":0,"index":282},{"krate":0,"index":287}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":119930,"byte_end":119940,"line_start":430,"line_end":430,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":296}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":120015,"byte_end":120025,"line_start":436,"line_end":436,"column_start":14,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":298},{"krate":0,"index":299}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":120596,"byte_end":120606,"line_start":458,"line_end":458,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":302},{"krate":0,"index":304}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":121572,"byte_end":121582,"line_start":487,"line_end":487,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129622,"byte_end":129631,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":327},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":332}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":133247,"byte_end":133256,"line_start":185,"line_end":185,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":133531,"byte_end":133540,"line_start":198,"line_end":198,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":337},{"krate":0,"index":339}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":134172,"byte_end":134181,"line_start":221,"line_end":221,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":341}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138758,"byte_end":138770,"line_start":32,"line_end":32,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":361},{"krate":0,"index":362}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139715,"byte_end":139727,"line_start":60,"line_end":60,"column_start":41,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":366},{"krate":0,"index":367},{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140289,"byte_end":140301,"line_start":81,"line_end":81,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":373},{"krate":0,"index":374}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":142032,"byte_end":142049,"line_start":138,"line_end":138,"column_start":40,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":380}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":142152,"byte_end":142169,"line_start":143,"line_end":143,"column_start":18,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":382}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/rand_impls.rs","byte_start":150443,"byte_end":150449,"line_start":222,"line_end":222,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153302,"byte_end":153307,"line_start":32,"line_end":32,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153439,"byte_end":153444,"line_start":39,"line_end":39,"column_start":14,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":157572,"byte_end":157577,"line_start":171,"line_end":171,"column_start":10,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":494}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":157941,"byte_end":157946,"line_start":184,"line_end":184,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":496},{"krate":0,"index":497},{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170203,"byte_end":170210,"line_start":37,"line_end":37,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":510}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170380,"byte_end":170387,"line_start":46,"line_end":46,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":513},{"krate":0,"index":515},{"krate":0,"index":517}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20020,"byte_end":20023,"line_start":579,"line_end":579,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20773,"byte_end":20782,"line_start":612,"line_end":612,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":577},{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21228,"byte_end":21242,"line_start":630,"line_end":630,"column_start":31,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":586},{"krate":0,"index":587}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23035,"byte_end":23046,"line_start":693,"line_end":693,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23598,"byte_end":23609,"line_start":710,"line_end":710,"column_start":14,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":596}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23925,"byte_end":23936,"line_start":724,"line_end":724,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":24703,"byte_end":24714,"line_start":750,"line_end":750,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":604}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26109,"byte_end":26115,"line_start":801,"line_end":801,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":615}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26795,"byte_end":26801,"line_start":818,"line_end":818,"column_start":14,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":618},{"krate":0,"index":619}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27014,"byte_end":27020,"line_start":830,"line_end":830,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":622},{"krate":0,"index":623}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28073,"byte_end":28090,"line_start":861,"line_end":861,"column_start":38,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":628}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":29723,"byte_end":29732,"line_start":905,"line_end":905,"column_start":14,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":634},{"krate":0,"index":635},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9752,"byte_end":9765,"line_start":266,"line_end":266,"column_start":9,"column_end":22},"ref_id":{"krate":0,"index":19}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40016,"byte_end":40021,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40031,"byte_end":40036,"line_start":30,"line_end":30,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":57}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40046,"byte_end":40052,"line_start":31,"line_end":31,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":116}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40062,"byte_end":40073,"line_start":32,"line_end":32,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":148}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9775,"byte_end":9780,"line_start":267,"line_end":267,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":235}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9790,"byte_end":9796,"line_start":268,"line_end":268,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":308}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9806,"byte_end":9815,"line_start":269,"line_end":269,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":345}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9841,"byte_end":9843,"line_start":271,"line_end":271,"column_start":9,"column_end":11},"ref_id":{"krate":0,"index":436}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":9853,"byte_end":9857,"line_start":272,"line_end":272,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":499}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55030,"byte_end":55035,"line_start":56,"line_end":56,"column_start":35,"column_end":40},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":643},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55366,"byte_end":55371,"line_start":65,"line_end":65,"column_start":40,"column_end":45},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":643},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55523,"byte_end":55528,"line_start":69,"line_end":69,"column_start":51,"column_end":56},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":643},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/range.rs","byte_start":55842,"byte_end":55847,"line_start":78,"line_end":78,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":2,"index":2079},"to":{"krate":0,"index":51}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":63941,"byte_end":63946,"line_start":95,"line_end":95,"column_start":6,"column_end":11},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":701},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64582,"byte_end":64597,"line_start":114,"line_end":114,"column_start":6,"column_end":21},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":719},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":64815,"byte_end":64830,"line_start":123,"line_end":123,"column_start":6,"column_end":21},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":725},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65072,"byte_end":65077,"line_start":134,"line_end":134,"column_start":22,"column_end":27},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":701},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65181,"byte_end":65196,"line_start":137,"line_end":137,"column_start":22,"column_end":37},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":719},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65300,"byte_end":65315,"line_start":140,"line_end":140,"column_start":22,"column_end":37},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":725},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65431,"byte_end":65436,"line_start":144,"line_end":144,"column_start":33,"column_end":38},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":701},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65709,"byte_end":65724,"line_start":153,"line_end":153,"column_start":33,"column_end":48},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":719},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":65939,"byte_end":65954,"line_start":160,"line_end":160,"column_start":33,"column_end":48},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":725},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67498,"byte_end":67508,"line_start":212,"line_end":212,"column_start":6,"column_end":16},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":732},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":67925,"byte_end":67935,"line_start":225,"line_end":225,"column_start":22,"column_end":32},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":732},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":68050,"byte_end":68060,"line_start":228,"line_end":228,"column_start":33,"column_end":43},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":732},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69074,"byte_end":69081,"line_start":265,"line_end":265,"column_start":6,"column_end":13},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":746},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69542,"byte_end":69549,"line_start":279,"line_end":279,"column_start":22,"column_end":29},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":746},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":69664,"byte_end":69671,"line_start":282,"line_end":282,"column_start":33,"column_end":40},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":746},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70230,"byte_end":70238,"line_start":306,"line_end":306,"column_start":6,"column_end":14},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70557,"byte_end":70565,"line_start":317,"line_end":317,"column_start":22,"column_end":30},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":753},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/gamma.rs","byte_start":70680,"byte_end":70688,"line_start":320,"line_end":320,"column_start":33,"column_end":41},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":753},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":73564,"byte_end":73578,"line_start":39,"line_end":39,"column_start":15,"column_end":29},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":759},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75260,"byte_end":75266,"line_start":97,"line_end":97,"column_start":6,"column_end":12},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":765},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75682,"byte_end":75688,"line_start":113,"line_end":113,"column_start":22,"column_end":28},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":765},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":75803,"byte_end":75809,"line_start":116,"line_end":116,"column_start":33,"column_end":39},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":765},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76508,"byte_end":76517,"line_start":144,"line_end":144,"column_start":6,"column_end":15},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":771},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":76917,"byte_end":76926,"line_start":157,"line_end":157,"column_start":22,"column_end":31},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/normal.rs","byte_start":77041,"byte_end":77050,"line_start":160,"line_end":160,"column_start":33,"column_end":42},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":771},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":79365,"byte_end":79369,"line_start":41,"line_end":41,"column_start":15,"column_end":19},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":776},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80373,"byte_end":80376,"line_start":80,"line_end":80,"column_start":6,"column_end":9},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":782},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80678,"byte_end":80681,"line_start":90,"line_end":90,"column_start":22,"column_end":25},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":782},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/exponential.rs","byte_start":80796,"byte_end":80799,"line_start":93,"line_end":93,"column_start":33,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":782},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":40775,"byte_end":40781,"line_start":49,"line_end":49,"column_start":39,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":171},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41088,"byte_end":41098,"line_start":60,"line_end":60,"column_start":20,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":2084}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41127,"byte_end":41137,"line_start":61,"line_end":61,"column_start":21,"column_end":31},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":179},"to":{"krate":2,"index":1763}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41218,"byte_end":41228,"line_start":65,"line_end":65,"column_start":33,"column_end":43},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":179},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41360,"byte_end":41370,"line_start":69,"line_end":69,"column_start":44,"column_end":54},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":179},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":41470,"byte_end":41480,"line_start":75,"line_end":75,"column_start":11,"column_end":21},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":179},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":42925,"byte_end":42939,"line_start":121,"line_end":121,"column_start":20,"column_end":34},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":198},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":44324,"byte_end":44338,"line_start":157,"line_end":157,"column_start":34,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":198},"to":{"krate":0,"index":171}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/distributions/mod.rs","byte_start":44471,"byte_end":44485,"line_start":161,"line_end":161,"column_start":45,"column_end":59},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":198},"to":{"krate":0,"index":175}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":107835,"byte_end":107843,"line_start":51,"line_end":51,"column_start":6,"column_end":14},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":111956,"byte_end":111964,"line_start":185,"line_end":185,"column_start":16,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":1763}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":112037,"byte_end":112045,"line_start":191,"line_end":191,"column_start":14,"column_end":22},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":112875,"byte_end":112883,"line_start":215,"line_end":215,"column_start":37,"column_end":45},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":113844,"byte_end":113852,"line_start":244,"line_end":244,"column_start":15,"column_end":23},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":115166,"byte_end":115176,"line_start":293,"line_end":293,"column_start":6,"column_end":16},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":808},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":119930,"byte_end":119940,"line_start":430,"line_end":430,"column_start":16,"column_end":26},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":808},"to":{"krate":2,"index":1763}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":120015,"byte_end":120025,"line_start":436,"line_end":436,"column_start":14,"column_end":24},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":808},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":120596,"byte_end":120606,"line_start":458,"line_end":458,"column_start":37,"column_end":47},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":808},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/isaac.rs","byte_start":121572,"byte_end":121582,"line_start":487,"line_end":487,"column_start":15,"column_end":25},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":808},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":129622,"byte_end":129631,"line_start":80,"line_end":80,"column_start":6,"column_end":15},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":133247,"byte_end":133256,"line_start":185,"line_end":185,"column_start":14,"column_end":23},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":820},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":133531,"byte_end":133540,"line_start":198,"line_end":198,"column_start":37,"column_end":46},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":820},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/chacha.rs","byte_start":134172,"byte_end":134181,"line_start":221,"line_end":221,"column_start":15,"column_end":24},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":820},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":138758,"byte_end":138770,"line_start":32,"line_end":32,"column_start":33,"column_end":45},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":351},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":139715,"byte_end":139727,"line_start":60,"line_end":60,"column_start":41,"column_end":53},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":351},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":140289,"byte_end":140301,"line_start":81,"line_end":81,"column_start":33,"column_end":45},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":351},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":142032,"byte_end":142049,"line_start":138,"line_end":138,"column_start":40,"column_end":57},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":831},"to":{"krate":0,"index":375}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/reseeding.rs","byte_start":142152,"byte_end":142169,"line_start":143,"line_end":143,"column_start":18,"column_end":35},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":831},"to":{"krate":2,"index":2062}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/rand_impls.rs","byte_start":150443,"byte_end":150449,"line_start":222,"line_end":222,"column_start":23,"column_end":29},"kind":{"Impl":{"id":85}},"from":{"krate":2,"index":34589},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153302,"byte_end":153307,"line_start":32,"line_end":32,"column_start":6,"column_end":11},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":441},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":153439,"byte_end":153444,"line_start":39,"line_end":39,"column_start":14,"column_end":19},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":441},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":157572,"byte_end":157577,"line_start":171,"line_end":171,"column_start":10,"column_end":15},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":485},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/os.rs","byte_start":157941,"byte_end":157946,"line_start":184,"line_end":184,"column_start":18,"column_end":23},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":485},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170203,"byte_end":170210,"line_start":37,"line_end":37,"column_start":15,"column_end":22},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/read.rs","byte_start":170380,"byte_end":170387,"line_start":46,"line_end":46,"column_start":23,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":505},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":10014,"byte_end":10019,"line_start":280,"line_end":280,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":2,"index":2079},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20020,"byte_end":20023,"line_start":579,"line_end":579,"column_start":25,"column_end":28},"kind":{"Impl":{"id":92}},"from":{"krate":5,"index":105},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":20773,"byte_end":20782,"line_start":612,"line_end":612,"column_start":40,"column_end":49},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":567},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21228,"byte_end":21242,"line_start":630,"line_end":630,"column_start":31,"column_end":45},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":21710,"byte_end":21713,"line_start":644,"line_end":644,"column_start":30,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":524},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23035,"byte_end":23046,"line_start":693,"line_end":693,"column_start":6,"column_end":17},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1180},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23598,"byte_end":23609,"line_start":710,"line_end":710,"column_start":14,"column_end":25},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1180},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":23925,"byte_end":23936,"line_start":724,"line_end":724,"column_start":32,"column_end":43},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1180},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":24703,"byte_end":24714,"line_start":750,"line_end":750,"column_start":15,"column_end":26},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1180},"to":{"krate":0,"index":521}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26109,"byte_end":26115,"line_start":801,"line_end":801,"column_start":6,"column_end":12},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1189},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":26795,"byte_end":26801,"line_start":818,"line_end":818,"column_start":14,"column_end":20},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1189},"to":{"krate":0,"index":524}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":27014,"byte_end":27020,"line_start":830,"line_end":830,"column_start":39,"column_end":45},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1189},"to":{"krate":0,"index":589}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":28073,"byte_end":28090,"line_start":861,"line_end":861,"column_start":38,"column_end":55},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":625},"to":{"krate":0,"index":375}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/rand-0.3.15/src/lib.rs","byte_start":29723,"byte_end":29732,"line_start":905,"line_end":905,"column_start":14,"column_end":23},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1194},"to":{"krate":0,"index":524}}]}