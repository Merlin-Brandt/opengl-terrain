{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12","program":"/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","wayland_client","/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","--cfg","feature=\"cursor\"","--cfg","feature=\"dlopen\"","--cfg","feature=\"egl\"","-C","metadata=c0ba44edd99ac8c4","-C","extra-filename=-c0ba44edd99ac8c4","--out-dir","/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","-L","dependency=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps","--extern","bitflags=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libbitflags-7c54ed20e22c65d3.rmeta","--extern","crossbeam=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libcrossbeam-26abfe650a0a6d76.rmeta","--extern","dlib=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libdlib-1a84487849753089.rmeta","--extern","libc=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/liblibc-e39463c6afe14535.rmeta","--extern","wayland_sys=/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libwayland_sys-10c4734349a1e784.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/home/merlin/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu"],"output":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/deps/libwayland_client-c0ba44edd99ac8c4.rmeta"},"prelude":{"crate_id":{"name":"wayland_client","disambiguator":[17330505618195348425,7993498850147431163]},"crate_root":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src","external_crates":[{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[761217931017169021,11182540429948991214]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[2858088706689600179,17176650857302713463]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[15879356389475821678,5643460802079966270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[8920863043171661139,6394972819860350927]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[7444524629517225000,3862632196027588969]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[5618285707243958873,10527758992658711681]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[15786611459077781418,3427959288485188730]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[7447291644365204408,1470667821728193545]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":9,"id":{"name":"hashbrown","disambiguator":[6110035509052048891,1769159197608489149]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[2517392378542245850,1007682534799069383]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":11,"id":{"name":"rustc_demangle","disambiguator":[10841319041269114641,5435836511512932455]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":12,"id":{"name":"addr2line","disambiguator":[11288057705607810041,2650294536215064940]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":13,"id":{"name":"gimli","disambiguator":[3615958118357796166,6340715783279141278]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":14,"id":{"name":"object","disambiguator":[5192402504599619502,9026648258735454425]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":15,"id":{"name":"miniz_oxide","disambiguator":[18157078792379649936,5967302931976128037]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":16,"id":{"name":"adler","disambiguator":[7273518522570529581,7645160771462661682]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[14392049376104722820,4331661258852677409]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":18,"id":{"name":"bitflags","disambiguator":[1996057141650416660,18407607413809197464]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":19,"id":{"name":"crossbeam","disambiguator":[1107982907732944905,10774757371342031438]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":20,"id":{"name":"dlib","disambiguator":[13369473785532471733,3333267479558229486]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":21,"id":{"name":"libloading","disambiguator":[14591493146916808766,15511369112728705240]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":22,"id":{"name":"lazy_static","disambiguator":[4923880990971198889,17108355654335241849]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":23,"id":{"name":"libc","disambiguator":[12211130183356822035,9476985101973045270]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":24,"id":{"name":"wayland_sys","disambiguator":[1976268131441073593,833277373297861959]}},{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","num":25,"id":{"name":"lazy_static","disambiguator":[11901220129464912963,3851566130377908894]}}],"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":0,"byte_end":1729,"line_start":1,"line_end":59,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":483},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18215,"byte_end":18227,"line_start":8,"line_end":8,"column_start":36,"column_end":48},"alias_span":null,"name":"WlCompositor","value":"","parent":{"krate":0,"index":105}},{"kind":"Use","ref_id":{"krate":0,"index":928},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18229,"byte_end":18237,"line_start":8,"line_end":8,"column_start":50,"column_end":58},"alias_span":null,"name":"WlRegion","value":"","parent":{"krate":0,"index":105}},{"kind":"Use","ref_id":{"krate":0,"index":756},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18239,"byte_end":18248,"line_start":8,"line_end":8,"column_start":60,"column_end":69},"alias_span":null,"name":"WlSurface","value":"","parent":{"krate":0,"index":105}},{"kind":"Use","ref_id":{"krate":0,"index":1613},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18285,"byte_end":18299,"line_start":9,"line_end":9,"column_start":35,"column_end":49},"alias_span":null,"name":"WlSurfaceEvent","value":"","parent":{"krate":0,"index":105}},{"kind":"Use","ref_id":{"krate":0,"index":635},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18361,"byte_end":18373,"line_start":13,"line_end":13,"column_start":36,"column_end":48},"alias_span":null,"name":"WlDataDevice","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":663},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18375,"byte_end":18394,"line_start":13,"line_end":13,"column_start":50,"column_end":69},"alias_span":null,"name":"WlDataDeviceManager","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":579},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18396,"byte_end":18407,"line_start":13,"line_end":13,"column_start":71,"column_end":82},"alias_span":null,"name":"WlDataOffer","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":609},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18409,"byte_end":18421,"line_start":13,"line_end":13,"column_start":84,"column_end":96},"alias_span":null,"name":"WlDataSource","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":1339},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18459,"byte_end":18476,"line_start":14,"line_end":14,"column_start":36,"column_end":53},"alias_span":null,"name":"WlDataDeviceEvent","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":1312},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18478,"byte_end":18494,"line_start":14,"line_end":14,"column_start":55,"column_end":71},"alias_span":null,"name":"WlDataOfferEvent","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":1319},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18496,"byte_end":18513,"line_start":14,"line_end":14,"column_start":73,"column_end":90},"alias_span":null,"name":"WlDataSourceEvent","value":"","parent":{"krate":0,"index":111}},{"kind":"Use","ref_id":{"krate":0,"index":903},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18569,"byte_end":18577,"line_start":17,"line_end":17,"column_start":35,"column_end":43},"alias_span":null,"name":"WlOutput","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":0,"index":1991},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18613,"byte_end":18626,"line_start":18,"line_end":18,"column_start":35,"column_end":48},"alias_span":null,"name":"WlOutputEvent","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":0,"index":921},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18663,"byte_end":18675,"line_start":19,"line_end":19,"column_start":36,"column_end":48},"alias_span":null,"name":"WlOutputMode","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":0,"index":1856},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18677,"byte_end":18693,"line_start":19,"line_end":19,"column_start":50,"column_end":66},"alias_span":null,"name":"WlOutputSubpixel","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":0,"index":1877},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18695,"byte_end":18712,"line_start":19,"line_end":19,"column_start":68,"column_end":85},"alias_span":null,"name":"WlOutputTransform","value":"","parent":{"krate":0,"index":121}},{"kind":"Use","ref_id":{"krate":0,"index":855},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18768,"byte_end":18778,"line_start":23,"line_end":23,"column_start":36,"column_end":46},"alias_span":null,"name":"WlKeyboard","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":827},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18780,"byte_end":18789,"line_start":23,"line_end":23,"column_start":48,"column_end":57},"alias_span":null,"name":"WlPointer","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":796},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18791,"byte_end":18797,"line_start":23,"line_end":23,"column_start":59,"column_end":65},"alias_span":null,"name":"WlSeat","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":880},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18799,"byte_end":18806,"line_start":23,"line_end":23,"column_start":67,"column_end":74},"alias_span":null,"name":"WlTouch","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1796},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18844,"byte_end":18859,"line_start":24,"line_end":24,"column_start":36,"column_end":51},"alias_span":null,"name":"WlKeyboardEvent","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1749},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18861,"byte_end":18875,"line_start":24,"line_end":24,"column_start":53,"column_end":67},"alias_span":null,"name":"WlPointerEvent","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1714},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18877,"byte_end":18888,"line_start":24,"line_end":24,"column_start":69,"column_end":80},"alias_span":null,"name":"WlSeatEvent","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1830},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18890,"byte_end":18902,"line_start":24,"line_end":24,"column_start":82,"column_end":94},"alias_span":null,"name":"WlTouchEvent","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1787},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18940,"byte_end":18958,"line_start":25,"line_end":25,"column_start":36,"column_end":54},"alias_span":null,"name":"WlKeyboardKeyState","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1778},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18960,"byte_end":18982,"line_start":25,"line_end":25,"column_start":56,"column_end":78},"alias_span":null,"name":"WlKeyboardKeymapFormat","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1740},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18984,"byte_end":18997,"line_start":25,"line_end":25,"column_start":80,"column_end":93},"alias_span":null,"name":"WlPointerAxis","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":1731},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18999,"byte_end":19019,"line_start":25,"line_end":25,"column_start":95,"column_end":115},"alias_span":null,"name":"WlPointerButtonState","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":812},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19021,"byte_end":19037,"line_start":25,"line_end":25,"column_start":117,"column_end":133},"alias_span":null,"name":"WlSeatCapability","value":"","parent":{"krate":0,"index":128}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19094,"byte_end":19101,"line_start":29,"line_end":29,"column_start":36,"column_end":43},"alias_span":null,"name":"WlShell","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":708},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19103,"byte_end":19117,"line_start":29,"line_end":29,"column_start":45,"column_end":59},"alias_span":null,"name":"WlShellSurface","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":1591},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19154,"byte_end":19173,"line_start":30,"line_end":30,"column_start":35,"column_end":54},"alias_span":null,"name":"WlShellSurfaceEvent","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":1576},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19210,"byte_end":19240,"line_start":31,"line_end":31,"column_start":36,"column_end":66},"alias_span":null,"name":"WlShellSurfaceFullscreenMethod","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":724},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19242,"byte_end":19262,"line_start":31,"line_end":31,"column_start":68,"column_end":88},"alias_span":null,"name":"WlShellSurfaceResize","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":726},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19264,"byte_end":19287,"line_start":31,"line_end":31,"column_start":90,"column_end":113},"alias_span":null,"name":"WlShellSurfaceTransient","value":"","parent":{"krate":0,"index":145}},{"kind":"Use","ref_id":{"krate":0,"index":556},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19342,"byte_end":19350,"line_start":35,"line_end":35,"column_start":36,"column_end":44},"alias_span":null,"name":"WlBuffer","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":531},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19352,"byte_end":19357,"line_start":35,"line_end":35,"column_start":46,"column_end":51},"alias_span":null,"name":"WlShm","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":506},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19359,"byte_end":19368,"line_start":35,"line_end":35,"column_start":53,"column_end":62},"alias_span":null,"name":"WlShmPool","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":1307},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19406,"byte_end":19419,"line_start":36,"line_end":36,"column_start":36,"column_end":49},"alias_span":null,"name":"WlBufferEvent","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":1301},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19421,"byte_end":19431,"line_start":36,"line_end":36,"column_start":51,"column_end":61},"alias_span":null,"name":"WlShmEvent","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":1124},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19468,"byte_end":19479,"line_start":37,"line_end":37,"column_start":35,"column_end":46},"alias_span":null,"name":"WlShmFormat","value":"","parent":{"krate":0,"index":154}},{"kind":"Use","ref_id":{"krate":0,"index":953},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19543,"byte_end":19558,"line_start":41,"line_end":41,"column_start":36,"column_end":51},"alias_span":null,"name":"WlSubcompositor","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":977},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19560,"byte_end":19572,"line_start":41,"line_end":41,"column_start":53,"column_end":65},"alias_span":null,"name":"WlSubsurface","value":"","parent":{"krate":0,"index":163}},{"kind":"Use","ref_id":{"krate":0,"index":462},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19609,"byte_end":19619,"line_start":44,"line_end":44,"column_start":32,"column_end":42},"alias_span":null,"name":"WlCallback","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":414},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19621,"byte_end":19630,"line_start":44,"line_end":44,"column_start":44,"column_end":53},"alias_span":null,"name":"WlDisplay","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":438},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19632,"byte_end":19642,"line_start":44,"line_end":44,"column_start":55,"column_end":65},"alias_span":null,"name":"WlRegistry","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":1106},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19676,"byte_end":19691,"line_start":45,"line_end":45,"column_start":32,"column_end":47},"alias_span":null,"name":"WlCallbackEvent","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":1084},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19693,"byte_end":19707,"line_start":45,"line_end":45,"column_start":49,"column_end":63},"alias_span":null,"name":"WlDisplayEvent","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":1095},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19709,"byte_end":19724,"line_start":45,"line_end":45,"column_start":65,"column_end":80},"alias_span":null,"name":"WlRegistryEvent","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":1009},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19758,"byte_end":19778,"line_start":47,"line_end":47,"column_start":31,"column_end":51},"alias_span":null,"name":"WaylandProtocolEvent","value":"","parent":{"krate":0,"index":101}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":361,"byte_end":366,"line_start":22,"line_end":22,"column_start":18,"column_end":23},"alias_span":null,"name":"Event","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":17},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":368,"byte_end":381,"line_start":22,"line_end":22,"column_start":25,"column_end":38},"alias_span":null,"name":"EventIterator","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":0,"byte_end":1729,"line_start":1,"line_end":59,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":28},{"krate":0,"index":32},{"krate":0,"index":56},{"krate":0,"index":101},{"krate":0,"index":192},{"krate":0,"index":193},{"krate":0,"index":194},{"krate":0,"index":195},{"krate":0,"index":196},{"krate":0,"index":197},{"krate":0,"index":2031},{"krate":0,"index":2047},{"krate":0,"index":2045},{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2038},{"krate":0,"index":2039},{"krate":0,"index":2036},{"krate":0,"index":2033},{"krate":0,"index":206},{"krate":0,"index":207}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":209},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":8800,"byte_end":8807,"line_start":7,"line_end":7,"column_start":5,"column_end":12},"name":"Wayland","qualname":"::events::Event::Wayland","value":"Event::Wayland(::wayland::WaylandProtocolEvent)","parent":{"krate":0,"index":208},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":208},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":8788,"byte_end":8793,"line_start":6,"line_end":6,"column_start":10,"column_end":15},"name":"Event","qualname":"::events::Event","value":"pub enum Event { Wayland(::wayland::WaylandProtocolEvent), }","parent":null,"children":[{"krate":0,"index":209}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":17},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":8912,"byte_end":8925,"line_start":12,"line_end":12,"column_start":12,"column_end":25},"name":"EventIterator","qualname":"::events::EventIterator","value":"EventIterator {  }","parent":null,"children":[{"krate":0,"index":18}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":20},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":9002,"byte_end":9005,"line_start":17,"line_end":17,"column_start":12,"column_end":15},"name":"new","qualname":"<EventIterator>::new","value":"pub fn new() -> EventIterator","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1010},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360021,"byte_end":10360030,"line_start":50,"line_end":50,"column_start":5,"column_end":14},"name":"WlDisplay","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlDisplay","value":"WaylandProtocolEvent::WlDisplay(ProxyId, WlDisplayEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1014},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360061,"byte_end":10360071,"line_start":51,"line_end":51,"column_start":5,"column_end":15},"name":"WlRegistry","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlRegistry","value":"WaylandProtocolEvent::WlRegistry(ProxyId, WlRegistryEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1018},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360103,"byte_end":10360113,"line_start":52,"line_end":52,"column_start":5,"column_end":15},"name":"WlCallback","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlCallback","value":"WaylandProtocolEvent::WlCallback(ProxyId, WlCallbackEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1022},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360145,"byte_end":10360150,"line_start":53,"line_end":53,"column_start":5,"column_end":10},"name":"WlShm","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlShm","value":"WaylandProtocolEvent::WlShm(ProxyId, WlShmEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1026},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360177,"byte_end":10360185,"line_start":54,"line_end":54,"column_start":5,"column_end":13},"name":"WlBuffer","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlBuffer","value":"WaylandProtocolEvent::WlBuffer(ProxyId, WlBufferEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1030},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360215,"byte_end":10360226,"line_start":55,"line_end":55,"column_start":5,"column_end":16},"name":"WlDataOffer","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlDataOffer","value":"WaylandProtocolEvent::WlDataOffer(ProxyId, WlDataOfferEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1034},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360259,"byte_end":10360271,"line_start":56,"line_end":56,"column_start":5,"column_end":17},"name":"WlDataSource","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlDataSource","value":"WaylandProtocolEvent::WlDataSource(ProxyId, WlDataSourceEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1038},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360305,"byte_end":10360317,"line_start":57,"line_end":57,"column_start":5,"column_end":17},"name":"WlDataDevice","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlDataDevice","value":"WaylandProtocolEvent::WlDataDevice(ProxyId, WlDataDeviceEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1042},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360351,"byte_end":10360365,"line_start":58,"line_end":58,"column_start":5,"column_end":19},"name":"WlShellSurface","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlShellSurface","value":"WaylandProtocolEvent::WlShellSurface(ProxyId, WlShellSurfaceEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1046},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360401,"byte_end":10360410,"line_start":59,"line_end":59,"column_start":5,"column_end":14},"name":"WlSurface","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlSurface","value":"WaylandProtocolEvent::WlSurface(ProxyId, WlSurfaceEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1050},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360441,"byte_end":10360447,"line_start":60,"line_end":60,"column_start":5,"column_end":11},"name":"WlSeat","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlSeat","value":"WaylandProtocolEvent::WlSeat(ProxyId, WlSeatEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1054},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360475,"byte_end":10360484,"line_start":61,"line_end":61,"column_start":5,"column_end":14},"name":"WlPointer","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlPointer","value":"WaylandProtocolEvent::WlPointer(ProxyId, WlPointerEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1058},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360515,"byte_end":10360525,"line_start":62,"line_end":62,"column_start":5,"column_end":15},"name":"WlKeyboard","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlKeyboard","value":"WaylandProtocolEvent::WlKeyboard(ProxyId, WlKeyboardEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1062},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360557,"byte_end":10360564,"line_start":63,"line_end":63,"column_start":5,"column_end":12},"name":"WlTouch","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlTouch","value":"WaylandProtocolEvent::WlTouch(ProxyId, WlTouchEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1066},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10360593,"byte_end":10360601,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"name":"WlOutput","qualname":"::sys::wayland::client::WaylandProtocolEvent::WlOutput","value":"WaylandProtocolEvent::WlOutput(ProxyId, WlOutputEvent)","parent":{"krate":0,"index":1009},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1009},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10359994,"byte_end":10360014,"line_start":49,"line_end":49,"column_start":10,"column_end":30},"name":"WaylandProtocolEvent","qualname":"::sys::wayland::client::WaylandProtocolEvent","value":"pub enum WaylandProtocolEvent {\n    WlDisplay(ProxyId, WlDisplayEvent),\n    WlRegistry(ProxyId, WlRegistryEvent),\n    WlCallback(ProxyId, WlCallbackEvent),\n    WlShm(ProxyId, WlShmEvent),\n    WlBuffer(ProxyId, WlBufferEvent),\n    WlDataOffer(ProxyId, WlDataOfferEvent),\n    WlDataSource(ProxyId, WlDataSourceEvent),\n    WlDataDevice(ProxyId, WlDataDeviceEvent),\n    WlShellSurface(ProxyId, WlShellSurfaceEvent),\n    WlSurface(ProxyId, WlSurfaceEvent),\n    WlSeat(ProxyId, WlSeatEvent),\n    WlPointer(ProxyId, WlPointerEvent),\n    WlKeyboard(ProxyId, WlKeyboardEvent),\n    WlTouch(ProxyId, WlTouchEvent),\n    WlOutput(ProxyId, WlOutputEvent),\n}","parent":null,"children":[{"krate":0,"index":1010},{"krate":0,"index":1014},{"krate":0,"index":1018},{"krate":0,"index":1022},{"krate":0,"index":1026},{"krate":0,"index":1030},{"krate":0,"index":1034},{"krate":0,"index":1038},{"krate":0,"index":1042},{"krate":0,"index":1046},{"krate":0,"index":1050},{"krate":0,"index":1054},{"krate":0,"index":1058},{"krate":0,"index":1062},{"krate":0,"index":1066}],"decl_id":null,"docs":" An event generated by the protocol wayland.","sig":null,"attributes":[{"value":"/ An event generated by the protocol wayland.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10359808,"byte_end":10359855,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10359856,"byte_end":10359859,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ Each variant is composed of a `ProxyId` reffering to the proxy object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10359860,"byte_end":10359933,"line_start":46,"line_end":46,"column_start":1,"column_end":74}},{"value":"/ and of the event data itself.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10359934,"byte_end":10359967,"line_start":47,"line_end":47,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":414},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361605,"byte_end":10361614,"line_start":88,"line_end":88,"column_start":12,"column_end":21},"name":"WlDisplay","qualname":"::sys::wayland::client::WlDisplay","value":"WlDisplay {  }","parent":null,"children":[{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":" core global object","sig":null,"attributes":[{"value":"/ core global object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361446,"byte_end":10361468,"line_start":84,"line_end":84,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361469,"byte_end":10361472,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ The core global object.  This is a special singleton object.  It","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361473,"byte_end":10361541,"line_start":86,"line_end":86,"column_start":1,"column_end":69}},{"value":"/ is used for internal Wayland protocol features.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361542,"byte_end":10361593,"line_start":87,"line_end":87,"column_start":1,"column_end":52}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1085},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364027,"byte_end":10364032,"line_start":158,"line_end":158,"column_start":5,"column_end":10},"name":"Error","qualname":"::sys::wayland::client::WlDisplayEvent::Error","value":"WlDisplayEvent::Error(ProxyId, u32, String)","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":" fatal error event","sig":null,"attributes":[{"value":"/ fatal error event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363480,"byte_end":10363501,"line_start":147,"line_end":147,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363506,"byte_end":10363509,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ The error event is sent out when a fatal (non-recoverable)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363514,"byte_end":10363576,"line_start":149,"line_end":149,"column_start":5,"column_end":67}},{"value":"/ error has occurred.  The object_id argument is the object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363581,"byte_end":10363642,"line_start":150,"line_end":150,"column_start":5,"column_end":66}},{"value":"/ where the error occurred, most often in response to a request","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363647,"byte_end":10363712,"line_start":151,"line_end":151,"column_start":5,"column_end":70}},{"value":"/ to that object.  The code identifies the error and is defined","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363717,"byte_end":10363782,"line_start":152,"line_end":152,"column_start":5,"column_end":70}},{"value":"/ by the object interface.  As such, each interface defines its","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363787,"byte_end":10363852,"line_start":153,"line_end":153,"column_start":5,"column_end":70}},{"value":"/ own set of error codes.  The message is an brief description","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363857,"byte_end":10363921,"line_start":154,"line_end":154,"column_start":5,"column_end":69}},{"value":"/ of the error, for (debugging) convenience.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363926,"byte_end":10363972,"line_start":155,"line_end":155,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363977,"byte_end":10363980,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ Values: object_id, code, message,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363985,"byte_end":10364022,"line_start":157,"line_end":157,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1090},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364446,"byte_end":10364454,"line_start":168,"line_end":168,"column_start":5,"column_end":13},"name":"DeleteId","qualname":"::sys::wayland::client::WlDisplayEvent::DeleteId","value":"WlDisplayEvent::DeleteId(u32)","parent":{"krate":0,"index":1084},"children":[],"decl_id":null,"docs":" acknowledge object ID deletion","sig":null,"attributes":[{"value":"/ acknowledge object ID deletion","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364059,"byte_end":10364093,"line_start":159,"line_end":159,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364098,"byte_end":10364101,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ This event is used internally by the object ID management","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364106,"byte_end":10364167,"line_start":161,"line_end":161,"column_start":5,"column_end":66}},{"value":"/ logic.  When a client deletes an object, the server will send","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364172,"byte_end":10364237,"line_start":162,"line_end":162,"column_start":5,"column_end":70}},{"value":"/ this event to acknowledge that it has seen the delete request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364242,"byte_end":10364308,"line_start":163,"line_end":163,"column_start":5,"column_end":71}},{"value":"/ When the client receive this event, it will know that it can","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364313,"byte_end":10364377,"line_start":164,"line_end":164,"column_start":5,"column_end":69}},{"value":"/ safely reuse the object ID.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364382,"byte_end":10364413,"line_start":165,"line_end":165,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364418,"byte_end":10364421,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ Values: id,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10364426,"byte_end":10364441,"line_start":167,"line_end":167,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1084},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10363459,"byte_end":10363473,"line_start":146,"line_end":146,"column_start":10,"column_end":24},"name":"WlDisplayEvent","qualname":"::sys::wayland::client::WlDisplayEvent","value":"pub enum WlDisplayEvent {\n\n    /// fatal error event\n    ///\n    /// The error event is sent out when a fatal (non-recoverable)\n    /// error has occurred.  The object_id argument is the object\n    /// where the error occurred, most often in response to a request\n    /// to that object.  The code identifies the error and is defined\n    /// by the object interface.  As such, each interface defines its\n    /// own set of error codes.  The message is an brief description\n    /// of the error, for (debugging) convenience.\n    ///\n    /// Values: object_id, code, message,\n    Error(ProxyId, u32, String),\n\n    /// acknowledge object ID deletion\n    ///\n    /// This event is used internally by the object ID management\n    /// logic.  When a client deletes an object, the server will send\n    /// this event to acknowledge that it has seen the delete request.\n    /// When the client receive this event, it will know that it can\n    /// safely reuse the object ID.\n    ///\n    /// Values: id,\n    DeleteId(u32),\n}","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1090}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365901,"byte_end":10365905,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"sync","qualname":"<WlDisplay>::sync","value":"pub fn sync(&Self) -> WlCallback","parent":null,"children":[],"decl_id":null,"docs":" asynchronous roundtrip","sig":null,"attributes":[{"value":"/ asynchronous roundtrip","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365265,"byte_end":10365291,"line_start":190,"line_end":190,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365296,"byte_end":10365299,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ The sync request asks the server to emit the 'done' event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365304,"byte_end":10365365,"line_start":192,"line_end":192,"column_start":5,"column_end":66}},{"value":"/ on the returned wl_callback object.  Since requests are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365370,"byte_end":10365429,"line_start":193,"line_end":193,"column_start":5,"column_end":64}},{"value":"/ handled in-order and events are delivered in-order, this can","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365434,"byte_end":10365498,"line_start":194,"line_end":194,"column_start":5,"column_end":69}},{"value":"/ be used as a barrier to ensure all previous requests and the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365503,"byte_end":10365567,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/ resulting events have been handled.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365572,"byte_end":10365611,"line_start":196,"line_end":196,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365616,"byte_end":10365619,"line_start":197,"line_end":197,"column_start":5,"column_end":8}},{"value":"/ The object returned by this request will be destroyed by the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365624,"byte_end":10365688,"line_start":198,"line_end":198,"column_start":5,"column_end":69}},{"value":"/ compositor after the callback is fired and as such the client must not","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365693,"byte_end":10365767,"line_start":199,"line_end":199,"column_start":5,"column_end":79}},{"value":"/ attempt to use it after that point.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365772,"byte_end":10365811,"line_start":200,"line_end":200,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365816,"byte_end":10365819,"line_start":201,"line_end":201,"column_start":5,"column_end":8}},{"value":"/ The callback_data passed in the callback is the event serial.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365824,"byte_end":10365889,"line_start":202,"line_end":202,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":437},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366619,"byte_end":10366631,"line_start":218,"line_end":218,"column_start":12,"column_end":24},"name":"get_registry","qualname":"<WlDisplay>::get_registry","value":"pub fn get_registry(&Self) -> WlRegistry","parent":null,"children":[],"decl_id":null,"docs":" get global registry object","sig":null,"attributes":[{"value":"/ get global registry object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366416,"byte_end":10366446,"line_start":213,"line_end":213,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366451,"byte_end":10366454,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ This request creates a registry object that allows the client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366459,"byte_end":10366524,"line_start":215,"line_end":215,"column_start":5,"column_end":70}},{"value":"/ to list and bind the global objects available from the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366529,"byte_end":10366587,"line_start":216,"line_end":216,"column_start":5,"column_end":63}},{"value":"/ compositor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10366592,"byte_end":10366607,"line_start":217,"line_end":217,"column_start":5,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":438},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368254,"byte_end":10368264,"line_start":255,"line_end":255,"column_start":12,"column_end":22},"name":"WlRegistry","qualname":"::sys::wayland::client::WlRegistry","value":"WlRegistry {  }","parent":null,"children":[{"krate":0,"index":439},{"krate":0,"index":440}],"decl_id":null,"docs":" global registry object","sig":null,"attributes":[{"value":"/ global registry object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367180,"byte_end":10367206,"line_start":233,"line_end":233,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367207,"byte_end":10367210,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ The global registry object.  The server has a number of global","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367211,"byte_end":10367277,"line_start":235,"line_end":235,"column_start":1,"column_end":67}},{"value":"/ objects that are available to all clients.  These objects","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367278,"byte_end":10367339,"line_start":236,"line_end":236,"column_start":1,"column_end":62}},{"value":"/ typically represent an actual object in the server (for example,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367340,"byte_end":10367408,"line_start":237,"line_end":237,"column_start":1,"column_end":69}},{"value":"/ an input device) or they are singleton objects that provide","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367409,"byte_end":10367472,"line_start":238,"line_end":238,"column_start":1,"column_end":64}},{"value":"/ extension functionality.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367473,"byte_end":10367501,"line_start":239,"line_end":239,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367502,"byte_end":10367505,"line_start":240,"line_end":240,"column_start":1,"column_end":4}},{"value":"/ When a client creates a registry object, the registry object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367506,"byte_end":10367570,"line_start":241,"line_end":241,"column_start":1,"column_end":65}},{"value":"/ will emit a global event for each global currently in the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367571,"byte_end":10367632,"line_start":242,"line_end":242,"column_start":1,"column_end":62}},{"value":"/ registry.  Globals come and go as a result of device or","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367633,"byte_end":10367692,"line_start":243,"line_end":243,"column_start":1,"column_end":60}},{"value":"/ monitor hotplugs, reconfiguration or other events, and the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367693,"byte_end":10367755,"line_start":244,"line_end":244,"column_start":1,"column_end":63}},{"value":"/ registry will send out global and global_remove events to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367756,"byte_end":10367817,"line_start":245,"line_end":245,"column_start":1,"column_end":62}},{"value":"/ keep the client up to date with the changes.  To mark the end","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367818,"byte_end":10367883,"line_start":246,"line_end":246,"column_start":1,"column_end":66}},{"value":"/ of the initial burst of events, the client can use the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367884,"byte_end":10367942,"line_start":247,"line_end":247,"column_start":1,"column_end":59}},{"value":"/ wl_display.sync request immediately after calling","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367943,"byte_end":10367996,"line_start":248,"line_end":248,"column_start":1,"column_end":54}},{"value":"/ wl_display.get_registry.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10367997,"byte_end":10368025,"line_start":249,"line_end":249,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368026,"byte_end":10368029,"line_start":250,"line_end":250,"column_start":1,"column_end":4}},{"value":"/ A client can bind to a global object by using the bind","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368030,"byte_end":10368088,"line_start":251,"line_end":251,"column_start":1,"column_end":59}},{"value":"/ request.  This creates a client-side handle that lets the object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368089,"byte_end":10368157,"line_start":252,"line_end":252,"column_start":1,"column_end":69}},{"value":"/ emit events to the client and lets the client invoke requests on","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368158,"byte_end":10368226,"line_start":253,"line_end":253,"column_start":1,"column_end":69}},{"value":"/ the object.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368227,"byte_end":10368242,"line_start":254,"line_end":254,"column_start":1,"column_end":16}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1096},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370147,"byte_end":10370153,"line_start":302,"line_end":302,"column_start":5,"column_end":11},"name":"Global","qualname":"::sys::wayland::client::WlRegistryEvent::Global","value":"WlRegistryEvent::Global(u32, String, u32)","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":" announce global object","sig":null,"attributes":[{"value":"/ announce global object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369832,"byte_end":10369858,"line_start":293,"line_end":293,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369863,"byte_end":10369866,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ Notify the client of global objects.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369871,"byte_end":10369911,"line_start":295,"line_end":295,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369916,"byte_end":10369919,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ The event notifies the client that a global object with","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369924,"byte_end":10369983,"line_start":297,"line_end":297,"column_start":5,"column_end":64}},{"value":"/ the given name is now available, and it implements the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369988,"byte_end":10370046,"line_start":298,"line_end":298,"column_start":5,"column_end":63}},{"value":"/ given version of the given interface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370051,"byte_end":10370092,"line_start":299,"line_end":299,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370097,"byte_end":10370100,"line_start":300,"line_end":300,"column_start":5,"column_end":8}},{"value":"/ Values: name, interface, version,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370105,"byte_end":10370142,"line_start":301,"line_end":301,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1101},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370754,"byte_end":10370766,"line_start":317,"line_end":317,"column_start":5,"column_end":17},"name":"GlobalRemove","qualname":"::sys::wayland::client::WlRegistryEvent::GlobalRemove","value":"WlRegistryEvent::GlobalRemove(u32)","parent":{"krate":0,"index":1095},"children":[],"decl_id":null,"docs":" announce removal of global object","sig":null,"attributes":[{"value":"/ announce removal of global object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370176,"byte_end":10370213,"line_start":303,"line_end":303,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370218,"byte_end":10370221,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ Notify the client of removed global objects.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370226,"byte_end":10370274,"line_start":305,"line_end":305,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370279,"byte_end":10370282,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ This event notifies the client that the global identified","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370287,"byte_end":10370348,"line_start":307,"line_end":307,"column_start":5,"column_end":66}},{"value":"/ by name is no longer available.  If the client bound to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370353,"byte_end":10370412,"line_start":308,"line_end":308,"column_start":5,"column_end":64}},{"value":"/ the global using the bind request, the client should now","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370417,"byte_end":10370477,"line_start":309,"line_end":309,"column_start":5,"column_end":65}},{"value":"/ destroy that object.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370482,"byte_end":10370506,"line_start":310,"line_end":310,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370511,"byte_end":10370514,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ The object remains valid and requests to the object will be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370519,"byte_end":10370582,"line_start":312,"line_end":312,"column_start":5,"column_end":68}},{"value":"/ ignored until the client destroys it, to avoid races between","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370587,"byte_end":10370651,"line_start":313,"line_end":313,"column_start":5,"column_end":69}},{"value":"/ the global going away and a client sending a request to it.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370656,"byte_end":10370719,"line_start":314,"line_end":314,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370724,"byte_end":10370727,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ Values: name,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10370732,"byte_end":10370749,"line_start":316,"line_end":316,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":1095},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369810,"byte_end":10369825,"line_start":292,"line_end":292,"column_start":10,"column_end":25},"name":"WlRegistryEvent","qualname":"::sys::wayland::client::WlRegistryEvent","value":"pub enum WlRegistryEvent {\n\n    /// announce global object\n    ///\n    /// Notify the client of global objects.\n    ///\n    /// The event notifies the client that a global object with\n    /// the given name is now available, and it implements the\n    /// given version of the given interface.\n    ///\n    /// Values: name, interface, version,\n    Global(u32, String, u32),\n\n    /// announce removal of global object\n    ///\n    /// Notify the client of removed global objects.\n    ///\n    /// This event notifies the client that the global identified\n    /// by name is no longer available.  If the client bound to\n    /// the global using the bind request, the client should now\n    /// destroy that object.\n    ///\n    /// The object remains valid and requests to the object will be\n    /// ignored until the client destroys it, to avoid races between\n    /// the global going away and a client sending a request to it.\n    ///\n    /// Values: name,\n    GlobalRemove(u32),\n}","parent":null,"children":[{"krate":0,"index":1096},{"krate":0,"index":1101}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":458},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371734,"byte_end":10371738,"line_start":343,"line_end":343,"column_start":19,"column_end":23},"name":"bind","qualname":"<WlRegistry>::bind","value":"pub unsafe fn bind<T: Proxy>(&Self, u32, u32) -> T","parent":null,"children":[],"decl_id":null,"docs":" bind an object to the display","sig":null,"attributes":[{"value":"/ bind an object to the display","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371565,"byte_end":10371598,"line_start":339,"line_end":339,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371603,"byte_end":10371606,"line_start":340,"line_end":340,"column_start":5,"column_end":8}},{"value":"/ Binds a new, client-created object to the server using the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371611,"byte_end":10371673,"line_start":341,"line_end":341,"column_start":5,"column_end":67}},{"value":"/ specified name as the identifier.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371678,"byte_end":10371715,"line_start":342,"line_end":342,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":462},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372826,"byte_end":10372836,"line_start":370,"line_end":370,"column_start":12,"column_end":22},"name":"WlCallback","qualname":"::sys::wayland::client::WlCallback","value":"WlCallback {  }","parent":null,"children":[{"krate":0,"index":463},{"krate":0,"index":464}],"decl_id":null,"docs":" callback object","sig":null,"attributes":[{"value":"/ callback object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372697,"byte_end":10372716,"line_start":366,"line_end":366,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372717,"byte_end":10372720,"line_start":367,"line_end":367,"column_start":1,"column_end":4}},{"value":"/ Clients can handle the 'done' event to get notified when","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372721,"byte_end":10372781,"line_start":368,"line_end":368,"column_start":1,"column_end":61}},{"value":"/ the related request is done.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372782,"byte_end":10372814,"line_start":369,"line_end":369,"column_start":1,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1107},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374496,"byte_end":10374500,"line_start":411,"line_end":411,"column_start":5,"column_end":9},"name":"Done","qualname":"::sys::wayland::client::WlCallbackEvent::Done","value":"WlCallbackEvent::Done(u32)","parent":{"krate":0,"index":1106},"children":[],"decl_id":null,"docs":" done event","sig":null,"attributes":[{"value":"/ done event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374370,"byte_end":10374384,"line_start":406,"line_end":406,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374389,"byte_end":10374392,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ Notify the client when the related request is done.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374397,"byte_end":10374452,"line_start":408,"line_end":408,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374457,"byte_end":10374460,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ Values: callback_data,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374465,"byte_end":10374491,"line_start":410,"line_end":410,"column_start":5,"column_end":31}}]},{"kind":"Enum","id":{"krate":0,"index":1106},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374348,"byte_end":10374363,"line_start":405,"line_end":405,"column_start":10,"column_end":25},"name":"WlCallbackEvent","qualname":"::sys::wayland::client::WlCallbackEvent","value":"pub enum WlCallbackEvent {\n\n    /// done event\n    ///\n    /// Notify the client when the related request is done.\n    ///\n    /// Values: callback_data,\n    Done(u32),\n}","parent":null,"children":[{"krate":0,"index":1107}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":483},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375321,"byte_end":10375333,"line_start":442,"line_end":442,"column_start":12,"column_end":24},"name":"WlCompositor","qualname":"::sys::wayland::client::WlCompositor","value":"WlCompositor {  }","parent":null,"children":[{"krate":0,"index":484},{"krate":0,"index":485}],"decl_id":null,"docs":" the compositor singleton","sig":null,"attributes":[{"value":"/ the compositor singleton","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375110,"byte_end":10375138,"line_start":437,"line_end":437,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375139,"byte_end":10375142,"line_start":438,"line_end":438,"column_start":1,"column_end":4}},{"value":"/ A compositor.  This object is a singleton global.  The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375143,"byte_end":10375201,"line_start":439,"line_end":439,"column_start":1,"column_end":59}},{"value":"/ compositor is in charge of combining the contents of multiple","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375202,"byte_end":10375267,"line_start":440,"line_end":440,"column_start":1,"column_end":66}},{"value":"/ surfaces into one displayable output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375268,"byte_end":10375309,"line_start":441,"line_end":441,"column_start":1,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376904,"byte_end":10376918,"line_start":483,"line_end":483,"column_start":12,"column_end":26},"name":"create_surface","qualname":"<WlCompositor>::create_surface","value":"pub fn create_surface(&Self) -> WlSurface","parent":null,"children":[],"decl_id":null,"docs":" create new surface","sig":null,"attributes":[{"value":"/ create new surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376810,"byte_end":10376832,"line_start":480,"line_end":480,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376837,"byte_end":10376840,"line_start":481,"line_end":481,"column_start":5,"column_end":8}},{"value":"/ Ask the compositor to create a new surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376845,"byte_end":10376892,"line_start":482,"line_end":482,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":503},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10377531,"byte_end":10377544,"line_start":496,"line_end":496,"column_start":12,"column_end":25},"name":"create_region","qualname":"<WlCompositor>::create_region","value":"pub fn create_region(&Self) -> WlRegion","parent":null,"children":[],"decl_id":null,"docs":" create new region","sig":null,"attributes":[{"value":"/ create new region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10377439,"byte_end":10377460,"line_start":493,"line_end":493,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10377465,"byte_end":10377468,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Ask the compositor to create a new region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10377473,"byte_end":10377519,"line_start":495,"line_end":495,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":506},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378716,"byte_end":10378725,"line_start":525,"line_end":525,"column_start":12,"column_end":21},"name":"WlShmPool","qualname":"::sys::wayland::client::WlShmPool","value":"WlShmPool {  }","parent":null,"children":[{"krate":0,"index":507},{"krate":0,"index":508}],"decl_id":null,"docs":" a shared memory pool","sig":null,"attributes":[{"value":"/ a shared memory pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378239,"byte_end":10378263,"line_start":516,"line_end":516,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378264,"byte_end":10378267,"line_start":517,"line_end":517,"column_start":1,"column_end":4}},{"value":"/ The wl_shm_pool object encapsulates a piece of memory shared","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378268,"byte_end":10378332,"line_start":518,"line_end":518,"column_start":1,"column_end":65}},{"value":"/ between the compositor and client.  Through the wl_shm_pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378333,"byte_end":10378396,"line_start":519,"line_end":519,"column_start":1,"column_end":64}},{"value":"/ object, the client can allocate shared memory wl_buffer objects.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378397,"byte_end":10378465,"line_start":520,"line_end":520,"column_start":1,"column_end":69}},{"value":"/ All objects created through the same pool share the same","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378466,"byte_end":10378526,"line_start":521,"line_end":521,"column_start":1,"column_end":61}},{"value":"/ underlying mapped memory. Reusing the mapped memory avoids the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378527,"byte_end":10378593,"line_start":522,"line_end":522,"column_start":1,"column_end":67}},{"value":"/ setup/teardown overhead and is useful when interactively resizing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378594,"byte_end":10378663,"line_start":523,"line_end":523,"column_start":1,"column_end":70}},{"value":"/ a surface or for many small buffers.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378664,"byte_end":10378704,"line_start":524,"line_end":524,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380827,"byte_end":10380840,"line_start":577,"line_end":577,"column_start":12,"column_end":25},"name":"create_buffer","qualname":"<WlShmPool>::create_buffer","value":"pub fn create_buffer(&Self, i32, i32, i32, i32, u32) -> WlBuffer","parent":null,"children":[],"decl_id":null,"docs":" create a buffer from the pool","sig":null,"attributes":[{"value":"/ create a buffer from the pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380191,"byte_end":10380224,"line_start":564,"line_end":564,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380229,"byte_end":10380232,"line_start":565,"line_end":565,"column_start":5,"column_end":8}},{"value":"/ Create a wl_buffer object from the pool.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380237,"byte_end":10380281,"line_start":566,"line_end":566,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380286,"byte_end":10380289,"line_start":567,"line_end":567,"column_start":5,"column_end":8}},{"value":"/ The buffer is created offset bytes into the pool and has","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380294,"byte_end":10380354,"line_start":568,"line_end":568,"column_start":5,"column_end":65}},{"value":"/ width and height as specified.  The stride arguments specifies","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380359,"byte_end":10380425,"line_start":569,"line_end":569,"column_start":5,"column_end":71}},{"value":"/ the number of bytes from beginning of one row to the beginning","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380430,"byte_end":10380496,"line_start":570,"line_end":570,"column_start":5,"column_end":71}},{"value":"/ of the next.  The format is the pixel format of the buffer and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380501,"byte_end":10380567,"line_start":571,"line_end":571,"column_start":5,"column_end":71}},{"value":"/ must be one of those advertised through the wl_shm.format event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380572,"byte_end":10380640,"line_start":572,"line_end":572,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380645,"byte_end":10380648,"line_start":573,"line_end":573,"column_start":5,"column_end":8}},{"value":"/ A buffer will keep a reference to the pool it was created from","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380653,"byte_end":10380719,"line_start":574,"line_end":574,"column_start":5,"column_end":71}},{"value":"/ so it is valid to destroy the pool immediately after creating","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380724,"byte_end":10380789,"line_start":575,"line_end":575,"column_start":5,"column_end":70}},{"value":"/ a buffer from it.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380794,"byte_end":10380815,"line_start":576,"line_end":576,"column_start":5,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":527},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381671,"byte_end":10381678,"line_start":594,"line_end":594,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlShmPool>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy the pool","sig":null,"attributes":[{"value":"/ destroy the pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381458,"byte_end":10381478,"line_start":587,"line_end":587,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381483,"byte_end":10381486,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ Destroy the shared memory pool.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381491,"byte_end":10381526,"line_start":589,"line_end":589,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381531,"byte_end":10381534,"line_start":590,"line_end":590,"column_start":5,"column_end":8}},{"value":"/ The mmapped memory will be released when all","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381539,"byte_end":10381587,"line_start":591,"line_end":591,"column_start":5,"column_end":53}},{"value":"/ buffers that have been created from this pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381592,"byte_end":10381641,"line_start":592,"line_end":592,"column_start":5,"column_end":54}},{"value":"/ are gone.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381646,"byte_end":10381659,"line_start":593,"line_end":593,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382211,"byte_end":10382217,"line_start":606,"line_end":606,"column_start":12,"column_end":18},"name":"resize","qualname":"<WlShmPool>::resize","value":"pub fn resize(&Self, i32)","parent":null,"children":[],"decl_id":null,"docs":" change the size of the pool mapping","sig":null,"attributes":[{"value":"/ change the size of the pool mapping","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381905,"byte_end":10381944,"line_start":600,"line_end":600,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381949,"byte_end":10381952,"line_start":601,"line_end":601,"column_start":5,"column_end":8}},{"value":"/ This request will cause the server to remap the backing memory","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10381957,"byte_end":10382023,"line_start":602,"line_end":602,"column_start":5,"column_end":71}},{"value":"/ for the pool from the file descriptor passed when the pool was","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382028,"byte_end":10382094,"line_start":603,"line_end":603,"column_start":5,"column_end":71}},{"value":"/ created, but using the new size.  This request can only be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382099,"byte_end":10382161,"line_start":604,"line_end":604,"column_start":5,"column_end":67}},{"value":"/ used to make the pool bigger.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382166,"byte_end":10382199,"line_start":605,"line_end":605,"column_start":5,"column_end":38}}]},{"kind":"Struct","id":{"krate":0,"index":531},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382913,"byte_end":10382918,"line_start":632,"line_end":632,"column_start":12,"column_end":17},"name":"WlShm","qualname":"::sys::wayland::client::WlShm","value":"WlShm {  }","parent":null,"children":[{"krate":0,"index":532},{"krate":0,"index":533}],"decl_id":null,"docs":" shared memory support","sig":null,"attributes":[{"value":"/ shared memory support","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382545,"byte_end":10382570,"line_start":621,"line_end":621,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382571,"byte_end":10382574,"line_start":622,"line_end":622,"column_start":1,"column_end":4}},{"value":"/ A global singleton object that provides support for shared","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382575,"byte_end":10382637,"line_start":623,"line_end":623,"column_start":1,"column_end":63}},{"value":"/ memory.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382638,"byte_end":10382649,"line_start":624,"line_end":624,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382650,"byte_end":10382653,"line_start":625,"line_end":625,"column_start":1,"column_end":4}},{"value":"/ Clients can create wl_shm_pool objects using the create_pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382654,"byte_end":10382718,"line_start":626,"line_end":626,"column_start":1,"column_end":65}},{"value":"/ request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382719,"byte_end":10382731,"line_start":627,"line_end":627,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382732,"byte_end":10382735,"line_start":628,"line_end":628,"column_start":1,"column_end":4}},{"value":"/ At connection setup time, the wl_shm object emits one or more","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382736,"byte_end":10382801,"line_start":629,"line_end":629,"column_start":1,"column_end":66}},{"value":"/ format events to inform clients about the valid pixel formats","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382802,"byte_end":10382867,"line_start":630,"line_end":630,"column_start":1,"column_end":66}},{"value":"/ that can be used for buffers.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382868,"byte_end":10382901,"line_start":631,"line_end":631,"column_start":1,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1125},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385234,"byte_end":10385242,"line_start":698,"line_end":698,"column_start":5,"column_end":13},"name":"Argb8888","qualname":"::sys::wayland::client::WlShmFormat::Argb8888","value":"WlShmFormat::Argb8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" 32-bit ARGB format\n","sig":null,"attributes":[{"value":"/ 32-bit ARGB format","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385207,"byte_end":10385229,"line_start":697,"line_end":697,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1128},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385278,"byte_end":10385286,"line_start":700,"line_end":700,"column_start":5,"column_end":13},"name":"Xrgb8888","qualname":"::sys::wayland::client::WlShmFormat::Xrgb8888","value":"WlShmFormat::Xrgb8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":" 32-bit RGB format\n","sig":null,"attributes":[{"value":"/ 32-bit RGB format","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385252,"byte_end":10385273,"line_start":699,"line_end":699,"column_start":5,"column_end":26}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1131},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385296,"byte_end":10385298,"line_start":701,"line_end":701,"column_start":5,"column_end":7},"name":"C8","qualname":"::sys::wayland::client::WlShmFormat::C8","value":"WlShmFormat::C8","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1134},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385317,"byte_end":10385323,"line_start":702,"line_end":702,"column_start":5,"column_end":11},"name":"Rgb332","qualname":"::sys::wayland::client::WlShmFormat::Rgb332","value":"WlShmFormat::Rgb332","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1137},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385342,"byte_end":10385348,"line_start":703,"line_end":703,"column_start":5,"column_end":11},"name":"Bgr233","qualname":"::sys::wayland::client::WlShmFormat::Bgr233","value":"WlShmFormat::Bgr233","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1140},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385367,"byte_end":10385375,"line_start":704,"line_end":704,"column_start":5,"column_end":13},"name":"Xrgb4444","qualname":"::sys::wayland::client::WlShmFormat::Xrgb4444","value":"WlShmFormat::Xrgb4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1143},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385394,"byte_end":10385402,"line_start":705,"line_end":705,"column_start":5,"column_end":13},"name":"Xbgr4444","qualname":"::sys::wayland::client::WlShmFormat::Xbgr4444","value":"WlShmFormat::Xbgr4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1146},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385421,"byte_end":10385429,"line_start":706,"line_end":706,"column_start":5,"column_end":13},"name":"Rgbx4444","qualname":"::sys::wayland::client::WlShmFormat::Rgbx4444","value":"WlShmFormat::Rgbx4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1149},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385448,"byte_end":10385456,"line_start":707,"line_end":707,"column_start":5,"column_end":13},"name":"Bgrx4444","qualname":"::sys::wayland::client::WlShmFormat::Bgrx4444","value":"WlShmFormat::Bgrx4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1152},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385475,"byte_end":10385483,"line_start":708,"line_end":708,"column_start":5,"column_end":13},"name":"Argb4444","qualname":"::sys::wayland::client::WlShmFormat::Argb4444","value":"WlShmFormat::Argb4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1155},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385502,"byte_end":10385510,"line_start":709,"line_end":709,"column_start":5,"column_end":13},"name":"Abgr4444","qualname":"::sys::wayland::client::WlShmFormat::Abgr4444","value":"WlShmFormat::Abgr4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1158},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385529,"byte_end":10385537,"line_start":710,"line_end":710,"column_start":5,"column_end":13},"name":"Rgba4444","qualname":"::sys::wayland::client::WlShmFormat::Rgba4444","value":"WlShmFormat::Rgba4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1161},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385556,"byte_end":10385564,"line_start":711,"line_end":711,"column_start":5,"column_end":13},"name":"Bgra4444","qualname":"::sys::wayland::client::WlShmFormat::Bgra4444","value":"WlShmFormat::Bgra4444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1164},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385583,"byte_end":10385591,"line_start":712,"line_end":712,"column_start":5,"column_end":13},"name":"Xrgb1555","qualname":"::sys::wayland::client::WlShmFormat::Xrgb1555","value":"WlShmFormat::Xrgb1555","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1167},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385610,"byte_end":10385618,"line_start":713,"line_end":713,"column_start":5,"column_end":13},"name":"Xbgr1555","qualname":"::sys::wayland::client::WlShmFormat::Xbgr1555","value":"WlShmFormat::Xbgr1555","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1170},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385637,"byte_end":10385645,"line_start":714,"line_end":714,"column_start":5,"column_end":13},"name":"Rgbx5551","qualname":"::sys::wayland::client::WlShmFormat::Rgbx5551","value":"WlShmFormat::Rgbx5551","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1173},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385664,"byte_end":10385672,"line_start":715,"line_end":715,"column_start":5,"column_end":13},"name":"Bgrx5551","qualname":"::sys::wayland::client::WlShmFormat::Bgrx5551","value":"WlShmFormat::Bgrx5551","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1176},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385691,"byte_end":10385699,"line_start":716,"line_end":716,"column_start":5,"column_end":13},"name":"Argb1555","qualname":"::sys::wayland::client::WlShmFormat::Argb1555","value":"WlShmFormat::Argb1555","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1179},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385718,"byte_end":10385726,"line_start":717,"line_end":717,"column_start":5,"column_end":13},"name":"Abgr1555","qualname":"::sys::wayland::client::WlShmFormat::Abgr1555","value":"WlShmFormat::Abgr1555","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1182},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385745,"byte_end":10385753,"line_start":718,"line_end":718,"column_start":5,"column_end":13},"name":"Rgba5551","qualname":"::sys::wayland::client::WlShmFormat::Rgba5551","value":"WlShmFormat::Rgba5551","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1185},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385772,"byte_end":10385780,"line_start":719,"line_end":719,"column_start":5,"column_end":13},"name":"Bgra5551","qualname":"::sys::wayland::client::WlShmFormat::Bgra5551","value":"WlShmFormat::Bgra5551","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1188},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385799,"byte_end":10385805,"line_start":720,"line_end":720,"column_start":5,"column_end":11},"name":"Rgb565","qualname":"::sys::wayland::client::WlShmFormat::Rgb565","value":"WlShmFormat::Rgb565","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1191},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385824,"byte_end":10385830,"line_start":721,"line_end":721,"column_start":5,"column_end":11},"name":"Bgr565","qualname":"::sys::wayland::client::WlShmFormat::Bgr565","value":"WlShmFormat::Bgr565","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1194},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385849,"byte_end":10385855,"line_start":722,"line_end":722,"column_start":5,"column_end":11},"name":"Rgb888","qualname":"::sys::wayland::client::WlShmFormat::Rgb888","value":"WlShmFormat::Rgb888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1197},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385874,"byte_end":10385880,"line_start":723,"line_end":723,"column_start":5,"column_end":11},"name":"Bgr888","qualname":"::sys::wayland::client::WlShmFormat::Bgr888","value":"WlShmFormat::Bgr888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1200},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385899,"byte_end":10385907,"line_start":724,"line_end":724,"column_start":5,"column_end":13},"name":"Xbgr8888","qualname":"::sys::wayland::client::WlShmFormat::Xbgr8888","value":"WlShmFormat::Xbgr8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1203},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385926,"byte_end":10385934,"line_start":725,"line_end":725,"column_start":5,"column_end":13},"name":"Rgbx8888","qualname":"::sys::wayland::client::WlShmFormat::Rgbx8888","value":"WlShmFormat::Rgbx8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1206},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385953,"byte_end":10385961,"line_start":726,"line_end":726,"column_start":5,"column_end":13},"name":"Bgrx8888","qualname":"::sys::wayland::client::WlShmFormat::Bgrx8888","value":"WlShmFormat::Bgrx8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1209},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385980,"byte_end":10385988,"line_start":727,"line_end":727,"column_start":5,"column_end":13},"name":"Abgr8888","qualname":"::sys::wayland::client::WlShmFormat::Abgr8888","value":"WlShmFormat::Abgr8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1212},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386007,"byte_end":10386015,"line_start":728,"line_end":728,"column_start":5,"column_end":13},"name":"Rgba8888","qualname":"::sys::wayland::client::WlShmFormat::Rgba8888","value":"WlShmFormat::Rgba8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1215},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386034,"byte_end":10386042,"line_start":729,"line_end":729,"column_start":5,"column_end":13},"name":"Bgra8888","qualname":"::sys::wayland::client::WlShmFormat::Bgra8888","value":"WlShmFormat::Bgra8888","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1218},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386061,"byte_end":10386072,"line_start":730,"line_end":730,"column_start":5,"column_end":16},"name":"Xrgb2101010","qualname":"::sys::wayland::client::WlShmFormat::Xrgb2101010","value":"WlShmFormat::Xrgb2101010","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1221},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386091,"byte_end":10386102,"line_start":731,"line_end":731,"column_start":5,"column_end":16},"name":"Xbgr2101010","qualname":"::sys::wayland::client::WlShmFormat::Xbgr2101010","value":"WlShmFormat::Xbgr2101010","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1224},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386121,"byte_end":10386132,"line_start":732,"line_end":732,"column_start":5,"column_end":16},"name":"Rgbx1010102","qualname":"::sys::wayland::client::WlShmFormat::Rgbx1010102","value":"WlShmFormat::Rgbx1010102","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1227},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386151,"byte_end":10386162,"line_start":733,"line_end":733,"column_start":5,"column_end":16},"name":"Bgrx1010102","qualname":"::sys::wayland::client::WlShmFormat::Bgrx1010102","value":"WlShmFormat::Bgrx1010102","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1230},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386181,"byte_end":10386192,"line_start":734,"line_end":734,"column_start":5,"column_end":16},"name":"Argb2101010","qualname":"::sys::wayland::client::WlShmFormat::Argb2101010","value":"WlShmFormat::Argb2101010","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1233},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386211,"byte_end":10386222,"line_start":735,"line_end":735,"column_start":5,"column_end":16},"name":"Abgr2101010","qualname":"::sys::wayland::client::WlShmFormat::Abgr2101010","value":"WlShmFormat::Abgr2101010","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1236},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386241,"byte_end":10386252,"line_start":736,"line_end":736,"column_start":5,"column_end":16},"name":"Rgba1010102","qualname":"::sys::wayland::client::WlShmFormat::Rgba1010102","value":"WlShmFormat::Rgba1010102","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1239},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386271,"byte_end":10386282,"line_start":737,"line_end":737,"column_start":5,"column_end":16},"name":"Bgra1010102","qualname":"::sys::wayland::client::WlShmFormat::Bgra1010102","value":"WlShmFormat::Bgra1010102","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1242},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386301,"byte_end":10386305,"line_start":738,"line_end":738,"column_start":5,"column_end":9},"name":"Yuyv","qualname":"::sys::wayland::client::WlShmFormat::Yuyv","value":"WlShmFormat::Yuyv","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1245},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386324,"byte_end":10386328,"line_start":739,"line_end":739,"column_start":5,"column_end":9},"name":"Yvyu","qualname":"::sys::wayland::client::WlShmFormat::Yvyu","value":"WlShmFormat::Yvyu","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1248},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386347,"byte_end":10386351,"line_start":740,"line_end":740,"column_start":5,"column_end":9},"name":"Uyvy","qualname":"::sys::wayland::client::WlShmFormat::Uyvy","value":"WlShmFormat::Uyvy","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1251},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386370,"byte_end":10386374,"line_start":741,"line_end":741,"column_start":5,"column_end":9},"name":"Vyuy","qualname":"::sys::wayland::client::WlShmFormat::Vyuy","value":"WlShmFormat::Vyuy","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1254},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386393,"byte_end":10386397,"line_start":742,"line_end":742,"column_start":5,"column_end":9},"name":"Ayuv","qualname":"::sys::wayland::client::WlShmFormat::Ayuv","value":"WlShmFormat::Ayuv","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1257},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386416,"byte_end":10386420,"line_start":743,"line_end":743,"column_start":5,"column_end":9},"name":"Nv12","qualname":"::sys::wayland::client::WlShmFormat::Nv12","value":"WlShmFormat::Nv12","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1260},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386439,"byte_end":10386443,"line_start":744,"line_end":744,"column_start":5,"column_end":9},"name":"Nv21","qualname":"::sys::wayland::client::WlShmFormat::Nv21","value":"WlShmFormat::Nv21","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1263},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386462,"byte_end":10386466,"line_start":745,"line_end":745,"column_start":5,"column_end":9},"name":"Nv16","qualname":"::sys::wayland::client::WlShmFormat::Nv16","value":"WlShmFormat::Nv16","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1266},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386485,"byte_end":10386489,"line_start":746,"line_end":746,"column_start":5,"column_end":9},"name":"Nv61","qualname":"::sys::wayland::client::WlShmFormat::Nv61","value":"WlShmFormat::Nv61","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1269},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386508,"byte_end":10386514,"line_start":747,"line_end":747,"column_start":5,"column_end":11},"name":"Yuv410","qualname":"::sys::wayland::client::WlShmFormat::Yuv410","value":"WlShmFormat::Yuv410","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1272},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386533,"byte_end":10386539,"line_start":748,"line_end":748,"column_start":5,"column_end":11},"name":"Yvu410","qualname":"::sys::wayland::client::WlShmFormat::Yvu410","value":"WlShmFormat::Yvu410","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1275},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386558,"byte_end":10386564,"line_start":749,"line_end":749,"column_start":5,"column_end":11},"name":"Yuv411","qualname":"::sys::wayland::client::WlShmFormat::Yuv411","value":"WlShmFormat::Yuv411","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1278},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386583,"byte_end":10386589,"line_start":750,"line_end":750,"column_start":5,"column_end":11},"name":"Yvu411","qualname":"::sys::wayland::client::WlShmFormat::Yvu411","value":"WlShmFormat::Yvu411","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1281},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386608,"byte_end":10386614,"line_start":751,"line_end":751,"column_start":5,"column_end":11},"name":"Yuv420","qualname":"::sys::wayland::client::WlShmFormat::Yuv420","value":"WlShmFormat::Yuv420","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1284},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386633,"byte_end":10386639,"line_start":752,"line_end":752,"column_start":5,"column_end":11},"name":"Yvu420","qualname":"::sys::wayland::client::WlShmFormat::Yvu420","value":"WlShmFormat::Yvu420","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1287},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386658,"byte_end":10386664,"line_start":753,"line_end":753,"column_start":5,"column_end":11},"name":"Yuv422","qualname":"::sys::wayland::client::WlShmFormat::Yuv422","value":"WlShmFormat::Yuv422","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1290},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386683,"byte_end":10386689,"line_start":754,"line_end":754,"column_start":5,"column_end":11},"name":"Yvu422","qualname":"::sys::wayland::client::WlShmFormat::Yvu422","value":"WlShmFormat::Yvu422","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1293},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386708,"byte_end":10386714,"line_start":755,"line_end":755,"column_start":5,"column_end":11},"name":"Yuv444","qualname":"::sys::wayland::client::WlShmFormat::Yuv444","value":"WlShmFormat::Yuv444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1296},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10386733,"byte_end":10386739,"line_start":756,"line_end":756,"column_start":5,"column_end":11},"name":"Yvu444","qualname":"::sys::wayland::client::WlShmFormat::Yvu444","value":"WlShmFormat::Yvu444","parent":{"krate":0,"index":1124},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1124},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385189,"byte_end":10385200,"line_start":696,"line_end":696,"column_start":10,"column_end":21},"name":"WlShmFormat","qualname":"::sys::wayland::client::WlShmFormat","value":"pub enum WlShmFormat {\n\n    /// 32-bit ARGB format\n    Argb8888 = ,\n\n    /// 32-bit RGB format\n    Xrgb8888 = ,\n    C8 = ,\n    Rgb332 = ,\n    Bgr233 = ,\n    Xrgb4444 = ,\n    Xbgr4444 = ,\n    Rgbx4444 = ,\n    Bgrx4444 = ,\n    Argb4444 = ,\n    Abgr4444 = ,\n    Rgba4444 = ,\n    Bgra4444 = ,\n    Xrgb1555 = ,\n    Xbgr1555 = ,\n    Rgbx5551 = ,\n    Bgrx5551 = ,\n    Argb1555 = ,\n    Abgr1555 = ,\n    Rgba5551 = ,\n    Bgra5551 = ,\n    Rgb565 = ,\n    Bgr565 = ,\n    Rgb888 = ,\n    Bgr888 = ,\n    Xbgr8888 = ,\n    Rgbx8888 = ,\n    Bgrx8888 = ,\n    Abgr8888 = ,\n    Rgba8888 = ,\n    Bgra8888 = ,\n    Xrgb2101010 = ,\n    Xbgr2101010 = ,\n    Rgbx1010102 = ,\n    Bgrx1010102 = ,\n    Argb2101010 = ,\n    Abgr2101010 = ,\n    Rgba1010102 = ,\n    Bgra1010102 = ,\n    Yuyv = ,\n    Yvyu = ,\n    Uyvy = ,\n    Vyuy = ,\n    Ayuv = ,\n    Nv12 = ,\n    Nv21 = ,\n    Nv16 = ,\n    Nv61 = ,\n    Yuv410 = ,\n    Yvu410 = ,\n    Yuv411 = ,\n    Yvu411 = ,\n    Yuv420 = ,\n    Yvu420 = ,\n    Yuv422 = ,\n    Yvu422 = ,\n    Yuv444 = ,\n    Yvu444 = ,\n}","parent":null,"children":[{"krate":0,"index":1125},{"krate":0,"index":1128},{"krate":0,"index":1131},{"krate":0,"index":1134},{"krate":0,"index":1137},{"krate":0,"index":1140},{"krate":0,"index":1143},{"krate":0,"index":1146},{"krate":0,"index":1149},{"krate":0,"index":1152},{"krate":0,"index":1155},{"krate":0,"index":1158},{"krate":0,"index":1161},{"krate":0,"index":1164},{"krate":0,"index":1167},{"krate":0,"index":1170},{"krate":0,"index":1173},{"krate":0,"index":1176},{"krate":0,"index":1179},{"krate":0,"index":1182},{"krate":0,"index":1185},{"krate":0,"index":1188},{"krate":0,"index":1191},{"krate":0,"index":1194},{"krate":0,"index":1197},{"krate":0,"index":1200},{"krate":0,"index":1203},{"krate":0,"index":1206},{"krate":0,"index":1209},{"krate":0,"index":1212},{"krate":0,"index":1215},{"krate":0,"index":1218},{"krate":0,"index":1221},{"krate":0,"index":1224},{"krate":0,"index":1227},{"krate":0,"index":1230},{"krate":0,"index":1233},{"krate":0,"index":1236},{"krate":0,"index":1239},{"krate":0,"index":1242},{"krate":0,"index":1245},{"krate":0,"index":1248},{"krate":0,"index":1251},{"krate":0,"index":1254},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1266},{"krate":0,"index":1269},{"krate":0,"index":1272},{"krate":0,"index":1275},{"krate":0,"index":1278},{"krate":0,"index":1281},{"krate":0,"index":1284},{"krate":0,"index":1287},{"krate":0,"index":1290},{"krate":0,"index":1293},{"krate":0,"index":1296}],"decl_id":null,"docs":" pixel formats","sig":null,"attributes":[{"value":"/ pixel formats","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384905,"byte_end":10384922,"line_start":687,"line_end":687,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384923,"byte_end":10384926,"line_start":688,"line_end":688,"column_start":1,"column_end":4}},{"value":"/ This describes the memory layout of an individual pixel.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384927,"byte_end":10384987,"line_start":689,"line_end":689,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384988,"byte_end":10384991,"line_start":690,"line_end":690,"column_start":1,"column_end":4}},{"value":"/ All renderers should support argb8888 and xrgb8888 but any other","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384992,"byte_end":10385060,"line_start":691,"line_end":691,"column_start":1,"column_end":69}},{"value":"/ formats are optional and may not be supported by the particular","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385061,"byte_end":10385128,"line_start":692,"line_end":692,"column_start":1,"column_end":68}},{"value":"/ renderer in use.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385129,"byte_end":10385149,"line_start":693,"line_end":693,"column_start":1,"column_end":21}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10385150,"byte_end":10385162,"line_start":694,"line_end":694,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1302},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390061,"byte_end":10390067,"line_start":834,"line_end":834,"column_start":5,"column_end":11},"name":"Format","qualname":"::sys::wayland::client::WlShmEvent::Format","value":"WlShmEvent::Format(WlShmFormat)","parent":{"krate":0,"index":1301},"children":[],"decl_id":null,"docs":" pixel format description","sig":null,"attributes":[{"value":"/ pixel format description","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389843,"byte_end":10389871,"line_start":827,"line_end":827,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389876,"byte_end":10389879,"line_start":828,"line_end":828,"column_start":5,"column_end":8}},{"value":"/ Informs the client about a valid pixel format that","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389884,"byte_end":10389938,"line_start":829,"line_end":829,"column_start":5,"column_end":59}},{"value":"/ can be used for buffers. Known formats include","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389943,"byte_end":10389993,"line_start":830,"line_end":830,"column_start":5,"column_end":55}},{"value":"/ argb8888 and xrgb8888.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389998,"byte_end":10390024,"line_start":831,"line_end":831,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390029,"byte_end":10390032,"line_start":832,"line_end":832,"column_start":5,"column_end":8}},{"value":"/ Values: format,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390037,"byte_end":10390056,"line_start":833,"line_end":833,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1301},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10389826,"byte_end":10389836,"line_start":826,"line_end":826,"column_start":10,"column_end":20},"name":"WlShmEvent","qualname":"::sys::wayland::client::WlShmEvent","value":"pub enum WlShmEvent {\n\n    /// pixel format description\n    ///\n    /// Informs the client about a valid pixel format that\n    /// can be used for buffers. Known formats include\n    /// argb8888 and xrgb8888.\n    ///\n    /// Values: format,\n    Format(WlShmFormat),\n}","parent":null,"children":[{"krate":0,"index":1302}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":553},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390879,"byte_end":10390890,"line_start":858,"line_end":858,"column_start":12,"column_end":23},"name":"create_pool","qualname":"<WlShm>::create_pool","value":"pub fn create_pool(&Self, ::std::os::unix::io::RawFd, i32) -> WlShmPool","parent":null,"children":[],"decl_id":null,"docs":" create a shm pool","sig":null,"attributes":[{"value":"/ create a shm pool","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390595,"byte_end":10390616,"line_start":851,"line_end":851,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390621,"byte_end":10390624,"line_start":852,"line_end":852,"column_start":5,"column_end":8}},{"value":"/ Create a new wl_shm_pool object.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390629,"byte_end":10390665,"line_start":853,"line_end":853,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390670,"byte_end":10390673,"line_start":854,"line_end":854,"column_start":5,"column_end":8}},{"value":"/ The pool can be used to create shared memory based buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390678,"byte_end":10390739,"line_start":855,"line_end":855,"column_start":5,"column_end":66}},{"value":"/ objects.  The server will mmap size bytes of the passed file","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390744,"byte_end":10390808,"line_start":856,"line_end":856,"column_start":5,"column_end":69}},{"value":"/ descriptor, to use as backing memory for the pool.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390813,"byte_end":10390867,"line_start":857,"line_end":857,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":556},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391997,"byte_end":10392005,"line_start":885,"line_end":885,"column_start":12,"column_end":20},"name":"WlBuffer","qualname":"::sys::wayland::client::WlBuffer","value":"WlBuffer {  }","parent":null,"children":[{"krate":0,"index":557},{"krate":0,"index":558}],"decl_id":null,"docs":" content for a wl_surface","sig":null,"attributes":[{"value":"/ content for a wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391624,"byte_end":10391652,"line_start":878,"line_end":878,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391653,"byte_end":10391656,"line_start":879,"line_end":879,"column_start":1,"column_end":4}},{"value":"/ A buffer provides the content for a wl_surface. Buffers are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391657,"byte_end":10391720,"line_start":880,"line_end":880,"column_start":1,"column_end":64}},{"value":"/ created through factory interfaces such as wl_drm, wl_shm or","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391721,"byte_end":10391785,"line_start":881,"line_end":881,"column_start":1,"column_end":65}},{"value":"/ similar. It has a width and a height and can be attached to a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391786,"byte_end":10391851,"line_start":882,"line_end":882,"column_start":1,"column_end":66}},{"value":"/ wl_surface, but the mechanism by which a client provides and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391852,"byte_end":10391916,"line_start":883,"line_end":883,"column_start":1,"column_end":65}},{"value":"/ updates the contents is defined by the buffer factory interface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391917,"byte_end":10391985,"line_start":884,"line_end":884,"column_start":1,"column_end":69}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1308},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394320,"byte_end":10394327,"line_start":937,"line_end":937,"column_start":5,"column_end":12},"name":"Release","qualname":"::sys::wayland::client::WlBufferEvent::Release","value":"WlBufferEvent::Release","parent":{"krate":0,"index":1307},"children":[],"decl_id":null,"docs":" compositor releases buffer","sig":null,"attributes":[{"value":"/ compositor releases buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393546,"byte_end":10393576,"line_start":923,"line_end":923,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393581,"byte_end":10393584,"line_start":924,"line_end":924,"column_start":5,"column_end":8}},{"value":"/ Sent when this wl_buffer is no longer used by the compositor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393589,"byte_end":10393654,"line_start":925,"line_end":925,"column_start":5,"column_end":70}},{"value":"/ The client is now free to re-use or destroy this buffer and its","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393659,"byte_end":10393726,"line_start":926,"line_end":926,"column_start":5,"column_end":72}},{"value":"/ backing storage.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393731,"byte_end":10393751,"line_start":927,"line_end":927,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393756,"byte_end":10393759,"line_start":928,"line_end":928,"column_start":5,"column_end":8}},{"value":"/ If a client receives a release event before the frame callback","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393764,"byte_end":10393830,"line_start":929,"line_end":929,"column_start":5,"column_end":71}},{"value":"/ requested in the same wl_surface.commit that attaches this","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393835,"byte_end":10393897,"line_start":930,"line_end":930,"column_start":5,"column_end":67}},{"value":"/ wl_buffer to a surface, then the client is immediately free to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393902,"byte_end":10393968,"line_start":931,"line_end":931,"column_start":5,"column_end":71}},{"value":"/ re-use the buffer and its backing storage, and does not need a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393973,"byte_end":10394039,"line_start":932,"line_end":932,"column_start":5,"column_end":71}},{"value":"/ second buffer for the next surface content update. Typically","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394044,"byte_end":10394108,"line_start":933,"line_end":933,"column_start":5,"column_end":69}},{"value":"/ this is possible, when the compositor maintains a copy of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394113,"byte_end":10394178,"line_start":934,"line_end":934,"column_start":5,"column_end":70}},{"value":"/ wl_surface contents, e.g. as a GL texture. This is an important","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394183,"byte_end":10394250,"line_start":935,"line_end":935,"column_start":5,"column_end":72}},{"value":"/ optimization for GL(ES) compositors with wl_shm clients.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394255,"byte_end":10394315,"line_start":936,"line_end":936,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":1307},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393526,"byte_end":10393539,"line_start":922,"line_end":922,"column_start":10,"column_end":23},"name":"WlBufferEvent","qualname":"::sys::wayland::client::WlBufferEvent","value":"pub enum WlBufferEvent {\n\n    /// compositor releases buffer\n    ///\n    /// Sent when this wl_buffer is no longer used by the compositor.\n    /// The client is now free to re-use or destroy this buffer and its\n    /// backing storage.\n    ///\n    /// If a client receives a release event before the frame callback\n    /// requested in the same wl_surface.commit that attaches this\n    /// wl_buffer to a surface, then the client is immediately free to\n    /// re-use the buffer and its backing storage, and does not need a\n    /// second buffer for the next surface content update. Typically\n    /// this is possible, when the compositor maintains a copy of the\n    /// wl_surface contents, e.g. as a GL texture. This is an important\n    /// optimization for GL(ES) compositors with wl_shm clients.\n    Release,\n}","parent":null,"children":[{"krate":0,"index":1308}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394922,"byte_end":10394929,"line_start":958,"line_end":958,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlBuffer>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy a buffer","sig":null,"attributes":[{"value":"/ destroy a buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394674,"byte_end":10394694,"line_start":952,"line_end":952,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394699,"byte_end":10394702,"line_start":953,"line_end":953,"column_start":5,"column_end":8}},{"value":"/ Destroy a buffer. If and how you need to release the backing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394707,"byte_end":10394771,"line_start":954,"line_end":954,"column_start":5,"column_end":69}},{"value":"/ storage is defined by the buffer factory interface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394776,"byte_end":10394831,"line_start":955,"line_end":955,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394836,"byte_end":10394839,"line_start":956,"line_end":956,"column_start":5,"column_end":8}},{"value":"/ For possible side-effects to a surface, see wl_surface.attach.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394844,"byte_end":10394910,"line_start":957,"line_end":957,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":579},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395729,"byte_end":10395740,"line_start":982,"line_end":982,"column_start":12,"column_end":23},"name":"WlDataOffer","qualname":"::sys::wayland::client::WlDataOffer","value":"WlDataOffer {  }","parent":null,"children":[{"krate":0,"index":580},{"krate":0,"index":581}],"decl_id":null,"docs":" offer to transfer data","sig":null,"attributes":[{"value":"/ offer to transfer data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395330,"byte_end":10395356,"line_start":974,"line_end":974,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395357,"byte_end":10395360,"line_start":975,"line_end":975,"column_start":1,"column_end":4}},{"value":"/ A wl_data_offer represents a piece of data offered for transfer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395361,"byte_end":10395428,"line_start":976,"line_end":976,"column_start":1,"column_end":68}},{"value":"/ by another client (the source client).  It is used by the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395429,"byte_end":10395490,"line_start":977,"line_end":977,"column_start":1,"column_end":62}},{"value":"/ copy-and-paste and drag-and-drop mechanisms.  The offer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395491,"byte_end":10395550,"line_start":978,"line_end":978,"column_start":1,"column_end":60}},{"value":"/ describes the different mime types that the data can be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395551,"byte_end":10395610,"line_start":979,"line_end":979,"column_start":1,"column_end":60}},{"value":"/ converted to and provides the mechanism for transferring the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395611,"byte_end":10395675,"line_start":980,"line_end":980,"column_start":1,"column_end":65}},{"value":"/ data directly from the source client.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395676,"byte_end":10395717,"line_start":981,"line_end":981,"column_start":1,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1313},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397594,"byte_end":10397599,"line_start":1028,"line_end":1028,"column_start":5,"column_end":10},"name":"Offer","qualname":"::sys::wayland::client::WlDataOfferEvent::Offer","value":"WlDataOfferEvent::Offer(String)","parent":{"krate":0,"index":1312},"children":[],"decl_id":null,"docs":" advertise offered mime type","sig":null,"attributes":[{"value":"/ advertise offered mime type","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397407,"byte_end":10397438,"line_start":1022,"line_end":1022,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397443,"byte_end":10397446,"line_start":1023,"line_end":1023,"column_start":5,"column_end":8}},{"value":"/ Sent immediately after creating the wl_data_offer object.  One","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397451,"byte_end":10397517,"line_start":1024,"line_end":1024,"column_start":5,"column_end":71}},{"value":"/ event per offered mime type.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397522,"byte_end":10397554,"line_start":1025,"line_end":1025,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397559,"byte_end":10397562,"line_start":1026,"line_end":1026,"column_start":5,"column_end":8}},{"value":"/ Values: mime_type,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397567,"byte_end":10397589,"line_start":1027,"line_end":1027,"column_start":5,"column_end":27}}]},{"kind":"Enum","id":{"krate":0,"index":1312},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397384,"byte_end":10397400,"line_start":1021,"line_end":1021,"column_start":10,"column_end":26},"name":"WlDataOfferEvent","qualname":"::sys::wayland::client::WlDataOfferEvent","value":"pub enum WlDataOfferEvent {\n\n    /// advertise offered mime type\n    ///\n    /// Sent immediately after creating the wl_data_offer object.  One\n    /// event per offered mime type.\n    ///\n    /// Values: mime_type,\n    Offer(String),\n}","parent":null,"children":[{"krate":0,"index":1313}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398328,"byte_end":10398334,"line_start":1050,"line_end":1050,"column_start":12,"column_end":18},"name":"accept","qualname":"<WlDataOffer>::accept","value":"pub fn accept(&Self, u32, Option<String>)","parent":null,"children":[],"decl_id":null,"docs":" accept one of the offered mime types","sig":null,"attributes":[{"value":"/ accept one of the offered mime types","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398113,"byte_end":10398153,"line_start":1044,"line_end":1044,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398158,"byte_end":10398161,"line_start":1045,"line_end":1045,"column_start":5,"column_end":8}},{"value":"/ Indicate that the client can accept the given mime type, or","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398166,"byte_end":10398229,"line_start":1046,"line_end":1046,"column_start":5,"column_end":68}},{"value":"/ NULL for not accepted.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398234,"byte_end":10398260,"line_start":1047,"line_end":1047,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398265,"byte_end":10398268,"line_start":1048,"line_end":1048,"column_start":5,"column_end":8}},{"value":"/ Used for feedback during drag-and-drop.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398273,"byte_end":10398316,"line_start":1049,"line_end":1049,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399303,"byte_end":10399310,"line_start":1068,"line_end":1068,"column_start":12,"column_end":19},"name":"receive","qualname":"<WlDataOffer>::receive","value":"pub fn receive(&Self, String, ::std::os::unix::io::RawFd)","parent":null,"children":[],"decl_id":null,"docs":" request that the data is transferred","sig":null,"attributes":[{"value":"/ request that the data is transferred","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398702,"byte_end":10398742,"line_start":1056,"line_end":1056,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398747,"byte_end":10398750,"line_start":1057,"line_end":1057,"column_start":5,"column_end":8}},{"value":"/ To transfer the offered data, the client issues this request","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398755,"byte_end":10398819,"line_start":1058,"line_end":1058,"column_start":5,"column_end":69}},{"value":"/ and indicates the mime type it wants to receive.  The transfer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398824,"byte_end":10398890,"line_start":1059,"line_end":1059,"column_start":5,"column_end":71}},{"value":"/ happens through the passed file descriptor (typically created","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398895,"byte_end":10398960,"line_start":1060,"line_end":1060,"column_start":5,"column_end":70}},{"value":"/ with the pipe system call).  The source client writes the data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398965,"byte_end":10399031,"line_start":1061,"line_end":1061,"column_start":5,"column_end":71}},{"value":"/ in the mime type representation requested and then closes the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399036,"byte_end":10399101,"line_start":1062,"line_end":1062,"column_start":5,"column_end":70}},{"value":"/ file descriptor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399106,"byte_end":10399126,"line_start":1063,"line_end":1063,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399131,"byte_end":10399134,"line_start":1064,"line_end":1064,"column_start":5,"column_end":8}},{"value":"/ The receiving client reads from the read end of the pipe until","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399139,"byte_end":10399205,"line_start":1065,"line_end":1065,"column_start":5,"column_end":71}},{"value":"/ EOF and then closes its end, at which point the transfer is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399210,"byte_end":10399273,"line_start":1066,"line_end":1066,"column_start":5,"column_end":68}},{"value":"/ complete.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399278,"byte_end":10399291,"line_start":1067,"line_end":1067,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399715,"byte_end":10399722,"line_start":1077,"line_end":1077,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlDataOffer>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy data offer","sig":null,"attributes":[{"value":"/ destroy data offer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399641,"byte_end":10399663,"line_start":1074,"line_end":1074,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399668,"byte_end":10399671,"line_start":1075,"line_end":1075,"column_start":5,"column_end":8}},{"value":"/ Destroy the data offer.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399676,"byte_end":10399703,"line_start":1076,"line_end":1076,"column_start":5,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":609},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400411,"byte_end":10400423,"line_start":1099,"line_end":1099,"column_start":12,"column_end":24},"name":"WlDataSource","qualname":"::sys::wayland::client::WlDataSource","value":"WlDataSource {  }","parent":null,"children":[{"krate":0,"index":610},{"krate":0,"index":611}],"decl_id":null,"docs":" offer to transfer data","sig":null,"attributes":[{"value":"/ offer to transfer data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400131,"byte_end":10400157,"line_start":1093,"line_end":1093,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400158,"byte_end":10400161,"line_start":1094,"line_end":1094,"column_start":1,"column_end":4}},{"value":"/ The wl_data_source object is the source side of a wl_data_offer.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400162,"byte_end":10400230,"line_start":1095,"line_end":1095,"column_start":1,"column_end":69}},{"value":"/ It is created by the source client in a data transfer and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400231,"byte_end":10400292,"line_start":1096,"line_end":1096,"column_start":1,"column_end":62}},{"value":"/ provides a way to describe the offered data and a way to respond","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400293,"byte_end":10400361,"line_start":1097,"line_end":1097,"column_start":1,"column_end":69}},{"value":"/ to requests to transfer the data.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400362,"byte_end":10400399,"line_start":1098,"line_end":1098,"column_start":1,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1320},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402356,"byte_end":10402362,"line_start":1146,"line_end":1146,"column_start":5,"column_end":11},"name":"Target","qualname":"::sys::wayland::client::WlDataSourceEvent::Target","value":"WlDataSourceEvent::Target(String)","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" a target accepts an offered mime type","sig":null,"attributes":[{"value":"/ a target accepts an offered mime type","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402067,"byte_end":10402108,"line_start":1138,"line_end":1138,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402113,"byte_end":10402116,"line_start":1139,"line_end":1139,"column_start":5,"column_end":8}},{"value":"/ Sent when a target accepts pointer_focus or motion events.  If","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402121,"byte_end":10402187,"line_start":1140,"line_end":1140,"column_start":5,"column_end":71}},{"value":"/ a target does not accept any of the offered types, type is NULL.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402192,"byte_end":10402260,"line_start":1141,"line_end":1141,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402265,"byte_end":10402268,"line_start":1142,"line_end":1142,"column_start":5,"column_end":8}},{"value":"/ Used for feedback during drag-and-drop.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402273,"byte_end":10402316,"line_start":1143,"line_end":1143,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402321,"byte_end":10402324,"line_start":1144,"line_end":1144,"column_start":5,"column_end":8}},{"value":"/ Values: mime_type,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402329,"byte_end":10402351,"line_start":1145,"line_end":1145,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1323},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402594,"byte_end":10402598,"line_start":1154,"line_end":1154,"column_start":5,"column_end":9},"name":"Send","qualname":"::sys::wayland::client::WlDataSourceEvent::Send","value":"WlDataSourceEvent::Send(String, ::std::os::unix::io::RawFd)","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" send the data","sig":null,"attributes":[{"value":"/ send the data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402377,"byte_end":10402394,"line_start":1147,"line_end":1147,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402399,"byte_end":10402402,"line_start":1148,"line_end":1148,"column_start":5,"column_end":8}},{"value":"/ Request for data from the client.  Send the data as the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402407,"byte_end":10402466,"line_start":1149,"line_end":1149,"column_start":5,"column_end":64}},{"value":"/ specified mime type over the passed file descriptor, then","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402471,"byte_end":10402532,"line_start":1150,"line_end":1150,"column_start":5,"column_end":66}},{"value":"/ close it.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402537,"byte_end":10402550,"line_start":1151,"line_end":1151,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402555,"byte_end":10402558,"line_start":1152,"line_end":1152,"column_start":5,"column_end":8}},{"value":"/ Values: mime_type, fd,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402563,"byte_end":10402589,"line_start":1153,"line_end":1153,"column_start":5,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1327},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402812,"byte_end":10402821,"line_start":1159,"line_end":1159,"column_start":5,"column_end":14},"name":"Cancelled","qualname":"::sys::wayland::client::WlDataSourceEvent::Cancelled","value":"WlDataSourceEvent::Cancelled","parent":{"krate":0,"index":1319},"children":[],"decl_id":null,"docs":" selection was cancelled","sig":null,"attributes":[{"value":"/ selection was cancelled","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402640,"byte_end":10402667,"line_start":1155,"line_end":1155,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402672,"byte_end":10402675,"line_start":1156,"line_end":1156,"column_start":5,"column_end":8}},{"value":"/ This data source has been replaced by another data source.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402680,"byte_end":10402742,"line_start":1157,"line_end":1157,"column_start":5,"column_end":67}},{"value":"/ The client should clean up and destroy this data source.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402747,"byte_end":10402807,"line_start":1158,"line_end":1158,"column_start":5,"column_end":65}}]},{"kind":"Enum","id":{"krate":0,"index":1319},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10402043,"byte_end":10402060,"line_start":1137,"line_end":1137,"column_start":10,"column_end":27},"name":"WlDataSourceEvent","qualname":"::sys::wayland::client::WlDataSourceEvent","value":"pub enum WlDataSourceEvent {\n\n    /// a target accepts an offered mime type\n    ///\n    /// Sent when a target accepts pointer_focus or motion events.  If\n    /// a target does not accept any of the offered types, type is NULL.\n    ///\n    /// Used for feedback during drag-and-drop.\n    ///\n    /// Values: mime_type,\n    Target(String),\n\n    /// send the data\n    ///\n    /// Request for data from the client.  Send the data as the\n    /// specified mime type over the passed file descriptor, then\n    /// close it.\n    ///\n    /// Values: mime_type, fd,\n    Send(String, ::std::os::unix::io::RawFd),\n\n    /// selection was cancelled\n    ///\n    /// This data source has been replaced by another data source.\n    /// The client should clean up and destroy this data source.\n    Cancelled,\n}","parent":null,"children":[{"krate":0,"index":1320},{"krate":0,"index":1323},{"krate":0,"index":1327}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403895,"byte_end":10403900,"line_start":1188,"line_end":1188,"column_start":12,"column_end":17},"name":"offer","qualname":"<WlDataSource>::offer","value":"pub fn offer(&Self, String)","parent":null,"children":[],"decl_id":null,"docs":" add an offered mime type","sig":null,"attributes":[{"value":"/ add an offered mime type","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403691,"byte_end":10403719,"line_start":1183,"line_end":1183,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403724,"byte_end":10403727,"line_start":1184,"line_end":1184,"column_start":5,"column_end":8}},{"value":"/ This request adds a mime type to the set of mime types","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403732,"byte_end":10403790,"line_start":1185,"line_end":1185,"column_start":5,"column_end":63}},{"value":"/ advertised to targets.  Can be called several times to offer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403795,"byte_end":10403859,"line_start":1186,"line_end":1186,"column_start":5,"column_end":69}},{"value":"/ multiple types.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403864,"byte_end":10403883,"line_start":1187,"line_end":1187,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404274,"byte_end":10404281,"line_start":1197,"line_end":1197,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlDataSource>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy the data source","sig":null,"attributes":[{"value":"/ destroy the data source","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404194,"byte_end":10404221,"line_start":1194,"line_end":1194,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404226,"byte_end":10404229,"line_start":1195,"line_end":1195,"column_start":5,"column_end":8}},{"value":"/ Destroy the data source.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404234,"byte_end":10404262,"line_start":1196,"line_end":1196,"column_start":5,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":635},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404977,"byte_end":10404989,"line_start":1220,"line_end":1220,"column_start":12,"column_end":24},"name":"WlDataDevice","qualname":"::sys::wayland::client::WlDataDevice","value":"WlDataDevice {  }","parent":null,"children":[{"krate":0,"index":636},{"krate":0,"index":637}],"decl_id":null,"docs":" data transfer device","sig":null,"attributes":[{"value":"/ data transfer device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404692,"byte_end":10404716,"line_start":1213,"line_end":1213,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404717,"byte_end":10404720,"line_start":1214,"line_end":1214,"column_start":1,"column_end":4}},{"value":"/ There is one wl_data_device per seat which can be obtained","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404721,"byte_end":10404783,"line_start":1215,"line_end":1215,"column_start":1,"column_end":63}},{"value":"/ from the global wl_data_device_manager singleton.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404784,"byte_end":10404837,"line_start":1216,"line_end":1216,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404838,"byte_end":10404841,"line_start":1217,"line_end":1217,"column_start":1,"column_end":4}},{"value":"/ A wl_data_device provides access to inter-client data transfer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404842,"byte_end":10404908,"line_start":1218,"line_end":1218,"column_start":1,"column_end":67}},{"value":"/ mechanisms such as copy-and-paste and drag-and-drop.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404909,"byte_end":10404965,"line_start":1219,"line_end":1219,"column_start":1,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1340},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407490,"byte_end":10407499,"line_start":1286,"line_end":1286,"column_start":5,"column_end":14},"name":"DataOffer","qualname":"::sys::wayland::client::WlDataDeviceEvent::DataOffer","value":"WlDataDeviceEvent::DataOffer(WlDataOffer)","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" introduce a new wl_data_offer","sig":null,"attributes":[{"value":"/ introduce a new wl_data_offer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10406998,"byte_end":10407031,"line_start":1275,"line_end":1275,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407036,"byte_end":10407039,"line_start":1276,"line_end":1276,"column_start":5,"column_end":8}},{"value":"/ The data_offer event introduces a new wl_data_offer object,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407044,"byte_end":10407107,"line_start":1277,"line_end":1277,"column_start":5,"column_end":68}},{"value":"/ which will subsequently be used in either the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407112,"byte_end":10407161,"line_start":1278,"line_end":1278,"column_start":5,"column_end":54}},{"value":"/ data_device.enter event (for drag-and-drop) or the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407166,"byte_end":10407220,"line_start":1279,"line_end":1279,"column_start":5,"column_end":59}},{"value":"/ data_device.selection event (for selections).  Immediately","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407225,"byte_end":10407287,"line_start":1280,"line_end":1280,"column_start":5,"column_end":67}},{"value":"/ following the data_device_data_offer event, the new data_offer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407292,"byte_end":10407358,"line_start":1281,"line_end":1281,"column_start":5,"column_end":71}},{"value":"/ object will send out data_offer.offer events to describe the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407363,"byte_end":10407427,"line_start":1282,"line_end":1282,"column_start":5,"column_end":69}},{"value":"/ mime types it offers.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407432,"byte_end":10407457,"line_start":1283,"line_end":1283,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407462,"byte_end":10407465,"line_start":1284,"line_end":1284,"column_start":5,"column_end":8}},{"value":"/ Values: id,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407470,"byte_end":10407485,"line_start":1285,"line_end":1285,"column_start":5,"column_end":20}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1343},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407854,"byte_end":10407859,"line_start":1295,"line_end":1295,"column_start":5,"column_end":10},"name":"Enter","qualname":"::sys::wayland::client::WlDataDeviceEvent::Enter","value":"WlDataDeviceEvent::Enter(u32, ProxyId, f64, f64, ProxyId)","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" initiate drag-and-drop session","sig":null,"attributes":[{"value":"/ initiate drag-and-drop session","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407519,"byte_end":10407553,"line_start":1287,"line_end":1287,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407558,"byte_end":10407561,"line_start":1288,"line_end":1288,"column_start":5,"column_end":8}},{"value":"/ This event is sent when an active drag-and-drop pointer enters","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407566,"byte_end":10407632,"line_start":1289,"line_end":1289,"column_start":5,"column_end":71}},{"value":"/ a surface owned by the client.  The position of the pointer at","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407637,"byte_end":10407703,"line_start":1290,"line_end":1290,"column_start":5,"column_end":71}},{"value":"/ enter time is provided by the x and y arguments, in surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407708,"byte_end":10407771,"line_start":1291,"line_end":1291,"column_start":5,"column_end":68}},{"value":"/ local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407776,"byte_end":10407798,"line_start":1292,"line_end":1292,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407803,"byte_end":10407806,"line_start":1293,"line_end":1293,"column_start":5,"column_end":8}},{"value":"/ Values: serial, surface, x, y, id,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407811,"byte_end":10407849,"line_start":1294,"line_end":1294,"column_start":5,"column_end":43}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1350},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408135,"byte_end":10408140,"line_start":1301,"line_end":1301,"column_start":5,"column_end":10},"name":"Leave","qualname":"::sys::wayland::client::WlDataDeviceEvent::Leave","value":"WlDataDeviceEvent::Leave","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" end drag-and-drop session","sig":null,"attributes":[{"value":"/ end drag-and-drop session","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407895,"byte_end":10407924,"line_start":1296,"line_end":1296,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407929,"byte_end":10407932,"line_start":1297,"line_end":1297,"column_start":5,"column_end":8}},{"value":"/ This event is sent when the drag-and-drop pointer leaves the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10407937,"byte_end":10408001,"line_start":1298,"line_end":1298,"column_start":5,"column_end":69}},{"value":"/ surface and the session ends.  The client must destroy the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408006,"byte_end":10408068,"line_start":1299,"line_end":1299,"column_start":5,"column_end":67}},{"value":"/ wl_data_offer introduced at enter time at this point.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408073,"byte_end":10408130,"line_start":1300,"line_end":1300,"column_start":5,"column_end":62}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1352},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408453,"byte_end":10408459,"line_start":1310,"line_end":1310,"column_start":5,"column_end":11},"name":"Motion","qualname":"::sys::wayland::client::WlDataDeviceEvent::Motion","value":"WlDataDeviceEvent::Motion(u32, f64, f64)","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" drag-and-drop session motion","sig":null,"attributes":[{"value":"/ drag-and-drop session motion","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408146,"byte_end":10408178,"line_start":1302,"line_end":1302,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408183,"byte_end":10408186,"line_start":1303,"line_end":1303,"column_start":5,"column_end":8}},{"value":"/ This event is sent when the drag-and-drop pointer moves within","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408191,"byte_end":10408257,"line_start":1304,"line_end":1304,"column_start":5,"column_end":71}},{"value":"/ the currently focused surface. The new position of the pointer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408262,"byte_end":10408328,"line_start":1305,"line_end":1305,"column_start":5,"column_end":71}},{"value":"/ is provided by the x and y arguments, in surface local","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408333,"byte_end":10408391,"line_start":1306,"line_end":1306,"column_start":5,"column_end":63}},{"value":"/ coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408396,"byte_end":10408412,"line_start":1307,"line_end":1307,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408417,"byte_end":10408420,"line_start":1308,"line_end":1308,"column_start":5,"column_end":8}},{"value":"/ Values: time, x, y,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408425,"byte_end":10408448,"line_start":1309,"line_end":1309,"column_start":5,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1357},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408646,"byte_end":10408650,"line_start":1315,"line_end":1315,"column_start":5,"column_end":9},"name":"Drop","qualname":"::sys::wayland::client::WlDataDeviceEvent::Drop","value":"WlDataDeviceEvent::Drop","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" end drag-and-drag session successfully","sig":null,"attributes":[{"value":"/ end drag-and-drag session successfully","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408479,"byte_end":10408521,"line_start":1311,"line_end":1311,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408526,"byte_end":10408529,"line_start":1312,"line_end":1312,"column_start":5,"column_end":8}},{"value":"/ The event is sent when a drag-and-drop operation is ended","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408534,"byte_end":10408595,"line_start":1313,"line_end":1313,"column_start":5,"column_end":66}},{"value":"/ because the implicit grab is removed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408600,"byte_end":10408641,"line_start":1314,"line_end":1314,"column_start":5,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1359},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409421,"byte_end":10409430,"line_start":1331,"line_end":1331,"column_start":5,"column_end":14},"name":"Selection","qualname":"::sys::wayland::client::WlDataDeviceEvent::Selection","value":"WlDataDeviceEvent::Selection(ProxyId)","parent":{"krate":0,"index":1339},"children":[],"decl_id":null,"docs":" advertise new selection","sig":null,"attributes":[{"value":"/ advertise new selection","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408656,"byte_end":10408683,"line_start":1316,"line_end":1316,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408688,"byte_end":10408691,"line_start":1317,"line_end":1317,"column_start":5,"column_end":8}},{"value":"/ The selection event is sent out to notify the client of a new","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408696,"byte_end":10408761,"line_start":1318,"line_end":1318,"column_start":5,"column_end":70}},{"value":"/ wl_data_offer for the selection for this device.  The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408766,"byte_end":10408823,"line_start":1319,"line_end":1319,"column_start":5,"column_end":62}},{"value":"/ data_device.data_offer and the data_offer.offer events are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408828,"byte_end":10408890,"line_start":1320,"line_end":1320,"column_start":5,"column_end":67}},{"value":"/ sent out immediately before this event to introduce the data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408895,"byte_end":10408959,"line_start":1321,"line_end":1321,"column_start":5,"column_end":69}},{"value":"/ offer object.  The selection event is sent to a client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10408964,"byte_end":10409022,"line_start":1322,"line_end":1322,"column_start":5,"column_end":63}},{"value":"/ immediately before receiving keyboard focus and when a new","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409027,"byte_end":10409089,"line_start":1323,"line_end":1323,"column_start":5,"column_end":67}},{"value":"/ selection is set while the client has keyboard focus.  The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409094,"byte_end":10409156,"line_start":1324,"line_end":1324,"column_start":5,"column_end":67}},{"value":"/ data_offer is valid until a new data_offer or NULL is received","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409161,"byte_end":10409227,"line_start":1325,"line_end":1325,"column_start":5,"column_end":71}},{"value":"/ or until the client loses keyboard focus.  The client must","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409232,"byte_end":10409294,"line_start":1326,"line_end":1326,"column_start":5,"column_end":67}},{"value":"/ destroy the previous selection data_offer, if any, upon receiving","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409299,"byte_end":10409368,"line_start":1327,"line_end":1327,"column_start":5,"column_end":74}},{"value":"/ this event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409373,"byte_end":10409388,"line_start":1328,"line_end":1328,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409393,"byte_end":10409396,"line_start":1329,"line_end":1329,"column_start":5,"column_end":8}},{"value":"/ Values: id,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10409401,"byte_end":10409416,"line_start":1330,"line_end":1330,"column_start":5,"column_end":20}}]},{"kind":"Enum","id":{"krate":0,"index":1339},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10406974,"byte_end":10406991,"line_start":1274,"line_end":1274,"column_start":10,"column_end":27},"name":"WlDataDeviceEvent","qualname":"::sys::wayland::client::WlDataDeviceEvent","value":"pub enum WlDataDeviceEvent {\n\n    /// introduce a new wl_data_offer\n    ///\n    /// The data_offer event introduces a new wl_data_offer object,\n    /// which will subsequently be used in either the\n    /// data_device.enter event (for drag-and-drop) or the\n    /// data_device.selection event (for selections).  Immediately\n    /// following the data_device_data_offer event, the new data_offer\n    /// object will send out data_offer.offer events to describe the\n    /// mime types it offers.\n    ///\n    /// Values: id,\n    DataOffer(WlDataOffer),\n\n    /// initiate drag-and-drop session\n    ///\n    /// This event is sent when an active drag-and-drop pointer enters\n    /// a surface owned by the client.  The position of the pointer at\n    /// enter time is provided by the x and y arguments, in surface\n    /// local coordinates.\n    ///\n    /// Values: serial, surface, x, y, id,\n    Enter(u32, ProxyId, f64, f64, ProxyId),\n\n    /// end drag-and-drop session\n    ///\n    /// This event is sent when the drag-and-drop pointer leaves the\n    /// surface and the session ends.  The client must destroy the\n    /// wl_data_offer introduced at enter time at this point.\n    Leave,\n\n    /// drag-and-drop session motion\n    ///\n    /// This event is sent when the drag-and-drop pointer moves within\n    /// the currently focused surface. The new position of the pointer\n    /// is provided by the x and y arguments, in surface local\n    /// coordinates.\n    ///\n    /// Values: time, x, y,\n    Motion(u32, f64, f64),\n\n    /// end drag-and-drag session successfully\n    ///\n    /// The event is sent when a drag-and-drop operation is ended\n    /// because the implicit grab is removed.\n    Drop,\n\n    /// advertise new selection\n    ///\n    /// The selection event is sent out to notify the client of a new\n    /// wl_data_offer for the selection for this device.  The\n    /// data_device.data_offer and the data_offer.offer events are\n    /// sent out immediately before this event to introduce the data\n    /// offer object.  The selection event is sent to a client\n    /// immediately before receiving keyboard focus and when a new\n    /// selection is set while the client has keyboard focus.  The\n    /// data_offer is valid until a new data_offer or NULL is received\n    /// or until the client loses keyboard focus.  The client must\n    /// destroy the previous selection data_offer, if any, upon receiving\n    /// this event.\n    ///\n    /// Values: id,\n    Selection(ProxyId),\n}","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1343},{"krate":0,"index":1350},{"krate":0,"index":1352},{"krate":0,"index":1357},{"krate":0,"index":1359}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":658},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412605,"byte_end":10412615,"line_start":1400,"line_end":1400,"column_start":12,"column_end":22},"name":"start_drag","qualname":"<WlDataDevice>::start_drag","value":"pub fn start_drag(&Self, Option<&WlDataSource>, &WlSurface,\n                  Option<&WlSurface>, u32)","parent":null,"children":[],"decl_id":null,"docs":" start drag-and-drop operation","sig":null,"attributes":[{"value":"/ start drag-and-drop operation","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411081,"byte_end":10411114,"line_start":1371,"line_end":1371,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411119,"byte_end":10411122,"line_start":1372,"line_end":1372,"column_start":5,"column_end":8}},{"value":"/ This request asks the compositor to start a drag-and-drop","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411127,"byte_end":10411188,"line_start":1373,"line_end":1373,"column_start":5,"column_end":66}},{"value":"/ operation on behalf of the client.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411193,"byte_end":10411231,"line_start":1374,"line_end":1374,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411236,"byte_end":10411239,"line_start":1375,"line_end":1375,"column_start":5,"column_end":8}},{"value":"/ The source argument is the data source that provides the data","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411244,"byte_end":10411309,"line_start":1376,"line_end":1376,"column_start":5,"column_end":70}},{"value":"/ for the eventual data transfer. If source is NULL, enter, leave","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411314,"byte_end":10411381,"line_start":1377,"line_end":1377,"column_start":5,"column_end":72}},{"value":"/ and motion events are sent only to the client that initiated the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411386,"byte_end":10411454,"line_start":1378,"line_end":1378,"column_start":5,"column_end":73}},{"value":"/ drag and the client is expected to handle the data passing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411459,"byte_end":10411521,"line_start":1379,"line_end":1379,"column_start":5,"column_end":67}},{"value":"/ internally.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411526,"byte_end":10411541,"line_start":1380,"line_end":1380,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411546,"byte_end":10411549,"line_start":1381,"line_end":1381,"column_start":5,"column_end":8}},{"value":"/ The origin surface is the surface where the drag originates and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411554,"byte_end":10411621,"line_start":1382,"line_end":1382,"column_start":5,"column_end":72}},{"value":"/ the client must have an active implicit grab that matches the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411626,"byte_end":10411691,"line_start":1383,"line_end":1383,"column_start":5,"column_end":70}},{"value":"/ serial.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411696,"byte_end":10411707,"line_start":1384,"line_end":1384,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411712,"byte_end":10411715,"line_start":1385,"line_end":1385,"column_start":5,"column_end":8}},{"value":"/ The icon surface is an optional (can be NULL) surface that","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411720,"byte_end":10411782,"line_start":1386,"line_end":1386,"column_start":5,"column_end":67}},{"value":"/ provides an icon to be moved around with the cursor.  Initially,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411787,"byte_end":10411855,"line_start":1387,"line_end":1387,"column_start":5,"column_end":73}},{"value":"/ the top-left corner of the icon surface is placed at the cursor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411860,"byte_end":10411927,"line_start":1388,"line_end":1388,"column_start":5,"column_end":72}},{"value":"/ hotspot, but subsequent wl_surface.attach request can move the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411932,"byte_end":10411998,"line_start":1389,"line_end":1389,"column_start":5,"column_end":71}},{"value":"/ relative position. Attach requests must be confirmed with","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412003,"byte_end":10412064,"line_start":1390,"line_end":1390,"column_start":5,"column_end":66}},{"value":"/ wl_surface.commit as usual. The icon surface is given the role of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412069,"byte_end":10412138,"line_start":1391,"line_end":1391,"column_start":5,"column_end":74}},{"value":"/ a drag-and-drop icon. If the icon surface already has another role,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412143,"byte_end":10412214,"line_start":1392,"line_end":1392,"column_start":5,"column_end":76}},{"value":"/ it raises a protocol error.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412219,"byte_end":10412250,"line_start":1393,"line_end":1393,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412255,"byte_end":10412258,"line_start":1394,"line_end":1394,"column_start":5,"column_end":8}},{"value":"/ The current and pending input regions of the icon wl_surface are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412263,"byte_end":10412331,"line_start":1395,"line_end":1395,"column_start":5,"column_end":73}},{"value":"/ cleared, and wl_surface.set_input_region is ignored until the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412336,"byte_end":10412401,"line_start":1396,"line_end":1396,"column_start":5,"column_end":70}},{"value":"/ wl_surface is no longer used as the icon surface. When the use","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412406,"byte_end":10412472,"line_start":1397,"line_end":1397,"column_start":5,"column_end":71}},{"value":"/ as an icon ends, the current and pending input regions become","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412477,"byte_end":10412542,"line_start":1398,"line_end":1398,"column_start":5,"column_end":70}},{"value":"/ undefined, and the wl_surface is unmapped.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412547,"byte_end":10412593,"line_start":1399,"line_end":1399,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":659},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413212,"byte_end":10413225,"line_start":1411,"line_end":1411,"column_start":12,"column_end":25},"name":"set_selection","qualname":"<WlDataDevice>::set_selection","value":"pub fn set_selection(&Self, Option<&WlDataSource>, u32)","parent":null,"children":[],"decl_id":null,"docs":" copy data to the selection","sig":null,"attributes":[{"value":"/ copy data to the selection","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10412975,"byte_end":10413005,"line_start":1405,"line_end":1405,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413010,"byte_end":10413013,"line_start":1406,"line_end":1406,"column_start":5,"column_end":8}},{"value":"/ This request asks the compositor to set the selection","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413018,"byte_end":10413075,"line_start":1407,"line_end":1407,"column_start":5,"column_end":62}},{"value":"/ to the data from the source on behalf of the client.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413080,"byte_end":10413136,"line_start":1408,"line_end":1408,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413141,"byte_end":10413144,"line_start":1409,"line_end":1409,"column_start":5,"column_end":8}},{"value":"/ To unset the selection, set the source to NULL.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413149,"byte_end":10413200,"line_start":1410,"line_end":1410,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":660},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413620,"byte_end":10413627,"line_start":1421,"line_end":1421,"column_start":12,"column_end":19},"name":"release","qualname":"<WlDataDevice>::release","value":"pub fn release(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy data device","sig":null,"attributes":[{"value":"/ destroy data device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413479,"byte_end":10413502,"line_start":1416,"line_end":1416,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413507,"byte_end":10413510,"line_start":1417,"line_end":1417,"column_start":5,"column_end":8}},{"value":"/ This request destroys the data device.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413515,"byte_end":10413557,"line_start":1418,"line_end":1418,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413562,"byte_end":10413565,"line_start":1419,"line_end":1419,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 2`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413570,"byte_end":10413608,"line_start":1420,"line_end":1420,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":663},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414391,"byte_end":10414410,"line_start":1444,"line_end":1444,"column_start":12,"column_end":31},"name":"WlDataDeviceManager","qualname":"::sys::wayland::client::WlDataDeviceManager","value":"WlDataDeviceManager {  }","parent":null,"children":[{"krate":0,"index":664},{"krate":0,"index":665}],"decl_id":null,"docs":" data transfer interface","sig":null,"attributes":[{"value":"/ data transfer interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414046,"byte_end":10414073,"line_start":1437,"line_end":1437,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414074,"byte_end":10414077,"line_start":1438,"line_end":1438,"column_start":1,"column_end":4}},{"value":"/ The wl_data_device_manager is a singleton global object that","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414078,"byte_end":10414142,"line_start":1439,"line_end":1439,"column_start":1,"column_end":65}},{"value":"/ provides access to inter-client data transfer mechanisms such as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414143,"byte_end":10414211,"line_start":1440,"line_end":1440,"column_start":1,"column_end":69}},{"value":"/ copy-and-paste and drag-and-drop.  These mechanisms are tied to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414212,"byte_end":10414279,"line_start":1441,"line_end":1441,"column_start":1,"column_end":68}},{"value":"/ a wl_seat and this interface lets a client get a wl_data_device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414280,"byte_end":10414347,"line_start":1442,"line_end":1442,"column_start":1,"column_end":68}},{"value":"/ corresponding to a wl_seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414348,"byte_end":10414379,"line_start":1443,"line_end":1443,"column_start":1,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416092,"byte_end":10416110,"line_start":1485,"line_end":1485,"column_start":12,"column_end":30},"name":"create_data_source","qualname":"<WlDataDeviceManager>::create_data_source","value":"pub fn create_data_source(&Self) -> WlDataSource","parent":null,"children":[],"decl_id":null,"docs":" create a new data source","sig":null,"attributes":[{"value":"/ create a new data source","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416010,"byte_end":10416038,"line_start":1482,"line_end":1482,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416043,"byte_end":10416046,"line_start":1483,"line_end":1483,"column_start":5,"column_end":8}},{"value":"/ Create a new data source.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416051,"byte_end":10416080,"line_start":1484,"line_end":1484,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":683},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416753,"byte_end":10416768,"line_start":1498,"line_end":1498,"column_start":12,"column_end":27},"name":"get_data_device","qualname":"<WlDataDeviceManager>::get_data_device","value":"pub fn get_data_device(&Self, &WlSeat) -> WlDataDevice","parent":null,"children":[],"decl_id":null,"docs":" create a new data device","sig":null,"attributes":[{"value":"/ create a new data device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416654,"byte_end":10416682,"line_start":1495,"line_end":1495,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416687,"byte_end":10416690,"line_start":1496,"line_end":1496,"column_start":5,"column_end":8}},{"value":"/ Create a new data device for a given seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10416695,"byte_end":10416741,"line_start":1497,"line_end":1497,"column_start":5,"column_end":51}}]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417744,"byte_end":10417751,"line_start":1525,"line_end":1525,"column_start":12,"column_end":19},"name":"WlShell","qualname":"::sys::wayland::client::WlShell","value":"WlShell {  }","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":688}],"decl_id":null,"docs":" create desktop-style surfaces","sig":null,"attributes":[{"value":"/ create desktop-style surfaces","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417518,"byte_end":10417551,"line_start":1518,"line_end":1518,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417552,"byte_end":10417555,"line_start":1519,"line_end":1519,"column_start":1,"column_end":4}},{"value":"/ This interface is implemented by servers that provide","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417556,"byte_end":10417613,"line_start":1520,"line_end":1520,"column_start":1,"column_end":58}},{"value":"/ desktop-style user interfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417614,"byte_end":10417648,"line_start":1521,"line_end":1521,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417649,"byte_end":10417652,"line_start":1522,"line_end":1522,"column_start":1,"column_end":4}},{"value":"/ It allows clients to associate a wl_shell_surface with","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417653,"byte_end":10417711,"line_start":1523,"line_end":1523,"column_start":1,"column_end":59}},{"value":"/ a basic surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417712,"byte_end":10417732,"line_start":1524,"line_end":1524,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":705},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419750,"byte_end":10419767,"line_start":1584,"line_end":1584,"column_start":12,"column_end":29},"name":"get_shell_surface","qualname":"<WlShell>::get_shell_surface","value":"pub fn get_shell_surface(&Self, &WlSurface) -> WlShellSurface","parent":null,"children":[],"decl_id":null,"docs":" create a shell surface from a surface","sig":null,"attributes":[{"value":"/ create a shell surface from a surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419411,"byte_end":10419452,"line_start":1577,"line_end":1577,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419457,"byte_end":10419460,"line_start":1578,"line_end":1578,"column_start":5,"column_end":8}},{"value":"/ Create a shell surface for an existing surface. This gives","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419465,"byte_end":10419527,"line_start":1579,"line_end":1579,"column_start":5,"column_end":67}},{"value":"/ the wl_surface the role of a shell surface. If the wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419532,"byte_end":10419597,"line_start":1580,"line_end":1580,"column_start":5,"column_end":70}},{"value":"/ already has another role, it raises a protocol error.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419602,"byte_end":10419659,"line_start":1581,"line_end":1581,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419664,"byte_end":10419667,"line_start":1582,"line_end":1582,"column_start":5,"column_end":8}},{"value":"/ Only one shell surface can be associated with a given surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419672,"byte_end":10419738,"line_start":1583,"line_end":1583,"column_start":5,"column_end":71}}]},{"kind":"Struct","id":{"krate":0,"index":708},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421090,"byte_end":10421104,"line_start":1617,"line_end":1617,"column_start":12,"column_end":26},"name":"WlShellSurface","qualname":"::sys::wayland::client::WlShellSurface","value":"WlShellSurface {  }","parent":null,"children":[{"krate":0,"index":709},{"krate":0,"index":710}],"decl_id":null,"docs":" desktop-style metadata interface","sig":null,"attributes":[{"value":"/ desktop-style metadata interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420516,"byte_end":10420552,"line_start":1604,"line_end":1604,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420553,"byte_end":10420556,"line_start":1605,"line_end":1605,"column_start":1,"column_end":4}},{"value":"/ An interface that may be implemented by a wl_surface, for","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420557,"byte_end":10420618,"line_start":1606,"line_end":1606,"column_start":1,"column_end":62}},{"value":"/ implementations that provide a desktop-style user interface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420619,"byte_end":10420683,"line_start":1607,"line_end":1607,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420684,"byte_end":10420687,"line_start":1608,"line_end":1608,"column_start":1,"column_end":4}},{"value":"/ It provides requests to treat surfaces like toplevel, fullscreen","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420688,"byte_end":10420756,"line_start":1609,"line_end":1609,"column_start":1,"column_end":69}},{"value":"/ or popup windows, move, resize or maximize them, associate","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420757,"byte_end":10420819,"line_start":1610,"line_end":1610,"column_start":1,"column_end":63}},{"value":"/ metadata like title and class, etc.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420820,"byte_end":10420859,"line_start":1611,"line_end":1611,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420860,"byte_end":10420863,"line_start":1612,"line_end":1612,"column_start":1,"column_end":4}},{"value":"/ On the server side the object is automatically destroyed when","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420864,"byte_end":10420929,"line_start":1613,"line_end":1613,"column_start":1,"column_end":66}},{"value":"/ the related wl_surface is destroyed.  On client side,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420930,"byte_end":10420987,"line_start":1614,"line_end":1614,"column_start":1,"column_end":58}},{"value":"/ wl_shell_surface_destroy() must be called before destroying","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420988,"byte_end":10421051,"line_start":1615,"line_end":1615,"column_start":1,"column_end":64}},{"value":"/ the wl_surface object.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421052,"byte_end":10421078,"line_start":1616,"line_end":1616,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":724},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422874,"byte_end":10422894,"line_start":1656,"line_end":1656,"column_start":9,"column_end":29},"name":"WlShellSurfaceResize","qualname":"::sys::wayland::client::WlShellSurfaceResize","value":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","parent":null,"children":[{"krate":0,"index":1381},{"krate":0,"index":1399},{"krate":0,"index":1395},{"krate":0,"index":1396},{"krate":0,"index":1392},{"krate":0,"index":1393},{"krate":0,"index":1390},{"krate":0,"index":1388},{"krate":0,"index":1386},{"krate":0,"index":1383},{"krate":0,"index":1372},{"krate":0,"index":1373},{"krate":0,"index":1374},{"krate":0,"index":1375},{"krate":0,"index":1376},{"krate":0,"index":1377},{"krate":0,"index":1378},{"krate":0,"index":1379},{"krate":0,"index":1380},{"krate":0,"index":1400},{"krate":0,"index":1427},{"krate":0,"index":1465},{"krate":0,"index":1468},{"krate":0,"index":1470},{"krate":0,"index":1473},{"krate":0,"index":1475},{"krate":0,"index":1478},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1485},{"krate":0,"index":1488},{"krate":0,"index":1491}],"decl_id":null,"docs":" edge values for resizing","sig":null,"attributes":[{"value":"/ edge values for resizing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422619,"byte_end":10422647,"line_start":1650,"line_end":1650,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422648,"byte_end":10422651,"line_start":1651,"line_end":1651,"column_start":1,"column_end":4}},{"value":"/ These values are used to indicate which edge of a surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422652,"byte_end":10422713,"line_start":1652,"line_end":1652,"column_start":1,"column_end":62}},{"value":"/ is being dragged in a resize operation. The server may","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422714,"byte_end":10422772,"line_start":1653,"line_end":1653,"column_start":1,"column_end":59}},{"value":"/ use this information to adapt its behavior, e.g. choose","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422773,"byte_end":10422832,"line_start":1654,"line_end":1654,"column_start":1,"column_end":60}},{"value":"/ an appropriate cursor image.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422833,"byte_end":10422865,"line_start":1655,"line_end":1655,"column_start":1,"column_end":33}}]},{"kind":"Struct","id":{"krate":0,"index":1381},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422923,"byte_end":10422943,"line_start":1658,"line_end":1658,"column_start":15,"column_end":35},"name":"WlShellSurfaceResize","qualname":"::sys::wayland::client::WlShellSurfaceResize::WlShellSurfaceResize","value":"WlShellSurfaceResize {  }","parent":null,"children":[{"krate":0,"index":1382}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1372},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422965,"byte_end":10422969,"line_start":1659,"line_end":1659,"column_start":15,"column_end":19},"name":"None","qualname":"::sys::wayland::client::WlShellSurfaceResize::None","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1373},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422989,"byte_end":10422992,"line_start":1660,"line_end":1660,"column_start":15,"column_end":18},"name":"Top","qualname":"::sys::wayland::client::WlShellSurfaceResize::Top","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1374},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423012,"byte_end":10423018,"line_start":1661,"line_end":1661,"column_start":15,"column_end":21},"name":"Bottom","qualname":"::sys::wayland::client::WlShellSurfaceResize::Bottom","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1375},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423038,"byte_end":10423042,"line_start":1662,"line_end":1662,"column_start":15,"column_end":19},"name":"Left","qualname":"::sys::wayland::client::WlShellSurfaceResize::Left","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1376},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423062,"byte_end":10423069,"line_start":1663,"line_end":1663,"column_start":15,"column_end":22},"name":"TopLeft","qualname":"::sys::wayland::client::WlShellSurfaceResize::TopLeft","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1377},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423089,"byte_end":10423099,"line_start":1664,"line_end":1664,"column_start":15,"column_end":25},"name":"BottomLeft","qualname":"::sys::wayland::client::WlShellSurfaceResize::BottomLeft","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1378},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423119,"byte_end":10423124,"line_start":1665,"line_end":1665,"column_start":15,"column_end":20},"name":"Right","qualname":"::sys::wayland::client::WlShellSurfaceResize::Right","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1379},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423144,"byte_end":10423152,"line_start":1666,"line_end":1666,"column_start":15,"column_end":23},"name":"TopRight","qualname":"::sys::wayland::client::WlShellSurfaceResize::TopRight","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1380},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423172,"byte_end":10423183,"line_start":1667,"line_end":1667,"column_start":15,"column_end":26},"name":"BottomRight","qualname":"::sys::wayland::client::WlShellSurfaceResize::BottomRight","value":"WlShellSurfaceResize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":726},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423547,"byte_end":10423570,"line_start":1680,"line_end":1680,"column_start":9,"column_end":32},"name":"WlShellSurfaceTransient","qualname":"::sys::wayland::client::WlShellSurfaceTransient","value":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","parent":null,"children":[{"krate":0,"index":1495},{"krate":0,"index":1513},{"krate":0,"index":1509},{"krate":0,"index":1510},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1504},{"krate":0,"index":1502},{"krate":0,"index":1500},{"krate":0,"index":1497},{"krate":0,"index":1494},{"krate":0,"index":1514},{"krate":0,"index":1525},{"krate":0,"index":1547},{"krate":0,"index":1550},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1557},{"krate":0,"index":1560},{"krate":0,"index":1562},{"krate":0,"index":1565},{"krate":0,"index":1567},{"krate":0,"index":1570},{"krate":0,"index":1573}],"decl_id":null,"docs":" details of transient behaviour","sig":null,"attributes":[{"value":"/ details of transient behaviour","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423380,"byte_end":10423414,"line_start":1676,"line_end":1676,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423415,"byte_end":10423418,"line_start":1677,"line_end":1677,"column_start":1,"column_end":4}},{"value":"/ These flags specify details of the expected behaviour","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423419,"byte_end":10423476,"line_start":1678,"line_end":1678,"column_start":1,"column_end":58}},{"value":"/ of transient surfaces. Used in the set_transient request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423477,"byte_end":10423538,"line_start":1679,"line_end":1679,"column_start":1,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":1495},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423599,"byte_end":10423622,"line_start":1682,"line_end":1682,"column_start":15,"column_end":38},"name":"WlShellSurfaceTransient","qualname":"::sys::wayland::client::WlShellSurfaceTransient::WlShellSurfaceTransient","value":"WlShellSurfaceTransient {  }","parent":null,"children":[{"krate":0,"index":1496}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1494},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423678,"byte_end":10423686,"line_start":1684,"line_end":1684,"column_start":15,"column_end":23},"name":"Inactive","qualname":"::sys::wayland::client::WlShellSurfaceTransient::Inactive","value":"WlShellSurfaceTransient","parent":null,"children":[],"decl_id":null,"docs":" do not set keyboard focus\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1577},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424271,"byte_end":10424278,"line_start":1702,"line_end":1702,"column_start":5,"column_end":12},"name":"Default","qualname":"::sys::wayland::client::WlShellSurfaceFullscreenMethod::Default","value":"WlShellSurfaceFullscreenMethod::Default","parent":{"krate":0,"index":1576},"children":[],"decl_id":null,"docs":" no preference, apply default policy\n","sig":null,"attributes":[{"value":"/ no preference, apply default policy","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424227,"byte_end":10424266,"line_start":1701,"line_end":1701,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1580},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424360,"byte_end":10424365,"line_start":1704,"line_end":1704,"column_start":5,"column_end":10},"name":"Scale","qualname":"::sys::wayland::client::WlShellSurfaceFullscreenMethod::Scale","value":"WlShellSurfaceFullscreenMethod::Scale","parent":{"krate":0,"index":1576},"children":[],"decl_id":null,"docs":" scale, preserve the surface's aspect ratio and center on output\n","sig":null,"attributes":[{"value":"/ scale, preserve the surface's aspect ratio and center on output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424288,"byte_end":10424355,"line_start":1703,"line_end":1703,"column_start":5,"column_end":72}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1583},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424495,"byte_end":10424501,"line_start":1706,"line_end":1706,"column_start":5,"column_end":11},"name":"Driver","qualname":"::sys::wayland::client::WlShellSurfaceFullscreenMethod::Driver","value":"WlShellSurfaceFullscreenMethod::Driver","parent":{"krate":0,"index":1576},"children":[],"decl_id":null,"docs":" switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch\n","sig":null,"attributes":[{"value":"/ switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424375,"byte_end":10424490,"line_start":1705,"line_end":1705,"column_start":5,"column_end":120}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1586},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424600,"byte_end":10424604,"line_start":1708,"line_end":1708,"column_start":5,"column_end":9},"name":"Fill","qualname":"::sys::wayland::client::WlShellSurfaceFullscreenMethod::Fill","value":"WlShellSurfaceFullscreenMethod::Fill","parent":{"krate":0,"index":1576},"children":[],"decl_id":null,"docs":" no upscaling, center on output and add black borders to compensate size mismatch\n","sig":null,"attributes":[{"value":"/ no upscaling, center on output and add black borders to compensate size mismatch","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424511,"byte_end":10424595,"line_start":1707,"line_end":1707,"column_start":5,"column_end":89}}]},{"kind":"Enum","id":{"krate":0,"index":1576},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424190,"byte_end":10424220,"line_start":1700,"line_end":1700,"column_start":10,"column_end":40},"name":"WlShellSurfaceFullscreenMethod","qualname":"::sys::wayland::client::WlShellSurfaceFullscreenMethod","value":"pub enum WlShellSurfaceFullscreenMethod {\n\n    /// no preference, apply default policy\n    Default = ,\n\n    /// scale, preserve the surface's aspect ratio and center on output\n    Scale = ,\n\n    /// switch output mode to the smallest mode that can fit the surface, add black borders to compensate size mismatch\n    Driver = ,\n\n    /// no upscaling, center on output and add black borders to compensate size mismatch\n    Fill = ,\n}","parent":null,"children":[{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1583},{"krate":0,"index":1586}],"decl_id":null,"docs":" different method to set the surface fullscreen","sig":null,"attributes":[{"value":"/ different method to set the surface fullscreen","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423899,"byte_end":10423949,"line_start":1693,"line_end":1693,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423950,"byte_end":10423953,"line_start":1694,"line_end":1694,"column_start":1,"column_end":4}},{"value":"/ Hints to indicate to the compositor how to deal with a conflict","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10423954,"byte_end":10424021,"line_start":1695,"line_end":1695,"column_start":1,"column_end":68}},{"value":"/ between the dimensions of the surface and the dimensions of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424022,"byte_end":10424089,"line_start":1696,"line_end":1696,"column_start":1,"column_end":68}},{"value":"/ output. The compositor is free to ignore this parameter.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424090,"byte_end":10424150,"line_start":1697,"line_end":1697,"column_start":1,"column_end":61}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10424151,"byte_end":10424163,"line_start":1698,"line_end":1698,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1592},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425698,"byte_end":10425702,"line_start":1740,"line_end":1740,"column_start":5,"column_end":9},"name":"Ping","qualname":"::sys::wayland::client::WlShellSurfaceEvent::Ping","value":"WlShellSurfaceEvent::Ping(u32)","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" ping client","sig":null,"attributes":[{"value":"/ ping client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425500,"byte_end":10425515,"line_start":1734,"line_end":1734,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425520,"byte_end":10425523,"line_start":1735,"line_end":1735,"column_start":5,"column_end":8}},{"value":"/ Ping a client to check if it is receiving events and sending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425528,"byte_end":10425592,"line_start":1736,"line_end":1736,"column_start":5,"column_end":69}},{"value":"/ requests. A client is expected to reply with a pong request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425597,"byte_end":10425661,"line_start":1737,"line_end":1737,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425666,"byte_end":10425669,"line_start":1738,"line_end":1738,"column_start":5,"column_end":8}},{"value":"/ Values: serial,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425674,"byte_end":10425693,"line_start":1739,"line_end":1739,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1595},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426582,"byte_end":10426591,"line_start":1762,"line_end":1762,"column_start":5,"column_end":14},"name":"Configure","qualname":"::sys::wayland::client::WlShellSurfaceEvent::Configure","value":"WlShellSurfaceEvent::Configure(WlShellSurfaceResize::WlShellSurfaceResize, i32, i32)","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" suggest resize","sig":null,"attributes":[{"value":"/ suggest resize","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425714,"byte_end":10425732,"line_start":1741,"line_end":1741,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425737,"byte_end":10425740,"line_start":1742,"line_end":1742,"column_start":5,"column_end":8}},{"value":"/ The configure event asks the client to resize its surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425745,"byte_end":10425807,"line_start":1743,"line_end":1743,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425812,"byte_end":10425815,"line_start":1744,"line_end":1744,"column_start":5,"column_end":8}},{"value":"/ The size is a hint, in the sense that the client is free to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425820,"byte_end":10425883,"line_start":1745,"line_end":1745,"column_start":5,"column_end":68}},{"value":"/ ignore it if it doesn't resize, pick a smaller size (to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425888,"byte_end":10425947,"line_start":1746,"line_end":1746,"column_start":5,"column_end":64}},{"value":"/ satisfy aspect ratio or resize in steps of NxM pixels).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425952,"byte_end":10426011,"line_start":1747,"line_end":1747,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426016,"byte_end":10426019,"line_start":1748,"line_end":1748,"column_start":5,"column_end":8}},{"value":"/ The edges parameter provides a hint about how the surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426024,"byte_end":10426085,"line_start":1749,"line_end":1749,"column_start":5,"column_end":66}},{"value":"/ was resized. The client may use this information to decide","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426090,"byte_end":10426152,"line_start":1750,"line_end":1750,"column_start":5,"column_end":67}},{"value":"/ how to adjust its content to the new size (e.g. a scrolling","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426157,"byte_end":10426220,"line_start":1751,"line_end":1751,"column_start":5,"column_end":68}},{"value":"/ area might adjust its content position to leave the viewable","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426225,"byte_end":10426289,"line_start":1752,"line_end":1752,"column_start":5,"column_end":69}},{"value":"/ content unmoved).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426294,"byte_end":10426315,"line_start":1753,"line_end":1753,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426320,"byte_end":10426323,"line_start":1754,"line_end":1754,"column_start":5,"column_end":8}},{"value":"/ The client is free to dismiss all but the last configure","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426328,"byte_end":10426388,"line_start":1755,"line_end":1755,"column_start":5,"column_end":65}},{"value":"/ event it received.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426393,"byte_end":10426415,"line_start":1756,"line_end":1756,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426420,"byte_end":10426423,"line_start":1757,"line_end":1757,"column_start":5,"column_end":8}},{"value":"/ The width and height arguments specify the size of the window","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426428,"byte_end":10426493,"line_start":1758,"line_end":1758,"column_start":5,"column_end":70}},{"value":"/ in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426498,"byte_end":10426531,"line_start":1759,"line_end":1759,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426536,"byte_end":10426539,"line_start":1760,"line_end":1760,"column_start":5,"column_end":8}},{"value":"/ Values: edges, width, height,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426544,"byte_end":10426577,"line_start":1761,"line_end":1761,"column_start":5,"column_end":38}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1600},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426878,"byte_end":10426887,"line_start":1768,"line_end":1768,"column_start":5,"column_end":14},"name":"PopupDone","qualname":"::sys::wayland::client::WlShellSurfaceEvent::PopupDone","value":"WlShellSurfaceEvent::PopupDone","parent":{"krate":0,"index":1591},"children":[],"decl_id":null,"docs":" popup interaction is done","sig":null,"attributes":[{"value":"/ popup interaction is done","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426650,"byte_end":10426679,"line_start":1763,"line_end":1763,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426684,"byte_end":10426687,"line_start":1764,"line_end":1764,"column_start":5,"column_end":8}},{"value":"/ The popup_done event is sent out when a popup grab is broken,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426692,"byte_end":10426757,"line_start":1765,"line_end":1765,"column_start":5,"column_end":70}},{"value":"/ that is, when the user clicks a surface that doesn't belong","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426762,"byte_end":10426825,"line_start":1766,"line_end":1766,"column_start":5,"column_end":68}},{"value":"/ to the client owning the popup surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10426830,"byte_end":10426873,"line_start":1767,"line_end":1767,"column_start":5,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":1591},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10425474,"byte_end":10425493,"line_start":1733,"line_end":1733,"column_start":10,"column_end":29},"name":"WlShellSurfaceEvent","qualname":"::sys::wayland::client::WlShellSurfaceEvent","value":"pub enum WlShellSurfaceEvent {\n\n    /// ping client\n    ///\n    /// Ping a client to check if it is receiving events and sending\n    /// requests. A client is expected to reply with a pong request.\n    ///\n    /// Values: serial,\n    Ping(u32),\n\n    /// suggest resize\n    ///\n    /// The configure event asks the client to resize its surface.\n    ///\n    /// The size is a hint, in the sense that the client is free to\n    /// ignore it if it doesn't resize, pick a smaller size (to\n    /// satisfy aspect ratio or resize in steps of NxM pixels).\n    ///\n    /// The edges parameter provides a hint about how the surface\n    /// was resized. The client may use this information to decide\n    /// how to adjust its content to the new size (e.g. a scrolling\n    /// area might adjust its content position to leave the viewable\n    /// content unmoved).\n    ///\n    /// The client is free to dismiss all but the last configure\n    /// event it received.\n    ///\n    /// The width and height arguments specify the size of the window\n    /// in surface local coordinates.\n    ///\n    /// Values: edges, width, height,\n    Configure(WlShellSurfaceResize::WlShellSurfaceResize, i32, i32),\n\n    /// popup interaction is done\n    ///\n    /// The popup_done event is sent out when a popup grab is broken,\n    /// that is, when the user clicks a surface that doesn't belong\n    /// to the client owning the popup surface.\n    PopupDone,\n}","parent":null,"children":[{"krate":0,"index":1592},{"krate":0,"index":1595},{"krate":0,"index":1600}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427977,"byte_end":10427981,"line_start":1798,"line_end":1798,"column_start":12,"column_end":16},"name":"pong","qualname":"<WlShellSurface>::pong","value":"pub fn pong(&Self, u32)","parent":null,"children":[],"decl_id":null,"docs":" respond to a ping event","sig":null,"attributes":[{"value":"/ respond to a ping event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427814,"byte_end":10427841,"line_start":1794,"line_end":1794,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427846,"byte_end":10427849,"line_start":1795,"line_end":1795,"column_start":5,"column_end":8}},{"value":"/ A client must respond to a ping event with a pong request or","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427854,"byte_end":10427918,"line_start":1796,"line_end":1796,"column_start":5,"column_end":69}},{"value":"/ the client may be deemed unresponsive.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427923,"byte_end":10427965,"line_start":1797,"line_end":1797,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":743},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428448,"byte_end":10428453,"line_start":1810,"line_end":1810,"column_start":12,"column_end":17},"name":"move_","qualname":"<WlShellSurface>::move_","value":"pub fn move_(&Self, &WlSeat, u32)","parent":null,"children":[],"decl_id":null,"docs":" start an interactive move","sig":null,"attributes":[{"value":"/ start an interactive move","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428146,"byte_end":10428175,"line_start":1803,"line_end":1803,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428180,"byte_end":10428183,"line_start":1804,"line_end":1804,"column_start":5,"column_end":8}},{"value":"/ Start a pointer-driven move of the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428188,"byte_end":10428235,"line_start":1805,"line_end":1805,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428240,"byte_end":10428243,"line_start":1806,"line_end":1806,"column_start":5,"column_end":8}},{"value":"/ This request must be used in response to a button press event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428248,"byte_end":10428314,"line_start":1807,"line_end":1807,"column_start":5,"column_end":71}},{"value":"/ The server may ignore move requests depending on the state of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428319,"byte_end":10428384,"line_start":1808,"line_end":1808,"column_start":5,"column_end":70}},{"value":"/ the surface (e.g. fullscreen or maximized).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428389,"byte_end":10428436,"line_start":1809,"line_end":1809,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428955,"byte_end":10428961,"line_start":1822,"line_end":1822,"column_start":12,"column_end":18},"name":"resize","qualname":"<WlShellSurface>::resize","value":"pub fn resize(&Self, &WlSeat, u32, WlShellSurfaceResize::WlShellSurfaceResize)","parent":null,"children":[],"decl_id":null,"docs":" start an interactive resize","sig":null,"attributes":[{"value":"/ start an interactive resize","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428645,"byte_end":10428676,"line_start":1815,"line_end":1815,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428681,"byte_end":10428684,"line_start":1816,"line_end":1816,"column_start":5,"column_end":8}},{"value":"/ Start a pointer-driven resizing of the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428689,"byte_end":10428740,"line_start":1817,"line_end":1817,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428745,"byte_end":10428748,"line_start":1818,"line_end":1818,"column_start":5,"column_end":8}},{"value":"/ This request must be used in response to a button press event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428753,"byte_end":10428819,"line_start":1819,"line_end":1819,"column_start":5,"column_end":71}},{"value":"/ The server may ignore resize requests depending on the state of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428824,"byte_end":10428891,"line_start":1820,"line_end":1820,"column_start":5,"column_end":72}},{"value":"/ the surface (e.g. fullscreen or maximized).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10428896,"byte_end":10428943,"line_start":1821,"line_end":1821,"column_start":5,"column_end":52}}]},{"kind":"Method","id":{"krate":0,"index":745},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429411,"byte_end":10429423,"line_start":1832,"line_end":1832,"column_start":12,"column_end":24},"name":"set_toplevel","qualname":"<WlShellSurface>::set_toplevel","value":"pub fn set_toplevel(&Self)","parent":null,"children":[],"decl_id":null,"docs":" make the surface a toplevel surface","sig":null,"attributes":[{"value":"/ make the surface a toplevel surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429227,"byte_end":10429266,"line_start":1827,"line_end":1827,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429271,"byte_end":10429274,"line_start":1828,"line_end":1828,"column_start":5,"column_end":8}},{"value":"/ Map the surface as a toplevel surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429279,"byte_end":10429321,"line_start":1829,"line_end":1829,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429326,"byte_end":10429329,"line_start":1830,"line_end":1830,"column_start":5,"column_end":8}},{"value":"/ A toplevel surface is not fullscreen, maximized or transient.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429334,"byte_end":10429399,"line_start":1831,"line_end":1831,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429975,"byte_end":10429988,"line_start":1846,"line_end":1846,"column_start":12,"column_end":25},"name":"set_transient","qualname":"<WlShellSurface>::set_transient","value":"pub fn set_transient(&Self, &WlSurface, i32, i32,\n                     WlShellSurfaceTransient::WlShellSurfaceTransient)","parent":null,"children":[],"decl_id":null,"docs":" make the surface a transient surface","sig":null,"attributes":[{"value":"/ make the surface a transient surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429575,"byte_end":10429615,"line_start":1837,"line_end":1837,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429620,"byte_end":10429623,"line_start":1838,"line_end":1838,"column_start":5,"column_end":8}},{"value":"/ Map the surface relative to an existing surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429628,"byte_end":10429680,"line_start":1839,"line_end":1839,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429685,"byte_end":10429688,"line_start":1840,"line_end":1840,"column_start":5,"column_end":8}},{"value":"/ The x and y arguments specify the locations of the upper left","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429693,"byte_end":10429758,"line_start":1841,"line_end":1841,"column_start":5,"column_end":70}},{"value":"/ corner of the surface relative to the upper left corner of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429763,"byte_end":10429829,"line_start":1842,"line_end":1842,"column_start":5,"column_end":71}},{"value":"/ parent surface, in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429834,"byte_end":10429883,"line_start":1843,"line_end":1843,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429888,"byte_end":10429891,"line_start":1844,"line_end":1844,"column_start":5,"column_end":8}},{"value":"/ The flags argument controls details of the transient behaviour.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10429896,"byte_end":10429963,"line_start":1845,"line_end":1845,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432098,"byte_end":10432112,"line_start":1886,"line_end":1886,"column_start":12,"column_end":26},"name":"set_fullscreen","qualname":"<WlShellSurface>::set_fullscreen","value":"pub fn set_fullscreen(&Self, WlShellSurfaceFullscreenMethod, u32,\n                      Option<&WlOutput>)","parent":null,"children":[],"decl_id":null,"docs":" make the surface a fullscreen surface","sig":null,"attributes":[{"value":"/ make the surface a fullscreen surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430275,"byte_end":10430316,"line_start":1851,"line_end":1851,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430321,"byte_end":10430324,"line_start":1852,"line_end":1852,"column_start":5,"column_end":8}},{"value":"/ Map the surface as a fullscreen surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430329,"byte_end":10430373,"line_start":1853,"line_end":1853,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430378,"byte_end":10430381,"line_start":1854,"line_end":1854,"column_start":5,"column_end":8}},{"value":"/ If an output parameter is given then the surface will be made","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430386,"byte_end":10430451,"line_start":1855,"line_end":1855,"column_start":5,"column_end":70}},{"value":"/ fullscreen on that output. If the client does not specify the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430456,"byte_end":10430521,"line_start":1856,"line_end":1856,"column_start":5,"column_end":70}},{"value":"/ output then the compositor will apply its policy - usually","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430526,"byte_end":10430588,"line_start":1857,"line_end":1857,"column_start":5,"column_end":67}},{"value":"/ choosing the output on which the surface has the biggest surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430593,"byte_end":10430661,"line_start":1858,"line_end":1858,"column_start":5,"column_end":73}},{"value":"/ area.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430666,"byte_end":10430675,"line_start":1859,"line_end":1859,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430680,"byte_end":10430683,"line_start":1860,"line_end":1860,"column_start":5,"column_end":8}},{"value":"/ The client may specify a method to resolve a size conflict","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430688,"byte_end":10430750,"line_start":1861,"line_end":1861,"column_start":5,"column_end":67}},{"value":"/ between the output size and the surface size - this is provided","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430755,"byte_end":10430822,"line_start":1862,"line_end":1862,"column_start":5,"column_end":72}},{"value":"/ through the method parameter.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430827,"byte_end":10430860,"line_start":1863,"line_end":1863,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430865,"byte_end":10430868,"line_start":1864,"line_end":1864,"column_start":5,"column_end":8}},{"value":"/ The framerate parameter is used only when the method is set","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430873,"byte_end":10430936,"line_start":1865,"line_end":1865,"column_start":5,"column_end":68}},{"value":"/ to \"driver\", to indicate the preferred framerate. A value of 0","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10430941,"byte_end":10431007,"line_start":1866,"line_end":1866,"column_start":5,"column_end":71}},{"value":"/ indicates that the app does not care about framerate.  The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431012,"byte_end":10431074,"line_start":1867,"line_end":1867,"column_start":5,"column_end":67}},{"value":"/ framerate is specified in mHz, that is framerate of 60000 is 60Hz.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431079,"byte_end":10431149,"line_start":1868,"line_end":1868,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431154,"byte_end":10431157,"line_start":1869,"line_end":1869,"column_start":5,"column_end":8}},{"value":"/ A method of \"scale\" or \"driver\" implies a scaling operation of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431162,"byte_end":10431228,"line_start":1870,"line_end":1870,"column_start":5,"column_end":71}},{"value":"/ the surface, either via a direct scaling operation or a change of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431233,"byte_end":10431302,"line_start":1871,"line_end":1871,"column_start":5,"column_end":74}},{"value":"/ the output mode. This will override any kind of output scaling, so","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431307,"byte_end":10431377,"line_start":1872,"line_end":1872,"column_start":5,"column_end":75}},{"value":"/ that mapping a surface with a buffer size equal to the mode can","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431382,"byte_end":10431449,"line_start":1873,"line_end":1873,"column_start":5,"column_end":72}},{"value":"/ fill the screen independent of buffer_scale.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431454,"byte_end":10431502,"line_start":1874,"line_end":1874,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431507,"byte_end":10431510,"line_start":1875,"line_end":1875,"column_start":5,"column_end":8}},{"value":"/ A method of \"fill\" means we don't scale up the buffer, however","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431515,"byte_end":10431581,"line_start":1876,"line_end":1876,"column_start":5,"column_end":71}},{"value":"/ any output scale is applied. This means that you may run into","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431586,"byte_end":10431651,"line_start":1877,"line_end":1877,"column_start":5,"column_end":70}},{"value":"/ an edge case where the application maps a buffer with the same","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431656,"byte_end":10431722,"line_start":1878,"line_end":1878,"column_start":5,"column_end":71}},{"value":"/ size of the output mode but buffer_scale 1 (thus making a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431727,"byte_end":10431788,"line_start":1879,"line_end":1879,"column_start":5,"column_end":66}},{"value":"/ surface larger than the output). In this case it is allowed to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431793,"byte_end":10431859,"line_start":1880,"line_end":1880,"column_start":5,"column_end":71}},{"value":"/ downscale the results to fit the screen.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431864,"byte_end":10431908,"line_start":1881,"line_end":1881,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431913,"byte_end":10431916,"line_start":1882,"line_end":1882,"column_start":5,"column_end":8}},{"value":"/ The compositor must reply to this request with a configure event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431921,"byte_end":10431989,"line_start":1883,"line_end":1883,"column_start":5,"column_end":73}},{"value":"/ with the dimensions for the output on which the surface will","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10431994,"byte_end":10432058,"line_start":1884,"line_end":1884,"column_start":5,"column_end":69}},{"value":"/ be made fullscreen.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432063,"byte_end":10432086,"line_start":1885,"line_end":1885,"column_start":5,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433362,"byte_end":10433371,"line_start":1912,"line_end":1912,"column_start":12,"column_end":21},"name":"set_popup","qualname":"<WlShellSurface>::set_popup","value":"pub fn set_popup(&Self, &WlSeat, u32, &WlSurface, i32, i32,\n                 WlShellSurfaceTransient::WlShellSurfaceTransient)","parent":null,"children":[],"decl_id":null,"docs":" make the surface a popup surface","sig":null,"attributes":[{"value":"/ make the surface a popup surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432426,"byte_end":10432462,"line_start":1891,"line_end":1891,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432467,"byte_end":10432470,"line_start":1892,"line_end":1892,"column_start":5,"column_end":8}},{"value":"/ Map the surface as a popup.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432475,"byte_end":10432506,"line_start":1893,"line_end":1893,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432511,"byte_end":10432514,"line_start":1894,"line_end":1894,"column_start":5,"column_end":8}},{"value":"/ A popup surface is a transient surface with an added pointer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432519,"byte_end":10432583,"line_start":1895,"line_end":1895,"column_start":5,"column_end":69}},{"value":"/ grab.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432588,"byte_end":10432597,"line_start":1896,"line_end":1896,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432602,"byte_end":10432605,"line_start":1897,"line_end":1897,"column_start":5,"column_end":8}},{"value":"/ An existing implicit grab will be changed to owner-events mode,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432610,"byte_end":10432677,"line_start":1898,"line_end":1898,"column_start":5,"column_end":72}},{"value":"/ and the popup grab will continue after the implicit grab ends","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432682,"byte_end":10432747,"line_start":1899,"line_end":1899,"column_start":5,"column_end":70}},{"value":"/ (i.e. releasing the mouse button does not cause the popup to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432752,"byte_end":10432816,"line_start":1900,"line_end":1900,"column_start":5,"column_end":69}},{"value":"/ be unmapped).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432821,"byte_end":10432838,"line_start":1901,"line_end":1901,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432843,"byte_end":10432846,"line_start":1902,"line_end":1902,"column_start":5,"column_end":8}},{"value":"/ The popup grab continues until the window is destroyed or a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432851,"byte_end":10432914,"line_start":1903,"line_end":1903,"column_start":5,"column_end":68}},{"value":"/ mouse button is pressed in any other clients window. A click","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432919,"byte_end":10432983,"line_start":1904,"line_end":1904,"column_start":5,"column_end":69}},{"value":"/ in any of the clients surfaces is reported as normal, however,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10432988,"byte_end":10433054,"line_start":1905,"line_end":1905,"column_start":5,"column_end":71}},{"value":"/ clicks in other clients surfaces will be discarded and trigger","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433059,"byte_end":10433125,"line_start":1906,"line_end":1906,"column_start":5,"column_end":71}},{"value":"/ the callback.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433130,"byte_end":10433147,"line_start":1907,"line_end":1907,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433152,"byte_end":10433155,"line_start":1908,"line_end":1908,"column_start":5,"column_end":8}},{"value":"/ The x and y arguments specify the locations of the upper left","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433160,"byte_end":10433225,"line_start":1909,"line_end":1909,"column_start":5,"column_end":70}},{"value":"/ corner of the surface relative to the upper left corner of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433230,"byte_end":10433296,"line_start":1910,"line_end":1910,"column_start":5,"column_end":71}},{"value":"/ parent surface, in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433301,"byte_end":10433350,"line_start":1911,"line_end":1911,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434612,"byte_end":10434625,"line_start":1937,"line_end":1937,"column_start":12,"column_end":25},"name":"set_maximized","qualname":"<WlShellSurface>::set_maximized","value":"pub fn set_maximized(&Self, Option<&WlOutput>)","parent":null,"children":[],"decl_id":null,"docs":" make the surface a maximized surface","sig":null,"attributes":[{"value":"/ make the surface a maximized surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433702,"byte_end":10433742,"line_start":1917,"line_end":1917,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433747,"byte_end":10433750,"line_start":1918,"line_end":1918,"column_start":5,"column_end":8}},{"value":"/ Map the surface as a maximized surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433755,"byte_end":10433798,"line_start":1919,"line_end":1919,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433803,"byte_end":10433806,"line_start":1920,"line_end":1920,"column_start":5,"column_end":8}},{"value":"/ If an output parameter is given then the surface will be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433811,"byte_end":10433871,"line_start":1921,"line_end":1921,"column_start":5,"column_end":65}},{"value":"/ maximized on that output. If the client does not specify the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433876,"byte_end":10433940,"line_start":1922,"line_end":1922,"column_start":5,"column_end":69}},{"value":"/ output then the compositor will apply its policy - usually","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10433945,"byte_end":10434007,"line_start":1923,"line_end":1923,"column_start":5,"column_end":67}},{"value":"/ choosing the output on which the surface has the biggest surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434012,"byte_end":10434080,"line_start":1924,"line_end":1924,"column_start":5,"column_end":73}},{"value":"/ area.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434085,"byte_end":10434094,"line_start":1925,"line_end":1925,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434099,"byte_end":10434102,"line_start":1926,"line_end":1926,"column_start":5,"column_end":8}},{"value":"/ The compositor will reply with a configure event telling","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434107,"byte_end":10434167,"line_start":1927,"line_end":1927,"column_start":5,"column_end":65}},{"value":"/ the expected new surface size. The operation is completed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434172,"byte_end":10434233,"line_start":1928,"line_end":1928,"column_start":5,"column_end":66}},{"value":"/ on the next buffer attach to this surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434238,"byte_end":10434284,"line_start":1929,"line_end":1929,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434289,"byte_end":10434292,"line_start":1930,"line_end":1930,"column_start":5,"column_end":8}},{"value":"/ A maximized surface typically fills the entire output it is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434297,"byte_end":10434360,"line_start":1931,"line_end":1931,"column_start":5,"column_end":68}},{"value":"/ bound to, except for desktop element such as panels. This is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434365,"byte_end":10434429,"line_start":1932,"line_end":1932,"column_start":5,"column_end":69}},{"value":"/ the main difference between a maximized shell surface and a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434434,"byte_end":10434497,"line_start":1933,"line_end":1933,"column_start":5,"column_end":68}},{"value":"/ fullscreen shell surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434502,"byte_end":10434531,"line_start":1934,"line_end":1934,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434536,"byte_end":10434539,"line_start":1935,"line_end":1935,"column_start":5,"column_end":8}},{"value":"/ The details depend on the compositor implementation.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434544,"byte_end":10434600,"line_start":1936,"line_end":1936,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435162,"byte_end":10435171,"line_start":1951,"line_end":1951,"column_start":12,"column_end":21},"name":"set_title","qualname":"<WlShellSurface>::set_title","value":"pub fn set_title(&Self, String)","parent":null,"children":[],"decl_id":null,"docs":" set surface title","sig":null,"attributes":[{"value":"/ set surface title","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434856,"byte_end":10434877,"line_start":1942,"line_end":1942,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434882,"byte_end":10434885,"line_start":1943,"line_end":1943,"column_start":5,"column_end":8}},{"value":"/ Set a short title for the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434890,"byte_end":10434928,"line_start":1944,"line_end":1944,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434933,"byte_end":10434936,"line_start":1945,"line_end":1945,"column_start":5,"column_end":8}},{"value":"/ This string may be used to identify the surface in a task bar,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10434941,"byte_end":10435007,"line_start":1946,"line_end":1946,"column_start":5,"column_end":71}},{"value":"/ window list, or other user interface elements provided by the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435012,"byte_end":10435077,"line_start":1947,"line_end":1947,"column_start":5,"column_end":70}},{"value":"/ compositor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435082,"byte_end":10435097,"line_start":1948,"line_end":1948,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435102,"byte_end":10435105,"line_start":1949,"line_end":1949,"column_start":5,"column_end":8}},{"value":"/ The string must be encoded in UTF-8.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435110,"byte_end":10435150,"line_start":1950,"line_end":1950,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435811,"byte_end":10435820,"line_start":1965,"line_end":1965,"column_start":12,"column_end":21},"name":"set_class","qualname":"<WlShellSurface>::set_class","value":"pub fn set_class(&Self, String)","parent":null,"children":[],"decl_id":null,"docs":" set surface class","sig":null,"attributes":[{"value":"/ set surface class","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435455,"byte_end":10435476,"line_start":1957,"line_end":1957,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435481,"byte_end":10435484,"line_start":1958,"line_end":1958,"column_start":5,"column_end":8}},{"value":"/ Set a class for the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435489,"byte_end":10435521,"line_start":1959,"line_end":1959,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435526,"byte_end":10435529,"line_start":1960,"line_end":1960,"column_start":5,"column_end":8}},{"value":"/ The surface class identifies the general class of applications","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435534,"byte_end":10435600,"line_start":1961,"line_end":1961,"column_start":5,"column_end":71}},{"value":"/ to which the surface belongs. A common convention is to use the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435605,"byte_end":10435672,"line_start":1962,"line_end":1962,"column_start":5,"column_end":72}},{"value":"/ file name (or the full path if it is a non-standard location) of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435677,"byte_end":10435745,"line_start":1963,"line_end":1963,"column_start":5,"column_end":73}},{"value":"/ the application's .desktop file as the class.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10435750,"byte_end":10435799,"line_start":1964,"line_end":1964,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":756},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438404,"byte_end":10438413,"line_start":2022,"line_end":2022,"column_start":12,"column_end":21},"name":"WlSurface","qualname":"::sys::wayland::client::WlSurface","value":"WlSurface {  }","parent":null,"children":[{"krate":0,"index":757},{"krate":0,"index":758}],"decl_id":null,"docs":" an onscreen surface","sig":null,"attributes":[{"value":"/ an onscreen surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436287,"byte_end":10436310,"line_start":1981,"line_end":1981,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436311,"byte_end":10436314,"line_start":1982,"line_end":1982,"column_start":1,"column_end":4}},{"value":"/ A surface is a rectangular area that is displayed on the screen.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436315,"byte_end":10436383,"line_start":1983,"line_end":1983,"column_start":1,"column_end":69}},{"value":"/ It has a location, size and pixel contents.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436384,"byte_end":10436431,"line_start":1984,"line_end":1984,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436432,"byte_end":10436435,"line_start":1985,"line_end":1985,"column_start":1,"column_end":4}},{"value":"/ The size of a surface (and relative positions on it) is described","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436436,"byte_end":10436505,"line_start":1986,"line_end":1986,"column_start":1,"column_end":70}},{"value":"/ in surface local coordinates, which may differ from the buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436506,"byte_end":10436572,"line_start":1987,"line_end":1987,"column_start":1,"column_end":67}},{"value":"/ local coordinates of the pixel content, in case a buffer_transform","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436573,"byte_end":10436643,"line_start":1988,"line_end":1988,"column_start":1,"column_end":71}},{"value":"/ or a buffer_scale is used.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436644,"byte_end":10436674,"line_start":1989,"line_end":1989,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436675,"byte_end":10436678,"line_start":1990,"line_end":1990,"column_start":1,"column_end":4}},{"value":"/ A surface without a \"role\" is fairly useless, a compositor does","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436679,"byte_end":10436746,"line_start":1991,"line_end":1991,"column_start":1,"column_end":68}},{"value":"/ not know where, when or how to present it. The role is the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436747,"byte_end":10436809,"line_start":1992,"line_end":1992,"column_start":1,"column_end":63}},{"value":"/ purpose of a wl_surface. Examples of roles are a cursor for a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436810,"byte_end":10436875,"line_start":1993,"line_end":1993,"column_start":1,"column_end":66}},{"value":"/ pointer (as set by wl_pointer.set_cursor), a drag icon","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436876,"byte_end":10436934,"line_start":1994,"line_end":1994,"column_start":1,"column_end":59}},{"value":"/ (wl_data_device.start_drag), a sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436935,"byte_end":10436981,"line_start":1995,"line_end":1995,"column_start":1,"column_end":47}},{"value":"/ (wl_subcompositor.get_subsurface), and a window as defined by a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436982,"byte_end":10437049,"line_start":1996,"line_end":1996,"column_start":1,"column_end":68}},{"value":"/ shell protocol (e.g. wl_shell.get_shell_surface).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437050,"byte_end":10437103,"line_start":1997,"line_end":1997,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437104,"byte_end":10437107,"line_start":1998,"line_end":1998,"column_start":1,"column_end":4}},{"value":"/ A surface can have only one role at a time. Initially a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437108,"byte_end":10437167,"line_start":1999,"line_end":1999,"column_start":1,"column_end":60}},{"value":"/ wl_surface does not have a role. Once a wl_surface is given a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437168,"byte_end":10437233,"line_start":2000,"line_end":2000,"column_start":1,"column_end":66}},{"value":"/ role, it is set permanently for the whole lifetime of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437234,"byte_end":10437295,"line_start":2001,"line_end":2001,"column_start":1,"column_end":62}},{"value":"/ wl_surface object. Giving the current role again is allowed,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437296,"byte_end":10437360,"line_start":2002,"line_end":2002,"column_start":1,"column_end":65}},{"value":"/ unless explicitly forbidden by the relevant interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437361,"byte_end":10437418,"line_start":2003,"line_end":2003,"column_start":1,"column_end":58}},{"value":"/ specification.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437419,"byte_end":10437437,"line_start":2004,"line_end":2004,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437438,"byte_end":10437441,"line_start":2005,"line_end":2005,"column_start":1,"column_end":4}},{"value":"/ Surface roles are given by requests in other interfaces such as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437442,"byte_end":10437509,"line_start":2006,"line_end":2006,"column_start":1,"column_end":68}},{"value":"/ wl_pointer.set_cursor. The request should explicitly mention","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437510,"byte_end":10437574,"line_start":2007,"line_end":2007,"column_start":1,"column_end":65}},{"value":"/ that this request gives a role to a wl_surface. Often, this","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437575,"byte_end":10437638,"line_start":2008,"line_end":2008,"column_start":1,"column_end":64}},{"value":"/ request also creates a new protocol object that represents the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437639,"byte_end":10437705,"line_start":2009,"line_end":2009,"column_start":1,"column_end":67}},{"value":"/ role and adds additional functionality to wl_surface. When a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437706,"byte_end":10437770,"line_start":2010,"line_end":2010,"column_start":1,"column_end":65}},{"value":"/ client wants to destroy a wl_surface, they must destroy this 'role","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437771,"byte_end":10437841,"line_start":2011,"line_end":2011,"column_start":1,"column_end":71}},{"value":"/ object' before the wl_surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437842,"byte_end":10437876,"line_start":2012,"line_end":2012,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437877,"byte_end":10437880,"line_start":2013,"line_end":2013,"column_start":1,"column_end":4}},{"value":"/ Destroying the role object does not remove the role from the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437881,"byte_end":10437945,"line_start":2014,"line_end":2014,"column_start":1,"column_end":65}},{"value":"/ wl_surface, but it may stop the wl_surface from \"playing the role\".","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10437946,"byte_end":10438017,"line_start":2015,"line_end":2015,"column_start":1,"column_end":72}},{"value":"/ For instance, if a wl_subsurface object is destroyed, the wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438018,"byte_end":10438090,"line_start":2016,"line_end":2016,"column_start":1,"column_end":73}},{"value":"/ it was created for will be unmapped and forget its position and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438091,"byte_end":10438158,"line_start":2017,"line_end":2017,"column_start":1,"column_end":68}},{"value":"/ z-order. It is allowed to create a wl_subsurface for the same","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438159,"byte_end":10438224,"line_start":2018,"line_end":2018,"column_start":1,"column_end":66}},{"value":"/ wl_surface again, but it is not allowed to use the wl_surface as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438225,"byte_end":10438293,"line_start":2019,"line_end":2019,"column_start":1,"column_end":69}},{"value":"/ a cursor (cursor is a different role than sub-surface, and role","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438294,"byte_end":10438361,"line_start":2020,"line_end":2020,"column_start":1,"column_end":68}},{"value":"/ switching is not allowed).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438362,"byte_end":10438392,"line_start":2021,"line_end":2021,"column_start":1,"column_end":31}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1614},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441100,"byte_end":10441105,"line_start":2096,"line_end":2096,"column_start":5,"column_end":10},"name":"Enter","qualname":"::sys::wayland::client::WlSurfaceEvent::Enter","value":"WlSurfaceEvent::Enter(ProxyId)","parent":{"krate":0,"index":1613},"children":[],"decl_id":null,"docs":" surface enters an output","sig":null,"attributes":[{"value":"/ surface enters an output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440779,"byte_end":10440807,"line_start":2087,"line_end":2087,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440812,"byte_end":10440815,"line_start":2088,"line_end":2088,"column_start":5,"column_end":8}},{"value":"/ This is emitted whenever a surface's creation, movement, or resizing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440820,"byte_end":10440892,"line_start":2089,"line_end":2089,"column_start":5,"column_end":77}},{"value":"/ results in some part of it being within the scanout region of an","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440897,"byte_end":10440965,"line_start":2090,"line_end":2090,"column_start":5,"column_end":73}},{"value":"/ output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440970,"byte_end":10440981,"line_start":2091,"line_end":2091,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440986,"byte_end":10440989,"line_start":2092,"line_end":2092,"column_start":5,"column_end":8}},{"value":"/ Note that a surface may be overlapping with zero or more outputs.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440994,"byte_end":10441063,"line_start":2093,"line_end":2093,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441068,"byte_end":10441071,"line_start":2094,"line_end":2094,"column_start":5,"column_end":8}},{"value":"/ Values: output,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441076,"byte_end":10441095,"line_start":2095,"line_end":2095,"column_start":5,"column_end":24}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1617},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441373,"byte_end":10441378,"line_start":2104,"line_end":2104,"column_start":5,"column_end":10},"name":"Leave","qualname":"::sys::wayland::client::WlSurfaceEvent::Leave","value":"WlSurfaceEvent::Leave(ProxyId)","parent":{"krate":0,"index":1613},"children":[],"decl_id":null,"docs":" surface leaves an output","sig":null,"attributes":[{"value":"/ surface leaves an output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441121,"byte_end":10441149,"line_start":2097,"line_end":2097,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441154,"byte_end":10441157,"line_start":2098,"line_end":2098,"column_start":5,"column_end":8}},{"value":"/ This is emitted whenever a surface's creation, movement, or resizing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441162,"byte_end":10441234,"line_start":2099,"line_end":2099,"column_start":5,"column_end":77}},{"value":"/ results in it no longer having any part of it within the scanout region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441239,"byte_end":10441314,"line_start":2100,"line_end":2100,"column_start":5,"column_end":80}},{"value":"/ of an output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441319,"byte_end":10441336,"line_start":2101,"line_end":2101,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441341,"byte_end":10441344,"line_start":2102,"line_end":2102,"column_start":5,"column_end":8}},{"value":"/ Values: output,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441349,"byte_end":10441368,"line_start":2103,"line_end":2103,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1613},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10440758,"byte_end":10440772,"line_start":2086,"line_end":2086,"column_start":10,"column_end":24},"name":"WlSurfaceEvent","qualname":"::sys::wayland::client::WlSurfaceEvent","value":"pub enum WlSurfaceEvent {\n\n    /// surface enters an output\n    ///\n    /// This is emitted whenever a surface's creation, movement, or resizing\n    /// results in some part of it being within the scanout region of an\n    /// output.\n    ///\n    /// Note that a surface may be overlapping with zero or more outputs.\n    ///\n    /// Values: output,\n    Enter(ProxyId),\n\n    /// surface leaves an output\n    ///\n    /// This is emitted whenever a surface's creation, movement, or resizing\n    /// results in it no longer having any part of it within the scanout region\n    /// of an output.\n    ///\n    /// Values: output,\n    Leave(ProxyId),\n}","parent":null,"children":[{"krate":0,"index":1614},{"krate":0,"index":1617}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":785},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442092,"byte_end":10442099,"line_start":2127,"line_end":2127,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlSurface>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" delete surface","sig":null,"attributes":[{"value":"/ delete surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441995,"byte_end":10442013,"line_start":2124,"line_end":2124,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442018,"byte_end":10442021,"line_start":2125,"line_end":2125,"column_start":5,"column_end":8}},{"value":"/ Deletes the surface and invalidates its object ID.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442026,"byte_end":10442080,"line_start":2126,"line_end":2126,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":786},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444537,"byte_end":10444543,"line_start":2174,"line_end":2174,"column_start":12,"column_end":18},"name":"attach","qualname":"<WlSurface>::attach","value":"pub fn attach(&Self, Option<&WlBuffer>, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" set the surface contents","sig":null,"attributes":[{"value":"/ set the surface contents","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442325,"byte_end":10442353,"line_start":2133,"line_end":2133,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442358,"byte_end":10442361,"line_start":2134,"line_end":2134,"column_start":5,"column_end":8}},{"value":"/ Set a buffer as the content of this surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442366,"byte_end":10442414,"line_start":2135,"line_end":2135,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442419,"byte_end":10442422,"line_start":2136,"line_end":2136,"column_start":5,"column_end":8}},{"value":"/ The new size of the surface is calculated based on the buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442427,"byte_end":10442492,"line_start":2137,"line_end":2137,"column_start":5,"column_end":70}},{"value":"/ size transformed by the inverse buffer_transform and the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442497,"byte_end":10442557,"line_start":2138,"line_end":2138,"column_start":5,"column_end":65}},{"value":"/ inverse buffer_scale. This means that the supplied buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442562,"byte_end":10442623,"line_start":2139,"line_end":2139,"column_start":5,"column_end":66}},{"value":"/ must be an integer multiple of the buffer_scale.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442628,"byte_end":10442680,"line_start":2140,"line_end":2140,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442685,"byte_end":10442688,"line_start":2141,"line_end":2141,"column_start":5,"column_end":8}},{"value":"/ The x and y arguments specify the location of the new pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442693,"byte_end":10442758,"line_start":2142,"line_end":2142,"column_start":5,"column_end":70}},{"value":"/ buffer's upper left corner, relative to the current buffer's upper","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442763,"byte_end":10442833,"line_start":2143,"line_end":2143,"column_start":5,"column_end":75}},{"value":"/ left corner, in surface local coordinates. In other words, the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442838,"byte_end":10442904,"line_start":2144,"line_end":2144,"column_start":5,"column_end":71}},{"value":"/ x and y, combined with the new surface size define in which","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442909,"byte_end":10442972,"line_start":2145,"line_end":2145,"column_start":5,"column_end":68}},{"value":"/ directions the surface's size changes.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10442977,"byte_end":10443019,"line_start":2146,"line_end":2146,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443024,"byte_end":10443027,"line_start":2147,"line_end":2147,"column_start":5,"column_end":8}},{"value":"/ Surface contents are double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443032,"byte_end":10443102,"line_start":2148,"line_end":2148,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443107,"byte_end":10443110,"line_start":2149,"line_end":2149,"column_start":5,"column_end":8}},{"value":"/ The initial surface contents are void; there is no content.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443115,"byte_end":10443178,"line_start":2150,"line_end":2150,"column_start":5,"column_end":68}},{"value":"/ wl_surface.attach assigns the given wl_buffer as the pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443183,"byte_end":10443247,"line_start":2151,"line_end":2151,"column_start":5,"column_end":69}},{"value":"/ wl_buffer. wl_surface.commit makes the pending wl_buffer the new","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443252,"byte_end":10443320,"line_start":2152,"line_end":2152,"column_start":5,"column_end":73}},{"value":"/ surface contents, and the size of the surface becomes the size","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443325,"byte_end":10443391,"line_start":2153,"line_end":2153,"column_start":5,"column_end":71}},{"value":"/ calculated from the wl_buffer, as described above. After commit,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443396,"byte_end":10443464,"line_start":2154,"line_end":2154,"column_start":5,"column_end":73}},{"value":"/ there is no pending buffer until the next attach.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443469,"byte_end":10443522,"line_start":2155,"line_end":2155,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443527,"byte_end":10443530,"line_start":2156,"line_end":2156,"column_start":5,"column_end":8}},{"value":"/ Committing a pending wl_buffer allows the compositor to read the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443535,"byte_end":10443603,"line_start":2157,"line_end":2157,"column_start":5,"column_end":73}},{"value":"/ pixels in the wl_buffer. The compositor may access the pixels at","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443608,"byte_end":10443676,"line_start":2158,"line_end":2158,"column_start":5,"column_end":73}},{"value":"/ any time after the wl_surface.commit request. When the compositor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443681,"byte_end":10443750,"line_start":2159,"line_end":2159,"column_start":5,"column_end":74}},{"value":"/ will not access the pixels anymore, it will send the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443755,"byte_end":10443811,"line_start":2160,"line_end":2160,"column_start":5,"column_end":61}},{"value":"/ wl_buffer.release event. Only after receiving wl_buffer.release,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443816,"byte_end":10443884,"line_start":2161,"line_end":2161,"column_start":5,"column_end":73}},{"value":"/ the client may re-use the wl_buffer. A wl_buffer that has been","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443889,"byte_end":10443955,"line_start":2162,"line_end":2162,"column_start":5,"column_end":71}},{"value":"/ attached and then replaced by another attach instead of committed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10443960,"byte_end":10444029,"line_start":2163,"line_end":2163,"column_start":5,"column_end":74}},{"value":"/ will not receive a release event, and is not used by the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444034,"byte_end":10444094,"line_start":2164,"line_end":2164,"column_start":5,"column_end":65}},{"value":"/ compositor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444099,"byte_end":10444114,"line_start":2165,"line_end":2165,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444119,"byte_end":10444122,"line_start":2166,"line_end":2166,"column_start":5,"column_end":8}},{"value":"/ Destroying the wl_buffer after wl_buffer.release does not change","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444127,"byte_end":10444195,"line_start":2167,"line_end":2167,"column_start":5,"column_end":73}},{"value":"/ the surface contents. However, if the client destroys the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444200,"byte_end":10444261,"line_start":2168,"line_end":2168,"column_start":5,"column_end":66}},{"value":"/ wl_buffer before receiving the wl_buffer.release event, the surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444266,"byte_end":10444337,"line_start":2169,"line_end":2169,"column_start":5,"column_end":76}},{"value":"/ contents become undefined immediately.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444342,"byte_end":10444384,"line_start":2170,"line_end":2170,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444389,"byte_end":10444392,"line_start":2171,"line_end":2171,"column_start":5,"column_end":8}},{"value":"/ If wl_surface.attach is sent with a NULL wl_buffer, the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444397,"byte_end":10444456,"line_start":2172,"line_end":2172,"column_start":5,"column_end":64}},{"value":"/ following wl_surface.commit will remove the surface content.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444461,"byte_end":10444525,"line_start":2173,"line_end":2173,"column_start":5,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445772,"byte_end":10445778,"line_start":2199,"line_end":2199,"column_start":12,"column_end":18},"name":"damage","qualname":"<WlSurface>::damage","value":"pub fn damage(&Self, i32, i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" mark part of the surface damaged","sig":null,"attributes":[{"value":"/ mark part of the surface damaged","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444783,"byte_end":10444819,"line_start":2179,"line_end":2179,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444824,"byte_end":10444827,"line_start":2180,"line_end":2180,"column_start":5,"column_end":8}},{"value":"/ This request is used to describe the regions where the pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444832,"byte_end":10444898,"line_start":2181,"line_end":2181,"column_start":5,"column_end":71}},{"value":"/ buffer is different from the current surface contents, and where","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444903,"byte_end":10444971,"line_start":2182,"line_end":2182,"column_start":5,"column_end":73}},{"value":"/ the surface therefore needs to be repainted. The pending buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10444976,"byte_end":10445043,"line_start":2183,"line_end":2183,"column_start":5,"column_end":72}},{"value":"/ must be set by wl_surface.attach before sending damage. The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445048,"byte_end":10445111,"line_start":2184,"line_end":2184,"column_start":5,"column_end":68}},{"value":"/ compositor ignores the parts of the damage that fall outside of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445116,"byte_end":10445183,"line_start":2185,"line_end":2185,"column_start":5,"column_end":72}},{"value":"/ the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445188,"byte_end":10445204,"line_start":2186,"line_end":2186,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445209,"byte_end":10445212,"line_start":2187,"line_end":2187,"column_start":5,"column_end":8}},{"value":"/ Damage is double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445217,"byte_end":10445276,"line_start":2188,"line_end":2188,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445281,"byte_end":10445284,"line_start":2189,"line_end":2189,"column_start":5,"column_end":8}},{"value":"/ The damage rectangle is specified in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445289,"byte_end":10445356,"line_start":2190,"line_end":2190,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445361,"byte_end":10445364,"line_start":2191,"line_end":2191,"column_start":5,"column_end":8}},{"value":"/ The initial value for pending damage is empty: no damage.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445369,"byte_end":10445430,"line_start":2192,"line_end":2192,"column_start":5,"column_end":66}},{"value":"/ wl_surface.damage adds pending damage: the new pending damage","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445435,"byte_end":10445500,"line_start":2193,"line_end":2193,"column_start":5,"column_end":70}},{"value":"/ is the union of old pending damage and the given rectangle.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445505,"byte_end":10445568,"line_start":2194,"line_end":2194,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445573,"byte_end":10445576,"line_start":2195,"line_end":2195,"column_start":5,"column_end":8}},{"value":"/ wl_surface.commit assigns pending damage as the current damage,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445581,"byte_end":10445648,"line_start":2196,"line_end":2196,"column_start":5,"column_end":72}},{"value":"/ and clears pending damage. The server will clear the current","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445653,"byte_end":10445717,"line_start":2197,"line_end":2197,"column_start":5,"column_end":69}},{"value":"/ damage as it repaints the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445722,"byte_end":10445760,"line_start":2198,"line_end":2198,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":788},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447837,"byte_end":10447842,"line_start":2238,"line_end":2238,"column_start":12,"column_end":17},"name":"frame","qualname":"<WlSurface>::frame","value":"pub fn frame(&Self) -> WlCallback","parent":null,"children":[],"decl_id":null,"docs":" request a frame throttling hint","sig":null,"attributes":[{"value":"/ request a frame throttling hint","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10445980,"byte_end":10446015,"line_start":2204,"line_end":2204,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446020,"byte_end":10446023,"line_start":2205,"line_end":2205,"column_start":5,"column_end":8}},{"value":"/ Request a notification when it is a good time start drawing a new","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446028,"byte_end":10446097,"line_start":2206,"line_end":2206,"column_start":5,"column_end":74}},{"value":"/ frame, by creating a frame callback. This is useful for throttling","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446102,"byte_end":10446172,"line_start":2207,"line_end":2207,"column_start":5,"column_end":75}},{"value":"/ redrawing operations, and driving animations.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446177,"byte_end":10446226,"line_start":2208,"line_end":2208,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446231,"byte_end":10446234,"line_start":2209,"line_end":2209,"column_start":5,"column_end":8}},{"value":"/ When a client is animating on a wl_surface, it can use the 'frame'","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446239,"byte_end":10446309,"line_start":2210,"line_end":2210,"column_start":5,"column_end":75}},{"value":"/ request to get notified when it is a good time to draw and commit the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446314,"byte_end":10446387,"line_start":2211,"line_end":2211,"column_start":5,"column_end":78}},{"value":"/ next frame of animation. If the client commits an update earlier than","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446392,"byte_end":10446465,"line_start":2212,"line_end":2212,"column_start":5,"column_end":78}},{"value":"/ that, it is likely that some updates will not make it to the display,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446470,"byte_end":10446543,"line_start":2213,"line_end":2213,"column_start":5,"column_end":78}},{"value":"/ and the client is wasting resources by drawing too often.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446548,"byte_end":10446609,"line_start":2214,"line_end":2214,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446614,"byte_end":10446617,"line_start":2215,"line_end":2215,"column_start":5,"column_end":8}},{"value":"/ The frame request will take effect on the next wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446622,"byte_end":10446691,"line_start":2216,"line_end":2216,"column_start":5,"column_end":74}},{"value":"/ The notification will only be posted for one frame unless","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446696,"byte_end":10446757,"line_start":2217,"line_end":2217,"column_start":5,"column_end":66}},{"value":"/ requested again. For a wl_surface, the notifications are posted in","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446762,"byte_end":10446832,"line_start":2218,"line_end":2218,"column_start":5,"column_end":75}},{"value":"/ the order the frame requests were committed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446837,"byte_end":10446885,"line_start":2219,"line_end":2219,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446890,"byte_end":10446893,"line_start":2220,"line_end":2220,"column_start":5,"column_end":8}},{"value":"/ The server must send the notifications so that a client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446898,"byte_end":10446957,"line_start":2221,"line_end":2221,"column_start":5,"column_end":64}},{"value":"/ will not send excessive updates, while still allowing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10446962,"byte_end":10447019,"line_start":2222,"line_end":2222,"column_start":5,"column_end":62}},{"value":"/ the highest possible update rate for clients that wait for the reply","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447024,"byte_end":10447096,"line_start":2223,"line_end":2223,"column_start":5,"column_end":77}},{"value":"/ before drawing again. The server should give some time for the client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447101,"byte_end":10447174,"line_start":2224,"line_end":2224,"column_start":5,"column_end":78}},{"value":"/ to draw and commit after sending the frame callback events to let them","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447179,"byte_end":10447253,"line_start":2225,"line_end":2225,"column_start":5,"column_end":79}},{"value":"/ hit the next output refresh.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447258,"byte_end":10447290,"line_start":2226,"line_end":2226,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447295,"byte_end":10447298,"line_start":2227,"line_end":2227,"column_start":5,"column_end":8}},{"value":"/ A server should avoid signalling the frame callbacks if the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447303,"byte_end":10447366,"line_start":2228,"line_end":2228,"column_start":5,"column_end":68}},{"value":"/ surface is not visible in any way, e.g. the surface is off-screen,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447371,"byte_end":10447441,"line_start":2229,"line_end":2229,"column_start":5,"column_end":75}},{"value":"/ or completely obscured by other opaque surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447446,"byte_end":10447498,"line_start":2230,"line_end":2230,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447503,"byte_end":10447506,"line_start":2231,"line_end":2231,"column_start":5,"column_end":8}},{"value":"/ The object returned by this request will be destroyed by the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447511,"byte_end":10447575,"line_start":2232,"line_end":2232,"column_start":5,"column_end":69}},{"value":"/ compositor after the callback is fired and as such the client must not","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447580,"byte_end":10447654,"line_start":2233,"line_end":2233,"column_start":5,"column_end":79}},{"value":"/ attempt to use it after that point.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447659,"byte_end":10447698,"line_start":2234,"line_end":2234,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447703,"byte_end":10447706,"line_start":2235,"line_end":2235,"column_start":5,"column_end":8}},{"value":"/ The callback_data passed in the callback is the current time, in","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447711,"byte_end":10447779,"line_start":2236,"line_end":2236,"column_start":5,"column_end":73}},{"value":"/ milliseconds, with an undefined base.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10447784,"byte_end":10447825,"line_start":2237,"line_end":2237,"column_start":5,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449563,"byte_end":10449580,"line_start":2274,"line_end":2274,"column_start":12,"column_end":29},"name":"set_opaque_region","qualname":"<WlSurface>::set_opaque_region","value":"pub fn set_opaque_region(&Self, Option<&WlRegion>)","parent":null,"children":[],"decl_id":null,"docs":" set opaque region","sig":null,"attributes":[{"value":"/ set opaque region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448354,"byte_end":10448375,"line_start":2248,"line_end":2248,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448380,"byte_end":10448383,"line_start":2249,"line_end":2249,"column_start":5,"column_end":8}},{"value":"/ This request sets the region of the surface that contains","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448388,"byte_end":10448449,"line_start":2250,"line_end":2250,"column_start":5,"column_end":66}},{"value":"/ opaque content.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448454,"byte_end":10448473,"line_start":2251,"line_end":2251,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448478,"byte_end":10448481,"line_start":2252,"line_end":2252,"column_start":5,"column_end":8}},{"value":"/ The opaque region is an optimization hint for the compositor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448486,"byte_end":10448550,"line_start":2253,"line_end":2253,"column_start":5,"column_end":69}},{"value":"/ that lets it optimize out redrawing of content behind opaque","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448555,"byte_end":10448619,"line_start":2254,"line_end":2254,"column_start":5,"column_end":69}},{"value":"/ regions.  Setting an opaque region is not required for correct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448624,"byte_end":10448690,"line_start":2255,"line_end":2255,"column_start":5,"column_end":71}},{"value":"/ behaviour, but marking transparent content as opaque will result","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448695,"byte_end":10448763,"line_start":2256,"line_end":2256,"column_start":5,"column_end":73}},{"value":"/ in repaint artifacts.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448768,"byte_end":10448793,"line_start":2257,"line_end":2257,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448798,"byte_end":10448801,"line_start":2258,"line_end":2258,"column_start":5,"column_end":8}},{"value":"/ The opaque region is specified in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448806,"byte_end":10448870,"line_start":2259,"line_end":2259,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448875,"byte_end":10448878,"line_start":2260,"line_end":2260,"column_start":5,"column_end":8}},{"value":"/ The compositor ignores the parts of the opaque region that fall","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448883,"byte_end":10448950,"line_start":2261,"line_end":2261,"column_start":5,"column_end":72}},{"value":"/ outside of the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448955,"byte_end":10448982,"line_start":2262,"line_end":2262,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448987,"byte_end":10448990,"line_start":2263,"line_end":2263,"column_start":5,"column_end":8}},{"value":"/ Opaque region is double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10448995,"byte_end":10449061,"line_start":2264,"line_end":2264,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449066,"byte_end":10449069,"line_start":2265,"line_end":2265,"column_start":5,"column_end":8}},{"value":"/ wl_surface.set_opaque_region changes the pending opaque region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449074,"byte_end":10449141,"line_start":2266,"line_end":2266,"column_start":5,"column_end":72}},{"value":"/ wl_surface.commit copies the pending region to the current region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449146,"byte_end":10449216,"line_start":2267,"line_end":2267,"column_start":5,"column_end":75}},{"value":"/ Otherwise, the pending and current regions are never changed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449221,"byte_end":10449286,"line_start":2268,"line_end":2268,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449291,"byte_end":10449294,"line_start":2269,"line_end":2269,"column_start":5,"column_end":8}},{"value":"/ The initial value for opaque region is empty. Setting the pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449299,"byte_end":10449368,"line_start":2270,"line_end":2270,"column_start":5,"column_end":74}},{"value":"/ opaque region has copy semantics, and the wl_region object can be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449373,"byte_end":10449442,"line_start":2271,"line_end":2271,"column_start":5,"column_end":74}},{"value":"/ destroyed immediately. A NULL wl_region causes the pending opaque","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449447,"byte_end":10449516,"line_start":2272,"line_end":2272,"column_start":5,"column_end":74}},{"value":"/ region to be set to empty.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449521,"byte_end":10449551,"line_start":2273,"line_end":2273,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":790},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450988,"byte_end":10451004,"line_start":2303,"line_end":2303,"column_start":12,"column_end":28},"name":"set_input_region","qualname":"<WlSurface>::set_input_region","value":"pub fn set_input_region(&Self, Option<&WlRegion>)","parent":null,"children":[],"decl_id":null,"docs":" set input region","sig":null,"attributes":[{"value":"/ set input region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449809,"byte_end":10449829,"line_start":2279,"line_end":2279,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449834,"byte_end":10449837,"line_start":2280,"line_end":2280,"column_start":5,"column_end":8}},{"value":"/ This request sets the region of the surface that can receive","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449842,"byte_end":10449906,"line_start":2281,"line_end":2281,"column_start":5,"column_end":69}},{"value":"/ pointer and touch events.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449911,"byte_end":10449940,"line_start":2282,"line_end":2282,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449945,"byte_end":10449948,"line_start":2283,"line_end":2283,"column_start":5,"column_end":8}},{"value":"/ Input events happening outside of this region will try the next","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10449953,"byte_end":10450020,"line_start":2284,"line_end":2284,"column_start":5,"column_end":72}},{"value":"/ surface in the server surface stack. The compositor ignores the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450025,"byte_end":10450092,"line_start":2285,"line_end":2285,"column_start":5,"column_end":72}},{"value":"/ parts of the input region that fall outside of the surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450097,"byte_end":10450160,"line_start":2286,"line_end":2286,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450165,"byte_end":10450168,"line_start":2287,"line_end":2287,"column_start":5,"column_end":8}},{"value":"/ The input region is specified in surface local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450173,"byte_end":10450236,"line_start":2288,"line_end":2288,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450241,"byte_end":10450244,"line_start":2289,"line_end":2289,"column_start":5,"column_end":8}},{"value":"/ Input region is double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450249,"byte_end":10450314,"line_start":2290,"line_end":2290,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450319,"byte_end":10450322,"line_start":2291,"line_end":2291,"column_start":5,"column_end":8}},{"value":"/ wl_surface.set_input_region changes the pending input region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450327,"byte_end":10450392,"line_start":2292,"line_end":2292,"column_start":5,"column_end":70}},{"value":"/ wl_surface.commit copies the pending region to the current region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450397,"byte_end":10450467,"line_start":2293,"line_end":2293,"column_start":5,"column_end":75}},{"value":"/ Otherwise the pending and current regions are never changed,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450472,"byte_end":10450536,"line_start":2294,"line_end":2294,"column_start":5,"column_end":69}},{"value":"/ except cursor and icon surfaces are special cases, see","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450541,"byte_end":10450599,"line_start":2295,"line_end":2295,"column_start":5,"column_end":63}},{"value":"/ wl_pointer.set_cursor and wl_data_device.start_drag.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450604,"byte_end":10450660,"line_start":2296,"line_end":2296,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450665,"byte_end":10450668,"line_start":2297,"line_end":2297,"column_start":5,"column_end":8}},{"value":"/ The initial value for input region is infinite. That means the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450673,"byte_end":10450739,"line_start":2298,"line_end":2298,"column_start":5,"column_end":71}},{"value":"/ whole surface will accept input. Setting the pending input region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450744,"byte_end":10450813,"line_start":2299,"line_end":2299,"column_start":5,"column_end":74}},{"value":"/ has copy semantics, and the wl_region object can be destroyed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450818,"byte_end":10450883,"line_start":2300,"line_end":2300,"column_start":5,"column_end":70}},{"value":"/ immediately. A NULL wl_region causes the input region to be set","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450888,"byte_end":10450955,"line_start":2301,"line_end":2301,"column_start":5,"column_end":72}},{"value":"/ to infinite.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10450960,"byte_end":10450976,"line_start":2302,"line_end":2302,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452251,"byte_end":10452257,"line_start":2327,"line_end":2327,"column_start":12,"column_end":18},"name":"commit","qualname":"<WlSurface>::commit","value":"pub fn commit(&Self)","parent":null,"children":[],"decl_id":null,"docs":" commit pending surface state","sig":null,"attributes":[{"value":"/ commit pending surface state","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451232,"byte_end":10451264,"line_start":2308,"line_end":2308,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451269,"byte_end":10451272,"line_start":2309,"line_end":2309,"column_start":5,"column_end":8}},{"value":"/ Surface state (input, opaque, and damage regions, attached buffers,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451277,"byte_end":10451348,"line_start":2310,"line_end":2310,"column_start":5,"column_end":76}},{"value":"/ etc.) is double-buffered. Protocol requests modify the pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451353,"byte_end":10451419,"line_start":2311,"line_end":2311,"column_start":5,"column_end":71}},{"value":"/ state, as opposed to current state in use by the compositor. Commit","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451424,"byte_end":10451495,"line_start":2312,"line_end":2312,"column_start":5,"column_end":76}},{"value":"/ request atomically applies all pending state, replacing the current","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451500,"byte_end":10451571,"line_start":2313,"line_end":2313,"column_start":5,"column_end":76}},{"value":"/ state. After commit, the new pending state is as documented for each","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451576,"byte_end":10451648,"line_start":2314,"line_end":2314,"column_start":5,"column_end":77}},{"value":"/ related request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451653,"byte_end":10451673,"line_start":2315,"line_end":2315,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451678,"byte_end":10451681,"line_start":2316,"line_end":2316,"column_start":5,"column_end":8}},{"value":"/ On commit, a pending wl_buffer is applied first, all other state","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451686,"byte_end":10451754,"line_start":2317,"line_end":2317,"column_start":5,"column_end":73}},{"value":"/ second. This means that all coordinates in double-buffered state are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451759,"byte_end":10451831,"line_start":2318,"line_end":2318,"column_start":5,"column_end":77}},{"value":"/ relative to the new wl_buffer coming into use, except for","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451836,"byte_end":10451897,"line_start":2319,"line_end":2319,"column_start":5,"column_end":66}},{"value":"/ wl_surface.attach itself. If there is no pending wl_buffer, the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451902,"byte_end":10451969,"line_start":2320,"line_end":2320,"column_start":5,"column_end":72}},{"value":"/ coordinates are relative to the current surface contents.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10451974,"byte_end":10452035,"line_start":2321,"line_end":2321,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452040,"byte_end":10452043,"line_start":2322,"line_end":2322,"column_start":5,"column_end":8}},{"value":"/ All requests that need a commit to become effective are documented","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452048,"byte_end":10452118,"line_start":2323,"line_end":2323,"column_start":5,"column_end":75}},{"value":"/ to affect double-buffered state.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452123,"byte_end":10452159,"line_start":2324,"line_end":2324,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452164,"byte_end":10452167,"line_start":2325,"line_end":2325,"column_start":5,"column_end":8}},{"value":"/ Other interfaces may add further double-buffered surface state.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452172,"byte_end":10452239,"line_start":2326,"line_end":2326,"column_start":5,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454063,"byte_end":10454083,"line_start":2365,"line_end":2365,"column_start":12,"column_end":32},"name":"set_buffer_transform","qualname":"<WlSurface>::set_buffer_transform","value":"pub fn set_buffer_transform(&Self, i32)","parent":null,"children":[],"decl_id":null,"docs":" sets the buffer transformation","sig":null,"attributes":[{"value":"/ sets the buffer transformation","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452397,"byte_end":10452431,"line_start":2332,"line_end":2332,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452436,"byte_end":10452439,"line_start":2333,"line_end":2333,"column_start":5,"column_end":8}},{"value":"/ This request sets an optional transformation on how the compositor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452444,"byte_end":10452514,"line_start":2334,"line_end":2334,"column_start":5,"column_end":75}},{"value":"/ interprets the contents of the buffer attached to the surface. The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452519,"byte_end":10452589,"line_start":2335,"line_end":2335,"column_start":5,"column_end":75}},{"value":"/ accepted values for the transform parameter are the values for","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452594,"byte_end":10452660,"line_start":2336,"line_end":2336,"column_start":5,"column_end":71}},{"value":"/ wl_output.transform.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452665,"byte_end":10452689,"line_start":2337,"line_end":2337,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452694,"byte_end":10452697,"line_start":2338,"line_end":2338,"column_start":5,"column_end":8}},{"value":"/ Buffer transform is double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452702,"byte_end":10452771,"line_start":2339,"line_end":2339,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452776,"byte_end":10452779,"line_start":2340,"line_end":2340,"column_start":5,"column_end":8}},{"value":"/ A newly created surface has its buffer transformation set to normal.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452784,"byte_end":10452856,"line_start":2341,"line_end":2341,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452861,"byte_end":10452864,"line_start":2342,"line_end":2342,"column_start":5,"column_end":8}},{"value":"/ wl_surface.set_buffer_transform changes the pending buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452869,"byte_end":10452931,"line_start":2343,"line_end":2343,"column_start":5,"column_end":67}},{"value":"/ transformation. wl_surface.commit copies the pending buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10452936,"byte_end":10452999,"line_start":2344,"line_end":2344,"column_start":5,"column_end":68}},{"value":"/ transformation to the current one. Otherwise, the pending and current","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453004,"byte_end":10453077,"line_start":2345,"line_end":2345,"column_start":5,"column_end":78}},{"value":"/ values are never changed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453082,"byte_end":10453111,"line_start":2346,"line_end":2346,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453116,"byte_end":10453119,"line_start":2347,"line_end":2347,"column_start":5,"column_end":8}},{"value":"/ The purpose of this request is to allow clients to render content","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453124,"byte_end":10453193,"line_start":2348,"line_end":2348,"column_start":5,"column_end":74}},{"value":"/ according to the output transform, thus permiting the compositor to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453198,"byte_end":10453269,"line_start":2349,"line_end":2349,"column_start":5,"column_end":76}},{"value":"/ use certain optimizations even if the display is rotated. Using","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453274,"byte_end":10453341,"line_start":2350,"line_end":2350,"column_start":5,"column_end":72}},{"value":"/ hardware overlays and scanning out a client buffer for fullscreen","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453346,"byte_end":10453415,"line_start":2351,"line_end":2351,"column_start":5,"column_end":74}},{"value":"/ surfaces are examples of such optimizations. Those optimizations are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453420,"byte_end":10453492,"line_start":2352,"line_end":2352,"column_start":5,"column_end":77}},{"value":"/ highly dependent on the compositor implementation, so the use of this","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453497,"byte_end":10453570,"line_start":2353,"line_end":2353,"column_start":5,"column_end":78}},{"value":"/ request should be considered on a case-by-case basis.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453575,"byte_end":10453632,"line_start":2354,"line_end":2354,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453637,"byte_end":10453640,"line_start":2355,"line_end":2355,"column_start":5,"column_end":8}},{"value":"/ Note that if the transform value includes 90 or 270 degree rotation,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453645,"byte_end":10453717,"line_start":2356,"line_end":2356,"column_start":5,"column_end":77}},{"value":"/ the width of the buffer will become the surface height and the height","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453722,"byte_end":10453795,"line_start":2357,"line_end":2357,"column_start":5,"column_end":78}},{"value":"/ of the buffer will become the surface width.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453800,"byte_end":10453848,"line_start":2358,"line_end":2358,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453853,"byte_end":10453856,"line_start":2359,"line_end":2359,"column_start":5,"column_end":8}},{"value":"/ If transform is not one of the values from the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453861,"byte_end":10453911,"line_start":2360,"line_end":2360,"column_start":5,"column_end":55}},{"value":"/ wl_output.transform enum the invalid_transform protocol error","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453916,"byte_end":10453981,"line_start":2361,"line_end":2361,"column_start":5,"column_end":70}},{"value":"/ is raised.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10453986,"byte_end":10454000,"line_start":2362,"line_end":2362,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454005,"byte_end":10454008,"line_start":2363,"line_end":2363,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 2`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454013,"byte_end":10454051,"line_start":2364,"line_end":2364,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":793},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455542,"byte_end":10455558,"line_start":2397,"line_end":2397,"column_start":12,"column_end":28},"name":"set_buffer_scale","qualname":"<WlSurface>::set_buffer_scale","value":"pub fn set_buffer_scale(&Self, i32)","parent":null,"children":[],"decl_id":null,"docs":" sets the buffer scaling factor","sig":null,"attributes":[{"value":"/ sets the buffer scaling factor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454264,"byte_end":10454298,"line_start":2370,"line_end":2370,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454303,"byte_end":10454306,"line_start":2371,"line_end":2371,"column_start":5,"column_end":8}},{"value":"/ This request sets an optional scaling factor on how the compositor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454311,"byte_end":10454381,"line_start":2372,"line_end":2372,"column_start":5,"column_end":75}},{"value":"/ interprets the contents of the buffer attached to the window.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454386,"byte_end":10454451,"line_start":2373,"line_end":2373,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454456,"byte_end":10454459,"line_start":2374,"line_end":2374,"column_start":5,"column_end":8}},{"value":"/ Buffer scale is double-buffered state, see wl_surface.commit.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454464,"byte_end":10454529,"line_start":2375,"line_end":2375,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454534,"byte_end":10454537,"line_start":2376,"line_end":2376,"column_start":5,"column_end":8}},{"value":"/ A newly created surface has its buffer scale set to 1.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454542,"byte_end":10454600,"line_start":2377,"line_end":2377,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454605,"byte_end":10454608,"line_start":2378,"line_end":2378,"column_start":5,"column_end":8}},{"value":"/ wl_surface.set_buffer_scale changes the pending buffer scale.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454613,"byte_end":10454678,"line_start":2379,"line_end":2379,"column_start":5,"column_end":70}},{"value":"/ wl_surface.commit copies the pending buffer scale to the current one.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454683,"byte_end":10454756,"line_start":2380,"line_end":2380,"column_start":5,"column_end":78}},{"value":"/ Otherwise, the pending and current values are never changed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454761,"byte_end":10454825,"line_start":2381,"line_end":2381,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454830,"byte_end":10454833,"line_start":2382,"line_end":2382,"column_start":5,"column_end":8}},{"value":"/ The purpose of this request is to allow clients to supply higher","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454838,"byte_end":10454906,"line_start":2383,"line_end":2383,"column_start":5,"column_end":73}},{"value":"/ resolution buffer data for use on high resolution outputs. Its","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454911,"byte_end":10454977,"line_start":2384,"line_end":2384,"column_start":5,"column_end":71}},{"value":"/ intended that you pick the same\tbuffer scale as the scale of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10454982,"byte_end":10455050,"line_start":2385,"line_end":2385,"column_start":5,"column_end":73}},{"value":"/ output that the surface is displayed on.This means the compositor","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455055,"byte_end":10455124,"line_start":2386,"line_end":2386,"column_start":5,"column_end":74}},{"value":"/ can avoid scaling when rendering the surface on that output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455129,"byte_end":10455193,"line_start":2387,"line_end":2387,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455198,"byte_end":10455201,"line_start":2388,"line_end":2388,"column_start":5,"column_end":8}},{"value":"/ Note that if the scale is larger than 1, then you have to attach","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455206,"byte_end":10455274,"line_start":2389,"line_end":2389,"column_start":5,"column_end":73}},{"value":"/ a buffer that is larger (by a factor of scale in each dimension)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455279,"byte_end":10455347,"line_start":2390,"line_end":2390,"column_start":5,"column_end":73}},{"value":"/ than the desired surface size.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455352,"byte_end":10455386,"line_start":2391,"line_end":2391,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455391,"byte_end":10455394,"line_start":2392,"line_end":2392,"column_start":5,"column_end":8}},{"value":"/ If scale is not positive the invalid_scale protocol error is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455399,"byte_end":10455463,"line_start":2393,"line_end":2393,"column_start":5,"column_end":69}},{"value":"/ raised.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455468,"byte_end":10455479,"line_start":2394,"line_end":2394,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455484,"byte_end":10455487,"line_start":2395,"line_end":2395,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 3`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455492,"byte_end":10455530,"line_start":2396,"line_end":2396,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":796},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456191,"byte_end":10456197,"line_start":2418,"line_end":2418,"column_start":12,"column_end":18},"name":"WlSeat","qualname":"::sys::wayland::client::WlSeat","value":"WlSeat {  }","parent":null,"children":[{"krate":0,"index":797},{"krate":0,"index":798}],"decl_id":null,"docs":" group of input devices","sig":null,"attributes":[{"value":"/ group of input devices","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455898,"byte_end":10455924,"line_start":2412,"line_end":2412,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455925,"byte_end":10455928,"line_start":2413,"line_end":2413,"column_start":1,"column_end":4}},{"value":"/ A seat is a group of keyboards, pointer and touch devices. This","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455929,"byte_end":10455996,"line_start":2414,"line_end":2414,"column_start":1,"column_end":68}},{"value":"/ object is published as a global during start up, or when such a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455997,"byte_end":10456064,"line_start":2415,"line_end":2415,"column_start":1,"column_end":68}},{"value":"/ device is hot plugged.  A seat typically has a pointer and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456065,"byte_end":10456127,"line_start":2416,"line_end":2416,"column_start":1,"column_end":63}},{"value":"/ maintains a keyboard focus and a pointer focus.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456128,"byte_end":10456179,"line_start":2417,"line_end":2417,"column_start":1,"column_end":52}}]},{"kind":"Mod","id":{"krate":0,"index":812},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457761,"byte_end":10457777,"line_start":2455,"line_end":2455,"column_start":9,"column_end":25},"name":"WlSeatCapability","qualname":"::sys::wayland::client::WlSeatCapability","value":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1643},{"krate":0,"index":1639},{"krate":0,"index":1640},{"krate":0,"index":1636},{"krate":0,"index":1637},{"krate":0,"index":1634},{"krate":0,"index":1632},{"krate":0,"index":1630},{"krate":0,"index":1627},{"krate":0,"index":1622},{"krate":0,"index":1623},{"krate":0,"index":1624},{"krate":0,"index":1644},{"krate":0,"index":1659},{"krate":0,"index":1685},{"krate":0,"index":1688},{"krate":0,"index":1690},{"krate":0,"index":1693},{"krate":0,"index":1695},{"krate":0,"index":1698},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1705},{"krate":0,"index":1708},{"krate":0,"index":1711}],"decl_id":null,"docs":" seat capability bitmask","sig":null,"attributes":[{"value":"/ seat capability bitmask","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457612,"byte_end":10457639,"line_start":2451,"line_end":2451,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457640,"byte_end":10457643,"line_start":2452,"line_end":2452,"column_start":1,"column_end":4}},{"value":"/ This is a bitmask of capabilities this seat has; if a member is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457644,"byte_end":10457711,"line_start":2453,"line_end":2453,"column_start":1,"column_end":68}},{"value":"/ set, then it is present on the seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457712,"byte_end":10457752,"line_start":2454,"line_end":2454,"column_start":1,"column_end":41}}]},{"kind":"Struct","id":{"krate":0,"index":1625},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457806,"byte_end":10457822,"line_start":2457,"line_end":2457,"column_start":15,"column_end":31},"name":"WlSeatCapability","qualname":"::sys::wayland::client::WlSeatCapability::WlSeatCapability","value":"WlSeatCapability {  }","parent":null,"children":[{"krate":0,"index":1626}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1622},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457881,"byte_end":10457888,"line_start":2459,"line_end":2459,"column_start":15,"column_end":22},"name":"Pointer","qualname":"::sys::wayland::client::WlSeatCapability::Pointer","value":"WlSeatCapability","parent":null,"children":[],"decl_id":null,"docs":" The seat has pointer devices\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1623},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457951,"byte_end":10457959,"line_start":2461,"line_end":2461,"column_start":15,"column_end":23},"name":"Keyboard","qualname":"::sys::wayland::client::WlSeatCapability::Keyboard","value":"WlSeatCapability","parent":null,"children":[],"decl_id":null,"docs":" The seat has one or more keyboards\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1624},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458014,"byte_end":10458019,"line_start":2463,"line_end":2463,"column_start":15,"column_end":20},"name":"Touch","qualname":"::sys::wayland::client::WlSeatCapability::Touch","value":"WlSeatCapability","parent":null,"children":[],"decl_id":null,"docs":" The seat has touch devices\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1715},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458687,"byte_end":10458699,"line_start":2487,"line_end":2487,"column_start":5,"column_end":17},"name":"Capabilities","qualname":"::sys::wayland::client::WlSeatEvent::Capabilities","value":"WlSeatEvent::Capabilities(WlSeatCapability::WlSeatCapability)","parent":{"krate":0,"index":1714},"children":[],"decl_id":null,"docs":" seat capabilities changed","sig":null,"attributes":[{"value":"/ seat capabilities changed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458397,"byte_end":10458426,"line_start":2480,"line_end":2480,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458431,"byte_end":10458434,"line_start":2481,"line_end":2481,"column_start":5,"column_end":8}},{"value":"/ This is emitted whenever a seat gains or loses the pointer,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458439,"byte_end":10458502,"line_start":2482,"line_end":2482,"column_start":5,"column_end":68}},{"value":"/ keyboard or touch capabilities.  The argument is a capability","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458507,"byte_end":10458572,"line_start":2483,"line_end":2483,"column_start":5,"column_end":70}},{"value":"/ enum containing the complete set of capabilities this seat has.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458577,"byte_end":10458644,"line_start":2484,"line_end":2484,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458649,"byte_end":10458652,"line_start":2485,"line_end":2485,"column_start":5,"column_end":8}},{"value":"/ Values: capabilities,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458657,"byte_end":10458682,"line_start":2486,"line_end":2486,"column_start":5,"column_end":30}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1718},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459021,"byte_end":10459025,"line_start":2495,"line_end":2495,"column_start":5,"column_end":9},"name":"Name","qualname":"::sys::wayland::client::WlSeatEvent::Name","value":"WlSeatEvent::Name(String)","parent":{"krate":0,"index":1714},"children":[],"decl_id":null,"docs":" unique identifier for this seat","sig":null,"attributes":[{"value":"/ unique identifier for this seat","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458742,"byte_end":10458777,"line_start":2488,"line_end":2488,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458782,"byte_end":10458785,"line_start":2489,"line_end":2489,"column_start":5,"column_end":8}},{"value":"/ In a multiseat configuration this can be used by the client to help","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458790,"byte_end":10458861,"line_start":2490,"line_end":2490,"column_start":5,"column_end":76}},{"value":"/ identify which physical devices the seat represents. Based on","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458866,"byte_end":10458931,"line_start":2491,"line_end":2491,"column_start":5,"column_end":70}},{"value":"/ the seat configuration used by the compositor.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458936,"byte_end":10458986,"line_start":2492,"line_end":2492,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458991,"byte_end":10458994,"line_start":2493,"line_end":2493,"column_start":5,"column_end":8}},{"value":"/ Values: name,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458999,"byte_end":10459016,"line_start":2494,"line_end":2494,"column_start":5,"column_end":22}}]},{"kind":"Enum","id":{"krate":0,"index":1714},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10458379,"byte_end":10458390,"line_start":2479,"line_end":2479,"column_start":10,"column_end":21},"name":"WlSeatEvent","qualname":"::sys::wayland::client::WlSeatEvent","value":"pub enum WlSeatEvent {\n\n    /// seat capabilities changed\n    ///\n    /// This is emitted whenever a seat gains or loses the pointer,\n    /// keyboard or touch capabilities.  The argument is a capability\n    /// enum containing the complete set of capabilities this seat has.\n    ///\n    /// Values: capabilities,\n    Capabilities(WlSeatCapability::WlSeatCapability),\n\n    /// unique identifier for this seat\n    ///\n    /// In a multiseat configuration this can be used by the client to help\n    /// identify which physical devices the seat represents. Based on\n    /// the seat configuration used by the compositor.\n    ///\n    /// Values: name,\n    Name(String),\n}","parent":null,"children":[{"krate":0,"index":1715},{"krate":0,"index":1718}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460007,"byte_end":10460018,"line_start":2523,"line_end":2523,"column_start":12,"column_end":23},"name":"get_pointer","qualname":"<WlSeat>::get_pointer","value":"pub fn get_pointer(&Self) -> WlPointer","parent":null,"children":[],"decl_id":null,"docs":" return pointer object","sig":null,"attributes":[{"value":"/ return pointer object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459772,"byte_end":10459797,"line_start":2516,"line_end":2516,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459802,"byte_end":10459805,"line_start":2517,"line_end":2517,"column_start":5,"column_end":8}},{"value":"/ The ID provided will be initialized to the wl_pointer interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459810,"byte_end":10459877,"line_start":2518,"line_end":2518,"column_start":5,"column_end":72}},{"value":"/ for this seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459882,"byte_end":10459900,"line_start":2519,"line_end":2519,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459905,"byte_end":10459908,"line_start":2520,"line_end":2520,"column_start":5,"column_end":8}},{"value":"/ This request only takes effect if the seat has the pointer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459913,"byte_end":10459975,"line_start":2521,"line_end":2521,"column_start":5,"column_end":67}},{"value":"/ capability.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459980,"byte_end":10459995,"line_start":2522,"line_end":2522,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460768,"byte_end":10460780,"line_start":2540,"line_end":2540,"column_start":12,"column_end":24},"name":"get_keyboard","qualname":"<WlSeat>::get_keyboard","value":"pub fn get_keyboard(&Self) -> WlKeyboard","parent":null,"children":[],"decl_id":null,"docs":" return keyboard object","sig":null,"attributes":[{"value":"/ return keyboard object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460530,"byte_end":10460556,"line_start":2533,"line_end":2533,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460561,"byte_end":10460564,"line_start":2534,"line_end":2534,"column_start":5,"column_end":8}},{"value":"/ The ID provided will be initialized to the wl_keyboard interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460569,"byte_end":10460637,"line_start":2535,"line_end":2535,"column_start":5,"column_end":73}},{"value":"/ for this seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460642,"byte_end":10460660,"line_start":2536,"line_end":2536,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460665,"byte_end":10460668,"line_start":2537,"line_end":2537,"column_start":5,"column_end":8}},{"value":"/ This request only takes effect if the seat has the keyboard","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460673,"byte_end":10460736,"line_start":2538,"line_end":2538,"column_start":5,"column_end":68}},{"value":"/ capability.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10460741,"byte_end":10460756,"line_start":2539,"line_end":2539,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":823},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461525,"byte_end":10461534,"line_start":2557,"line_end":2557,"column_start":12,"column_end":21},"name":"get_touch","qualname":"<WlSeat>::get_touch","value":"pub fn get_touch(&Self) -> WlTouch","parent":null,"children":[],"decl_id":null,"docs":" return touch object","sig":null,"attributes":[{"value":"/ return touch object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461296,"byte_end":10461319,"line_start":2550,"line_end":2550,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461324,"byte_end":10461327,"line_start":2551,"line_end":2551,"column_start":5,"column_end":8}},{"value":"/ The ID provided will be initialized to the wl_touch interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461332,"byte_end":10461397,"line_start":2552,"line_end":2552,"column_start":5,"column_end":70}},{"value":"/ for this seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461402,"byte_end":10461420,"line_start":2553,"line_end":2553,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461425,"byte_end":10461428,"line_start":2554,"line_end":2554,"column_start":5,"column_end":8}},{"value":"/ This request only takes effect if the seat has the touch","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461433,"byte_end":10461493,"line_start":2555,"line_end":2555,"column_start":5,"column_end":65}},{"value":"/ capability.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10461498,"byte_end":10461513,"line_start":2556,"line_end":2556,"column_start":5,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462251,"byte_end":10462258,"line_start":2573,"line_end":2573,"column_start":12,"column_end":19},"name":"release","qualname":"<WlSeat>::release","value":"pub fn release(Self)","parent":null,"children":[],"decl_id":null,"docs":" release the seat object","sig":null,"attributes":[{"value":"/ release the seat object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462038,"byte_end":10462065,"line_start":2567,"line_end":2567,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462070,"byte_end":10462073,"line_start":2568,"line_end":2568,"column_start":5,"column_end":8}},{"value":"/ Using this request client can tell the server that it is not going to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462078,"byte_end":10462151,"line_start":2569,"line_end":2569,"column_start":5,"column_end":78}},{"value":"/ use the seat object anymore.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462156,"byte_end":10462188,"line_start":2570,"line_end":2570,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462193,"byte_end":10462196,"line_start":2571,"line_end":2571,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 5`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462201,"byte_end":10462239,"line_start":2572,"line_end":2572,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":827},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463060,"byte_end":10463069,"line_start":2599,"line_end":2599,"column_start":12,"column_end":21},"name":"WlPointer","qualname":"::sys::wayland::client::WlPointer","value":"WlPointer {  }","parent":null,"children":[{"krate":0,"index":828},{"krate":0,"index":829}],"decl_id":null,"docs":" pointer input device","sig":null,"attributes":[{"value":"/ pointer input device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462652,"byte_end":10462676,"line_start":2589,"line_end":2589,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462677,"byte_end":10462680,"line_start":2590,"line_end":2590,"column_start":1,"column_end":4}},{"value":"/ The wl_pointer interface represents one or more input devices,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462681,"byte_end":10462747,"line_start":2591,"line_end":2591,"column_start":1,"column_end":67}},{"value":"/ such as mice, which control the pointer location and pointer_focus","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462748,"byte_end":10462818,"line_start":2592,"line_end":2592,"column_start":1,"column_end":71}},{"value":"/ of a seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462819,"byte_end":10462833,"line_start":2593,"line_end":2593,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462834,"byte_end":10462837,"line_start":2594,"line_end":2594,"column_start":1,"column_end":4}},{"value":"/ The wl_pointer interface generates motion, enter and leave","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462838,"byte_end":10462900,"line_start":2595,"line_end":2595,"column_start":1,"column_end":63}},{"value":"/ events for the surfaces that the pointer is located over,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462901,"byte_end":10462962,"line_start":2596,"line_end":2596,"column_start":1,"column_end":62}},{"value":"/ and button and axis events for button presses, button releases","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462963,"byte_end":10463029,"line_start":2597,"line_end":2597,"column_start":1,"column_end":67}},{"value":"/ and scrolling.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463030,"byte_end":10463048,"line_start":2598,"line_end":2598,"column_start":1,"column_end":19}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1732},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465034,"byte_end":10465042,"line_start":2655,"line_end":2655,"column_start":5,"column_end":13},"name":"Released","qualname":"::sys::wayland::client::WlPointerButtonState::Released","value":"WlPointerButtonState::Released","parent":{"krate":0,"index":1731},"children":[],"decl_id":null,"docs":" The button is not pressed\n","sig":null,"attributes":[{"value":"/ The button is not pressed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465000,"byte_end":10465029,"line_start":2654,"line_end":2654,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1735},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465082,"byte_end":10465089,"line_start":2657,"line_end":2657,"column_start":5,"column_end":12},"name":"Pressed","qualname":"::sys::wayland::client::WlPointerButtonState::Pressed","value":"WlPointerButtonState::Pressed","parent":{"krate":0,"index":1731},"children":[],"decl_id":null,"docs":" The button is pressed\n","sig":null,"attributes":[{"value":"/ The button is pressed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465052,"byte_end":10465077,"line_start":2656,"line_end":2656,"column_start":5,"column_end":30}}]},{"kind":"Enum","id":{"krate":0,"index":1731},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464973,"byte_end":10464993,"line_start":2653,"line_end":2653,"column_start":10,"column_end":30},"name":"WlPointerButtonState","qualname":"::sys::wayland::client::WlPointerButtonState","value":"pub enum WlPointerButtonState {\n\n    /// The button is not pressed\n    Released = ,\n\n    /// The button is pressed\n    Pressed = ,\n}","parent":null,"children":[{"krate":0,"index":1732},{"krate":0,"index":1735}],"decl_id":null,"docs":" physical button state","sig":null,"attributes":[{"value":"/ physical button state","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464822,"byte_end":10464847,"line_start":2647,"line_end":2647,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464848,"byte_end":10464851,"line_start":2648,"line_end":2648,"column_start":1,"column_end":4}},{"value":"/ Describes the physical state of a button which provoked the button","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464852,"byte_end":10464922,"line_start":2649,"line_end":2649,"column_start":1,"column_end":71}},{"value":"/ event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464923,"byte_end":10464933,"line_start":2650,"line_end":2650,"column_start":1,"column_end":11}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464934,"byte_end":10464946,"line_start":2651,"line_end":2651,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1741},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465442,"byte_end":10465456,"line_start":2673,"line_end":2673,"column_start":5,"column_end":19},"name":"VerticalScroll","qualname":"::sys::wayland::client::WlPointerAxis::VerticalScroll","value":"WlPointerAxis::VerticalScroll","parent":{"krate":0,"index":1740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1744},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465466,"byte_end":10465482,"line_start":2674,"line_end":2674,"column_start":5,"column_end":21},"name":"HorizontalScroll","qualname":"::sys::wayland::client::WlPointerAxis::HorizontalScroll","value":"WlPointerAxis::HorizontalScroll","parent":{"krate":0,"index":1740},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1740},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465422,"byte_end":10465435,"line_start":2672,"line_end":2672,"column_start":10,"column_end":23},"name":"WlPointerAxis","qualname":"::sys::wayland::client::WlPointerAxis","value":"pub enum WlPointerAxis { VerticalScroll = , HorizontalScroll = , }","parent":null,"children":[{"krate":0,"index":1741},{"krate":0,"index":1744}],"decl_id":null,"docs":" axis types","sig":null,"attributes":[{"value":"/ axis types","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465317,"byte_end":10465331,"line_start":2667,"line_end":2667,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465332,"byte_end":10465335,"line_start":2668,"line_end":2668,"column_start":1,"column_end":4}},{"value":"/ Describes the axis types of scroll events.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465336,"byte_end":10465382,"line_start":2669,"line_end":2669,"column_start":1,"column_end":47}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465383,"byte_end":10465395,"line_start":2670,"line_end":2670,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1750},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466230,"byte_end":10466235,"line_start":2700,"line_end":2700,"column_start":5,"column_end":10},"name":"Enter","qualname":"::sys::wayland::client::WlPointerEvent::Enter","value":"WlPointerEvent::Enter(u32, ProxyId, f64, f64)","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" enter event","sig":null,"attributes":[{"value":"/ enter event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465839,"byte_end":10465854,"line_start":2690,"line_end":2690,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465859,"byte_end":10465862,"line_start":2691,"line_end":2691,"column_start":5,"column_end":8}},{"value":"/ Notification that this seat's pointer is focused on a certain","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465867,"byte_end":10465932,"line_start":2692,"line_end":2692,"column_start":5,"column_end":70}},{"value":"/ surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465937,"byte_end":10465949,"line_start":2693,"line_end":2693,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465954,"byte_end":10465957,"line_start":2694,"line_end":2694,"column_start":5,"column_end":8}},{"value":"/ When an seat's focus enters a surface, the pointer image","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465962,"byte_end":10466022,"line_start":2695,"line_end":2695,"column_start":5,"column_end":65}},{"value":"/ is undefined and a client should respond to this event by setting","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466027,"byte_end":10466096,"line_start":2696,"line_end":2696,"column_start":5,"column_end":74}},{"value":"/ an appropriate pointer image with the set_cursor request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466101,"byte_end":10466162,"line_start":2697,"line_end":2697,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466167,"byte_end":10466170,"line_start":2698,"line_end":2698,"column_start":5,"column_end":8}},{"value":"/ Values: serial, surface, surface_x, surface_y,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466175,"byte_end":10466225,"line_start":2699,"line_end":2699,"column_start":5,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1756},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466533,"byte_end":10466538,"line_start":2710,"line_end":2710,"column_start":5,"column_end":10},"name":"Leave","qualname":"::sys::wayland::client::WlPointerEvent::Leave","value":"WlPointerEvent::Leave(u32, ProxyId)","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" leave event","sig":null,"attributes":[{"value":"/ leave event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466263,"byte_end":10466278,"line_start":2701,"line_end":2701,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466283,"byte_end":10466286,"line_start":2702,"line_end":2702,"column_start":5,"column_end":8}},{"value":"/ Notification that this seat's pointer is no longer focused on","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466291,"byte_end":10466356,"line_start":2703,"line_end":2703,"column_start":5,"column_end":70}},{"value":"/ a certain surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466361,"byte_end":10466383,"line_start":2704,"line_end":2704,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466388,"byte_end":10466391,"line_start":2705,"line_end":2705,"column_start":5,"column_end":8}},{"value":"/ The leave notification is sent before the enter notification","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466396,"byte_end":10466460,"line_start":2706,"line_end":2706,"column_start":5,"column_end":69}},{"value":"/ for the new focus.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466465,"byte_end":10466487,"line_start":2707,"line_end":2707,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466492,"byte_end":10466495,"line_start":2708,"line_end":2708,"column_start":5,"column_end":8}},{"value":"/ Values: serial, surface,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466500,"byte_end":10466528,"line_start":2709,"line_end":2709,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1760},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466800,"byte_end":10466806,"line_start":2718,"line_end":2718,"column_start":5,"column_end":11},"name":"Motion","qualname":"::sys::wayland::client::WlPointerEvent::Motion","value":"WlPointerEvent::Motion(u32, f64, f64)","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" pointer motion event","sig":null,"attributes":[{"value":"/ pointer motion event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466558,"byte_end":10466582,"line_start":2711,"line_end":2711,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466587,"byte_end":10466590,"line_start":2712,"line_end":2712,"column_start":5,"column_end":8}},{"value":"/ Notification of pointer location change. The arguments","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466595,"byte_end":10466653,"line_start":2713,"line_end":2713,"column_start":5,"column_end":63}},{"value":"/ surface_x and surface_y are the location relative to the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466658,"byte_end":10466718,"line_start":2714,"line_end":2714,"column_start":5,"column_end":65}},{"value":"/ focused surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466723,"byte_end":10466743,"line_start":2715,"line_end":2715,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466748,"byte_end":10466751,"line_start":2716,"line_end":2716,"column_start":5,"column_end":8}},{"value":"/ Values: time, surface_x, surface_y,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466756,"byte_end":10466795,"line_start":2717,"line_end":2717,"column_start":5,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1765},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467167,"byte_end":10467173,"line_start":2729,"line_end":2729,"column_start":5,"column_end":11},"name":"Button","qualname":"::sys::wayland::client::WlPointerEvent::Button","value":"WlPointerEvent::Button(u32, u32, u32, WlPointerButtonState)","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" pointer button event","sig":null,"attributes":[{"value":"/ pointer button event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466826,"byte_end":10466850,"line_start":2719,"line_end":2719,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466855,"byte_end":10466858,"line_start":2720,"line_end":2720,"column_start":5,"column_end":8}},{"value":"/ Mouse button click and release notifications.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466863,"byte_end":10466912,"line_start":2721,"line_end":2721,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466917,"byte_end":10466920,"line_start":2722,"line_end":2722,"column_start":5,"column_end":8}},{"value":"/ The location of the click is given by the last motion or","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466925,"byte_end":10466985,"line_start":2723,"line_end":2723,"column_start":5,"column_end":65}},{"value":"/ enter event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10466990,"byte_end":10467006,"line_start":2724,"line_end":2724,"column_start":5,"column_end":21}},{"value":"/ The time argument is a timestamp with millisecond","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467011,"byte_end":10467064,"line_start":2725,"line_end":2725,"column_start":5,"column_end":58}},{"value":"/ granularity, with an undefined base.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467069,"byte_end":10467109,"line_start":2726,"line_end":2726,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467114,"byte_end":10467117,"line_start":2727,"line_end":2727,"column_start":5,"column_end":8}},{"value":"/ Values: serial, time, button, state,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467122,"byte_end":10467162,"line_start":2728,"line_end":2728,"column_start":5,"column_end":45}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1771},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10468023,"byte_end":10468027,"line_start":2750,"line_end":2750,"column_start":5,"column_end":9},"name":"Axis","qualname":"::sys::wayland::client::WlPointerEvent::Axis","value":"WlPointerEvent::Axis(u32, WlPointerAxis, f64)","parent":{"krate":0,"index":1749},"children":[],"decl_id":null,"docs":" axis event","sig":null,"attributes":[{"value":"/ axis event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467214,"byte_end":10467228,"line_start":2730,"line_end":2730,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467233,"byte_end":10467236,"line_start":2731,"line_end":2731,"column_start":5,"column_end":8}},{"value":"/ Scroll and other axis notifications.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467241,"byte_end":10467281,"line_start":2732,"line_end":2732,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467286,"byte_end":10467289,"line_start":2733,"line_end":2733,"column_start":5,"column_end":8}},{"value":"/ For scroll events (vertical and horizontal scroll axes), the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467294,"byte_end":10467358,"line_start":2734,"line_end":2734,"column_start":5,"column_end":69}},{"value":"/ value parameter is the length of a vector along the specified","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467363,"byte_end":10467428,"line_start":2735,"line_end":2735,"column_start":5,"column_end":70}},{"value":"/ axis in a coordinate space identical to those of motion events,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467433,"byte_end":10467500,"line_start":2736,"line_end":2736,"column_start":5,"column_end":72}},{"value":"/ representing a relative movement along the specified axis.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467505,"byte_end":10467567,"line_start":2737,"line_end":2737,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467572,"byte_end":10467575,"line_start":2738,"line_end":2738,"column_start":5,"column_end":8}},{"value":"/ For devices that support movements non-parallel to axes multiple","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467580,"byte_end":10467648,"line_start":2739,"line_end":2739,"column_start":5,"column_end":73}},{"value":"/ axis events will be emitted.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467653,"byte_end":10467685,"line_start":2740,"line_end":2740,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467690,"byte_end":10467693,"line_start":2741,"line_end":2741,"column_start":5,"column_end":8}},{"value":"/ When applicable, for example for touch pads, the server can","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467698,"byte_end":10467761,"line_start":2742,"line_end":2742,"column_start":5,"column_end":68}},{"value":"/ choose to emit scroll events where the motion vector is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467766,"byte_end":10467825,"line_start":2743,"line_end":2743,"column_start":5,"column_end":64}},{"value":"/ equivalent to a motion event vector.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467830,"byte_end":10467870,"line_start":2744,"line_end":2744,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467875,"byte_end":10467878,"line_start":2745,"line_end":2745,"column_start":5,"column_end":8}},{"value":"/ When applicable, clients can transform its view relative to the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467883,"byte_end":10467950,"line_start":2746,"line_end":2746,"column_start":5,"column_end":72}},{"value":"/ scroll distance.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467955,"byte_end":10467975,"line_start":2747,"line_end":2747,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467980,"byte_end":10467983,"line_start":2748,"line_end":2748,"column_start":5,"column_end":8}},{"value":"/ Values: time, axis, value,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10467988,"byte_end":10468018,"line_start":2749,"line_end":2749,"column_start":5,"column_end":35}}]},{"kind":"Enum","id":{"krate":0,"index":1749},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10465818,"byte_end":10465832,"line_start":2689,"line_end":2689,"column_start":10,"column_end":24},"name":"WlPointerEvent","qualname":"::sys::wayland::client::WlPointerEvent","value":"pub enum WlPointerEvent {\n\n    /// enter event\n    ///\n    /// Notification that this seat's pointer is focused on a certain\n    /// surface.\n    ///\n    /// When an seat's focus enters a surface, the pointer image\n    /// is undefined and a client should respond to this event by setting\n    /// an appropriate pointer image with the set_cursor request.\n    ///\n    /// Values: serial, surface, surface_x, surface_y,\n    Enter(u32, ProxyId, f64, f64),\n\n    /// leave event\n    ///\n    /// Notification that this seat's pointer is no longer focused on\n    /// a certain surface.\n    ///\n    /// The leave notification is sent before the enter notification\n    /// for the new focus.\n    ///\n    /// Values: serial, surface,\n    Leave(u32, ProxyId),\n\n    /// pointer motion event\n    ///\n    /// Notification of pointer location change. The arguments\n    /// surface_x and surface_y are the location relative to the\n    /// focused surface.\n    ///\n    /// Values: time, surface_x, surface_y,\n    Motion(u32, f64, f64),\n\n    /// pointer button event\n    ///\n    /// Mouse button click and release notifications.\n    ///\n    /// The location of the click is given by the last motion or\n    /// enter event.\n    /// The time argument is a timestamp with millisecond\n    /// granularity, with an undefined base.\n    ///\n    /// Values: serial, time, button, state,\n    Button(u32, u32, u32, WlPointerButtonState),\n\n    /// axis event\n    ///\n    /// Scroll and other axis notifications.\n    ///\n    /// For scroll events (vertical and horizontal scroll axes), the\n    /// value parameter is the length of a vector along the specified\n    /// axis in a coordinate space identical to those of motion events,\n    /// representing a relative movement along the specified axis.\n    ///\n    /// For devices that support movements non-parallel to axes multiple\n    /// axis events will be emitted.\n    ///\n    /// When applicable, for example for touch pads, the server can\n    /// choose to emit scroll events where the motion vector is\n    /// equivalent to a motion event vector.\n    ///\n    /// When applicable, clients can transform its view relative to the\n    /// scroll distance.\n    ///\n    /// Values: time, axis, value,\n    Axis(u32, WlPointerAxis, f64),\n}","parent":null,"children":[{"krate":0,"index":1750},{"krate":0,"index":1756},{"krate":0,"index":1760},{"krate":0,"index":1765},{"krate":0,"index":1771}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":851},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471875,"byte_end":10471885,"line_start":2828,"line_end":2828,"column_start":12,"column_end":22},"name":"set_cursor","qualname":"<WlPointer>::set_cursor","value":"pub fn set_cursor(&Self, u32, Option<&WlSurface>, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" set the pointer surface","sig":null,"attributes":[{"value":"/ set the pointer surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470195,"byte_end":10470222,"line_start":2795,"line_end":2795,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470227,"byte_end":10470230,"line_start":2796,"line_end":2796,"column_start":5,"column_end":8}},{"value":"/ Set the pointer surface, i.e., the surface that contains the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470235,"byte_end":10470299,"line_start":2797,"line_end":2797,"column_start":5,"column_end":69}},{"value":"/ pointer image (cursor). This request gives the surface the role","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470304,"byte_end":10470371,"line_start":2798,"line_end":2798,"column_start":5,"column_end":72}},{"value":"/ of a cursor. If the surface already has another role, it raises","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470376,"byte_end":10470443,"line_start":2799,"line_end":2799,"column_start":5,"column_end":72}},{"value":"/ a protocol error.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470448,"byte_end":10470469,"line_start":2800,"line_end":2800,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470474,"byte_end":10470477,"line_start":2801,"line_end":2801,"column_start":5,"column_end":8}},{"value":"/ The cursor actually changes only if the pointer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470482,"byte_end":10470533,"line_start":2802,"line_end":2802,"column_start":5,"column_end":56}},{"value":"/ focus for this device is one of the requesting client's surfaces","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470538,"byte_end":10470606,"line_start":2803,"line_end":2803,"column_start":5,"column_end":73}},{"value":"/ or the surface parameter is the current pointer surface. If","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470611,"byte_end":10470674,"line_start":2804,"line_end":2804,"column_start":5,"column_end":68}},{"value":"/ there was a previous surface set with this request it is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470679,"byte_end":10470739,"line_start":2805,"line_end":2805,"column_start":5,"column_end":65}},{"value":"/ replaced. If surface is NULL, the pointer image is hidden.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470744,"byte_end":10470806,"line_start":2806,"line_end":2806,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470811,"byte_end":10470814,"line_start":2807,"line_end":2807,"column_start":5,"column_end":8}},{"value":"/ The parameters hotspot_x and hotspot_y define the position of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470819,"byte_end":10470884,"line_start":2808,"line_end":2808,"column_start":5,"column_end":70}},{"value":"/ the pointer surface relative to the pointer location. Its","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470889,"byte_end":10470950,"line_start":2809,"line_end":2809,"column_start":5,"column_end":66}},{"value":"/ top-left corner is always at (x, y) - (hotspot_x, hotspot_y),","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470955,"byte_end":10471020,"line_start":2810,"line_end":2810,"column_start":5,"column_end":70}},{"value":"/ where (x, y) are the coordinates of the pointer location, in surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471025,"byte_end":10471097,"line_start":2811,"line_end":2811,"column_start":5,"column_end":77}},{"value":"/ local coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471102,"byte_end":10471124,"line_start":2812,"line_end":2812,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471129,"byte_end":10471132,"line_start":2813,"line_end":2813,"column_start":5,"column_end":8}},{"value":"/ On surface.attach requests to the pointer surface, hotspot_x","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471137,"byte_end":10471201,"line_start":2814,"line_end":2814,"column_start":5,"column_end":69}},{"value":"/ and hotspot_y are decremented by the x and y parameters","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471206,"byte_end":10471265,"line_start":2815,"line_end":2815,"column_start":5,"column_end":64}},{"value":"/ passed to the request. Attach must be confirmed by","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471270,"byte_end":10471324,"line_start":2816,"line_end":2816,"column_start":5,"column_end":59}},{"value":"/ wl_surface.commit as usual.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471329,"byte_end":10471360,"line_start":2817,"line_end":2817,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471365,"byte_end":10471368,"line_start":2818,"line_end":2818,"column_start":5,"column_end":8}},{"value":"/ The hotspot can also be updated by passing the currently set","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471373,"byte_end":10471437,"line_start":2819,"line_end":2819,"column_start":5,"column_end":69}},{"value":"/ pointer surface to this request with new values for hotspot_x","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471442,"byte_end":10471507,"line_start":2820,"line_end":2820,"column_start":5,"column_end":70}},{"value":"/ and hotspot_y.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471512,"byte_end":10471530,"line_start":2821,"line_end":2821,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471535,"byte_end":10471538,"line_start":2822,"line_end":2822,"column_start":5,"column_end":8}},{"value":"/ The current and pending input regions of the wl_surface are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471543,"byte_end":10471606,"line_start":2823,"line_end":2823,"column_start":5,"column_end":68}},{"value":"/ cleared, and wl_surface.set_input_region is ignored until the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471611,"byte_end":10471676,"line_start":2824,"line_end":2824,"column_start":5,"column_end":70}},{"value":"/ wl_surface is no longer used as the cursor. When the use as a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471681,"byte_end":10471746,"line_start":2825,"line_end":2825,"column_start":5,"column_end":70}},{"value":"/ cursor ends, the current and pending input regions become","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471751,"byte_end":10471812,"line_start":2826,"line_end":2826,"column_start":5,"column_end":66}},{"value":"/ undefined, and the wl_surface is unmapped.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10471817,"byte_end":10471863,"line_start":2827,"line_end":2827,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472545,"byte_end":10472552,"line_start":2842,"line_end":2842,"column_start":12,"column_end":19},"name":"release","qualname":"<WlPointer>::release","value":"pub fn release(Self)","parent":null,"children":[],"decl_id":null,"docs":" release the pointer object","sig":null,"attributes":[{"value":"/ release the pointer object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472185,"byte_end":10472215,"line_start":2833,"line_end":2833,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472220,"byte_end":10472223,"line_start":2834,"line_end":2834,"column_start":5,"column_end":8}},{"value":"/ Using this request client can tell the server that it is not going to","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472228,"byte_end":10472301,"line_start":2835,"line_end":2835,"column_start":5,"column_end":78}},{"value":"/ use the pointer object anymore.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472306,"byte_end":10472341,"line_start":2836,"line_end":2836,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472346,"byte_end":10472349,"line_start":2837,"line_end":2837,"column_start":5,"column_end":8}},{"value":"/ This request destroys the pointer proxy object, so user must not call","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472354,"byte_end":10472427,"line_start":2838,"line_end":2838,"column_start":5,"column_end":78}},{"value":"/ wl_pointer_destroy() after using this request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472432,"byte_end":10472482,"line_start":2839,"line_end":2839,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472487,"byte_end":10472490,"line_start":2840,"line_end":2840,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 3`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472495,"byte_end":10472533,"line_start":2841,"line_end":2841,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":855},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473085,"byte_end":10473095,"line_start":2862,"line_end":2862,"column_start":12,"column_end":22},"name":"WlKeyboard","qualname":"::sys::wayland::client::WlKeyboard","value":"WlKeyboard {  }","parent":null,"children":[{"krate":0,"index":856},{"krate":0,"index":857}],"decl_id":null,"docs":" keyboard input device","sig":null,"attributes":[{"value":"/ keyboard input device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472953,"byte_end":10472978,"line_start":2858,"line_end":2858,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472979,"byte_end":10472982,"line_start":2859,"line_end":2859,"column_start":1,"column_end":4}},{"value":"/ The wl_keyboard interface represents one or more keyboards","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472983,"byte_end":10473045,"line_start":2860,"line_end":2860,"column_start":1,"column_end":63}},{"value":"/ associated with a seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473046,"byte_end":10473073,"line_start":2861,"line_end":2861,"column_start":1,"column_end":28}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1779},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474839,"byte_end":10474847,"line_start":2903,"line_end":2903,"column_start":5,"column_end":13},"name":"NoKeymap","qualname":"::sys::wayland::client::WlKeyboardKeymapFormat::NoKeymap","value":"WlKeyboardKeymapFormat::NoKeymap","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" no keymap; client must understand how to interpret the raw keycode\n","sig":null,"attributes":[{"value":"/ no keymap; client must understand how to interpret the raw keycode","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474764,"byte_end":10474834,"line_start":2902,"line_end":2902,"column_start":5,"column_end":75}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1782},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474964,"byte_end":10474969,"line_start":2905,"line_end":2905,"column_start":5,"column_end":10},"name":"XkbV1","qualname":"::sys::wayland::client::WlKeyboardKeymapFormat::XkbV1","value":"WlKeyboardKeymapFormat::XkbV1","parent":{"krate":0,"index":1778},"children":[],"decl_id":null,"docs":" libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode\n","sig":null,"attributes":[{"value":"/ libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474857,"byte_end":10474959,"line_start":2904,"line_end":2904,"column_start":5,"column_end":107}}]},{"kind":"Enum","id":{"krate":0,"index":1778},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474735,"byte_end":10474757,"line_start":2901,"line_end":2901,"column_start":10,"column_end":32},"name":"WlKeyboardKeymapFormat","qualname":"::sys::wayland::client::WlKeyboardKeymapFormat","value":"pub enum WlKeyboardKeymapFormat {\n\n    /// no keymap; client must understand how to interpret the raw keycode\n    NoKeymap = ,\n\n    /// libxkbcommon compatible; to determine the xkb keycode, clients must add 8 to the key event keycode\n    XkbV1 = ,\n}","parent":null,"children":[{"krate":0,"index":1779},{"krate":0,"index":1782}],"decl_id":null,"docs":" keyboard mapping format","sig":null,"attributes":[{"value":"/ keyboard mapping format","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474558,"byte_end":10474585,"line_start":2895,"line_end":2895,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474586,"byte_end":10474589,"line_start":2896,"line_end":2896,"column_start":1,"column_end":4}},{"value":"/ This specifies the format of the keymap provided to the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474590,"byte_end":10474649,"line_start":2897,"line_end":2897,"column_start":1,"column_end":60}},{"value":"/ client with the wl_keyboard.keymap event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474650,"byte_end":10474695,"line_start":2898,"line_end":2898,"column_start":1,"column_end":46}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474696,"byte_end":10474708,"line_start":2899,"line_end":2899,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1788},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475393,"byte_end":10475401,"line_start":2922,"line_end":2922,"column_start":5,"column_end":13},"name":"Released","qualname":"::sys::wayland::client::WlKeyboardKeyState::Released","value":"WlKeyboardKeyState::Released","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" key is not pressed\n","sig":null,"attributes":[{"value":"/ key is not pressed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475366,"byte_end":10475388,"line_start":2921,"line_end":2921,"column_start":5,"column_end":27}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1791},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475434,"byte_end":10475441,"line_start":2924,"line_end":2924,"column_start":5,"column_end":12},"name":"Pressed","qualname":"::sys::wayland::client::WlKeyboardKeyState::Pressed","value":"WlKeyboardKeyState::Pressed","parent":{"krate":0,"index":1787},"children":[],"decl_id":null,"docs":" key is pressed\n","sig":null,"attributes":[{"value":"/ key is pressed","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475411,"byte_end":10475429,"line_start":2923,"line_end":2923,"column_start":5,"column_end":23}}]},{"kind":"Enum","id":{"krate":0,"index":1787},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475341,"byte_end":10475359,"line_start":2920,"line_end":2920,"column_start":10,"column_end":28},"name":"WlKeyboardKeyState","qualname":"::sys::wayland::client::WlKeyboardKeyState","value":"pub enum WlKeyboardKeyState {\n\n    /// key is not pressed\n    Released = ,\n\n    /// key is pressed\n    Pressed = ,\n}","parent":null,"children":[{"krate":0,"index":1788},{"krate":0,"index":1791}],"decl_id":null,"docs":" physical key state","sig":null,"attributes":[{"value":"/ physical key state","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475203,"byte_end":10475225,"line_start":2915,"line_end":2915,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475226,"byte_end":10475229,"line_start":2916,"line_end":2916,"column_start":1,"column_end":4}},{"value":"/ Describes the physical state of a key which provoked the key event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475230,"byte_end":10475301,"line_start":2917,"line_end":2917,"column_start":1,"column_end":72}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475302,"byte_end":10475314,"line_start":2918,"line_end":2918,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1797},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475982,"byte_end":10475988,"line_start":2945,"line_end":2945,"column_start":5,"column_end":11},"name":"Keymap","qualname":"::sys::wayland::client::WlKeyboardEvent::Keymap","value":"WlKeyboardEvent::Keymap(WlKeyboardKeymapFormat, ::std::os::unix::io::RawFd, u32)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" keyboard mapping","sig":null,"attributes":[{"value":"/ keyboard mapping","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475769,"byte_end":10475789,"line_start":2939,"line_end":2939,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475794,"byte_end":10475797,"line_start":2940,"line_end":2940,"column_start":5,"column_end":8}},{"value":"/ This event provides a file descriptor to the client which can be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475802,"byte_end":10475870,"line_start":2941,"line_end":2941,"column_start":5,"column_end":73}},{"value":"/ memory-mapped to provide a keyboard mapping description.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475875,"byte_end":10475935,"line_start":2942,"line_end":2942,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475940,"byte_end":10475943,"line_start":2943,"line_end":2943,"column_start":5,"column_end":8}},{"value":"/ Values: format, fd, size,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475948,"byte_end":10475977,"line_start":2944,"line_end":2944,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1802},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476211,"byte_end":10476216,"line_start":2952,"line_end":2952,"column_start":5,"column_end":10},"name":"Enter","qualname":"::sys::wayland::client::WlKeyboardEvent::Enter","value":"WlKeyboardEvent::Enter(u32, ProxyId, Vec<u8>)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" enter event","sig":null,"attributes":[{"value":"/ enter event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476050,"byte_end":10476065,"line_start":2946,"line_end":2946,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476070,"byte_end":10476073,"line_start":2947,"line_end":2947,"column_start":5,"column_end":8}},{"value":"/ Notification that this seat's keyboard focus is on a certain","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476078,"byte_end":10476142,"line_start":2948,"line_end":2948,"column_start":5,"column_end":69}},{"value":"/ surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476147,"byte_end":10476159,"line_start":2949,"line_end":2949,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476164,"byte_end":10476167,"line_start":2950,"line_end":2950,"column_start":5,"column_end":8}},{"value":"/ Values: serial, surface, keys,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476172,"byte_end":10476206,"line_start":2951,"line_end":2951,"column_start":5,"column_end":39}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1807},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476513,"byte_end":10476518,"line_start":2962,"line_end":2962,"column_start":5,"column_end":10},"name":"Leave","qualname":"::sys::wayland::client::WlKeyboardEvent::Leave","value":"WlKeyboardEvent::Leave(u32, ProxyId)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" leave event","sig":null,"attributes":[{"value":"/ leave event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476244,"byte_end":10476259,"line_start":2953,"line_end":2953,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476264,"byte_end":10476267,"line_start":2954,"line_end":2954,"column_start":5,"column_end":8}},{"value":"/ Notification that this seat's keyboard focus is no longer on","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476272,"byte_end":10476336,"line_start":2955,"line_end":2955,"column_start":5,"column_end":69}},{"value":"/ a certain surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476341,"byte_end":10476363,"line_start":2956,"line_end":2956,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476368,"byte_end":10476371,"line_start":2957,"line_end":2957,"column_start":5,"column_end":8}},{"value":"/ The leave notification is sent before the enter notification","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476376,"byte_end":10476440,"line_start":2958,"line_end":2958,"column_start":5,"column_end":69}},{"value":"/ for the new focus.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476445,"byte_end":10476467,"line_start":2959,"line_end":2959,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476472,"byte_end":10476475,"line_start":2960,"line_end":2960,"column_start":5,"column_end":8}},{"value":"/ Values: serial, surface,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476480,"byte_end":10476508,"line_start":2961,"line_end":2961,"column_start":5,"column_end":33}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1811},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476756,"byte_end":10476759,"line_start":2970,"line_end":2970,"column_start":5,"column_end":8},"name":"Key","qualname":"::sys::wayland::client::WlKeyboardEvent::Key","value":"WlKeyboardEvent::Key(u32, u32, u32, WlKeyboardKeyState)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" key event","sig":null,"attributes":[{"value":"/ key event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476538,"byte_end":10476551,"line_start":2963,"line_end":2963,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476556,"byte_end":10476559,"line_start":2964,"line_end":2964,"column_start":5,"column_end":8}},{"value":"/ A key was pressed or released.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476564,"byte_end":10476598,"line_start":2965,"line_end":2965,"column_start":5,"column_end":39}},{"value":"/ The time argument is a timestamp with millisecond","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476603,"byte_end":10476656,"line_start":2966,"line_end":2966,"column_start":5,"column_end":58}},{"value":"/ granularity, with an undefined base.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476661,"byte_end":10476701,"line_start":2967,"line_end":2967,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476706,"byte_end":10476709,"line_start":2968,"line_end":2968,"column_start":5,"column_end":8}},{"value":"/ Values: serial, time, key, state,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476714,"byte_end":10476751,"line_start":2969,"line_end":2969,"column_start":5,"column_end":42}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1817},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477042,"byte_end":10477051,"line_start":2977,"line_end":2977,"column_start":5,"column_end":14},"name":"Modifiers","qualname":"::sys::wayland::client::WlKeyboardEvent::Modifiers","value":"WlKeyboardEvent::Modifiers(u32, u32, u32, u32, u32)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" modifier and group state","sig":null,"attributes":[{"value":"/ modifier and group state","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476798,"byte_end":10476826,"line_start":2971,"line_end":2971,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476831,"byte_end":10476834,"line_start":2972,"line_end":2972,"column_start":5,"column_end":8}},{"value":"/ Notifies clients that the modifier and/or group state has","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476839,"byte_end":10476900,"line_start":2973,"line_end":2973,"column_start":5,"column_end":66}},{"value":"/ changed, and it should update its local state.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476905,"byte_end":10476955,"line_start":2974,"line_end":2974,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476960,"byte_end":10476963,"line_start":2975,"line_end":2975,"column_start":5,"column_end":8}},{"value":"/ Values: serial, mods_depressed, mods_latched, mods_locked, group,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10476968,"byte_end":10477037,"line_start":2976,"line_end":2976,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1824},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477747,"byte_end":10477757,"line_start":2994,"line_end":2994,"column_start":5,"column_end":15},"name":"RepeatInfo","qualname":"::sys::wayland::client::WlKeyboardEvent::RepeatInfo","value":"WlKeyboardEvent::RepeatInfo(i32, i32)","parent":{"krate":0,"index":1796},"children":[],"decl_id":null,"docs":" repeat rate and delay","sig":null,"attributes":[{"value":"/ repeat rate and delay","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477079,"byte_end":10477104,"line_start":2978,"line_end":2978,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477109,"byte_end":10477112,"line_start":2979,"line_end":2979,"column_start":5,"column_end":8}},{"value":"/ Informs the client about the keyboard's repeat rate and delay.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477117,"byte_end":10477183,"line_start":2980,"line_end":2980,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477188,"byte_end":10477191,"line_start":2981,"line_end":2981,"column_start":5,"column_end":8}},{"value":"/ This event is sent as soon as the wl_keyboard object has been created,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477196,"byte_end":10477270,"line_start":2982,"line_end":2982,"column_start":5,"column_end":79}},{"value":"/ and is guaranteed to be received by the client before any key press","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477275,"byte_end":10477346,"line_start":2983,"line_end":2983,"column_start":5,"column_end":76}},{"value":"/ event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477351,"byte_end":10477361,"line_start":2984,"line_end":2984,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477366,"byte_end":10477369,"line_start":2985,"line_end":2985,"column_start":5,"column_end":8}},{"value":"/ Negative values for either rate or delay are illegal. A rate of zero","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477374,"byte_end":10477446,"line_start":2986,"line_end":2986,"column_start":5,"column_end":77}},{"value":"/ will disable any repeating (regardless of the value of delay).","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477451,"byte_end":10477517,"line_start":2987,"line_end":2987,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477522,"byte_end":10477525,"line_start":2988,"line_end":2988,"column_start":5,"column_end":8}},{"value":"/ This event can be sent later on as well with a new value if necessary,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477530,"byte_end":10477604,"line_start":2989,"line_end":2989,"column_start":5,"column_end":79}},{"value":"/ so clients should continue listening for the event past the creation","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477609,"byte_end":10477681,"line_start":2990,"line_end":2990,"column_start":5,"column_end":77}},{"value":"/ of wl_keyboard.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477686,"byte_end":10477705,"line_start":2991,"line_end":2991,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477710,"byte_end":10477713,"line_start":2992,"line_end":2992,"column_start":5,"column_end":8}},{"value":"/ Values: rate, delay,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10477718,"byte_end":10477742,"line_start":2993,"line_end":2993,"column_start":5,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":1796},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10475747,"byte_end":10475762,"line_start":2938,"line_end":2938,"column_start":10,"column_end":25},"name":"WlKeyboardEvent","qualname":"::sys::wayland::client::WlKeyboardEvent","value":"pub enum WlKeyboardEvent {\n\n    /// keyboard mapping\n    ///\n    /// This event provides a file descriptor to the client which can be\n    /// memory-mapped to provide a keyboard mapping description.\n    ///\n    /// Values: format, fd, size,\n    Keymap(WlKeyboardKeymapFormat, ::std::os::unix::io::RawFd, u32),\n\n    /// enter event\n    ///\n    /// Notification that this seat's keyboard focus is on a certain\n    /// surface.\n    ///\n    /// Values: serial, surface, keys,\n    Enter(u32, ProxyId, Vec<u8>),\n\n    /// leave event\n    ///\n    /// Notification that this seat's keyboard focus is no longer on\n    /// a certain surface.\n    ///\n    /// The leave notification is sent before the enter notification\n    /// for the new focus.\n    ///\n    /// Values: serial, surface,\n    Leave(u32, ProxyId),\n\n    /// key event\n    ///\n    /// A key was pressed or released.\n    /// The time argument is a timestamp with millisecond\n    /// granularity, with an undefined base.\n    ///\n    /// Values: serial, time, key, state,\n    Key(u32, u32, u32, WlKeyboardKeyState),\n\n    /// modifier and group state\n    ///\n    /// Notifies clients that the modifier and/or group state has\n    /// changed, and it should update its local state.\n    ///\n    /// Values: serial, mods_depressed, mods_latched, mods_locked, group,\n    Modifiers(u32, u32, u32, u32, u32),\n\n    /// repeat rate and delay\n    ///\n    /// Informs the client about the keyboard's repeat rate and delay.\n    ///\n    /// This event is sent as soon as the wl_keyboard object has been created,\n    /// and is guaranteed to be received by the client before any key press\n    /// event.\n    ///\n    /// Negative values for either rate or delay are illegal. A rate of zero\n    /// will disable any repeating (regardless of the value of delay).\n    ///\n    /// This event can be sent later on as well with a new value if necessary,\n    /// so clients should continue listening for the event past the creation\n    /// of wl_keyboard.\n    ///\n    /// Values: rate, delay,\n    RepeatInfo(i32, i32),\n}","parent":null,"children":[{"krate":0,"index":1797},{"krate":0,"index":1802},{"krate":0,"index":1807},{"krate":0,"index":1811},{"krate":0,"index":1817},{"krate":0,"index":1824}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":877},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480340,"byte_end":10480347,"line_start":3049,"line_end":3049,"column_start":12,"column_end":19},"name":"release","qualname":"<WlKeyboard>::release","value":"pub fn release(Self)","parent":null,"children":[],"decl_id":null,"docs":" release the keyboard object","sig":null,"attributes":[{"value":"/ release the keyboard object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480238,"byte_end":10480269,"line_start":3045,"line_end":3045,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480274,"byte_end":10480277,"line_start":3046,"line_end":3046,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480282,"byte_end":10480285,"line_start":3047,"line_end":3047,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 3`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480290,"byte_end":10480328,"line_start":3048,"line_end":3048,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":880},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481186,"byte_end":10481193,"line_start":3075,"line_end":3075,"column_start":12,"column_end":19},"name":"WlTouch","qualname":"::sys::wayland::client::WlTouch","value":"WlTouch {  }","parent":null,"children":[{"krate":0,"index":881},{"krate":0,"index":882}],"decl_id":null,"docs":" touchscreen input device","sig":null,"attributes":[{"value":"/ touchscreen input device","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480747,"byte_end":10480775,"line_start":3065,"line_end":3065,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480776,"byte_end":10480779,"line_start":3066,"line_end":3066,"column_start":1,"column_end":4}},{"value":"/ The wl_touch interface represents a touchscreen","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480780,"byte_end":10480831,"line_start":3067,"line_end":3067,"column_start":1,"column_end":52}},{"value":"/ associated with a seat.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480832,"byte_end":10480859,"line_start":3068,"line_end":3068,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480860,"byte_end":10480863,"line_start":3069,"line_end":3069,"column_start":1,"column_end":4}},{"value":"/ Touch interactions can consist of one or more contacts.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480864,"byte_end":10480923,"line_start":3070,"line_end":3070,"column_start":1,"column_end":60}},{"value":"/ For each contact, a series of events is generated, starting","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480924,"byte_end":10480987,"line_start":3071,"line_end":3071,"column_start":1,"column_end":64}},{"value":"/ with a down event, followed by zero or more motion events,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480988,"byte_end":10481050,"line_start":3072,"line_end":3072,"column_start":1,"column_end":63}},{"value":"/ and ending with an up event. Events relating to the same","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481051,"byte_end":10481111,"line_start":3073,"line_end":3073,"column_start":1,"column_end":61}},{"value":"/ contact point can be identified by the ID of the sequence.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481112,"byte_end":10481174,"line_start":3074,"line_end":3074,"column_start":1,"column_end":63}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1831},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483102,"byte_end":10483106,"line_start":3121,"line_end":3121,"column_start":5,"column_end":9},"name":"Down","qualname":"::sys::wayland::client::WlTouchEvent::Down","value":"WlTouchEvent::Down(u32, u32, ProxyId, i32, f64, f64)","parent":{"krate":0,"index":1830},"children":[],"decl_id":null,"docs":" touch down event and beginning of a touch sequence","sig":null,"attributes":[{"value":"/ touch down event and beginning of a touch sequence","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482719,"byte_end":10482773,"line_start":3113,"line_end":3113,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482778,"byte_end":10482781,"line_start":3114,"line_end":3114,"column_start":5,"column_end":8}},{"value":"/ A new touch point has appeared on the surface. This touch point is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482786,"byte_end":10482856,"line_start":3115,"line_end":3115,"column_start":5,"column_end":75}},{"value":"/ assigned a unique @id. Future events from this touchpoint reference","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482861,"byte_end":10482932,"line_start":3116,"line_end":3116,"column_start":5,"column_end":76}},{"value":"/ this ID. The ID ceases to be valid after a touch up event and may be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482937,"byte_end":10483009,"line_start":3117,"line_end":3117,"column_start":5,"column_end":77}},{"value":"/ re-used in the future.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483014,"byte_end":10483040,"line_start":3118,"line_end":3118,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483045,"byte_end":10483048,"line_start":3119,"line_end":3119,"column_start":5,"column_end":8}},{"value":"/ Values: serial, time, surface, id, x, y,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483053,"byte_end":10483097,"line_start":3120,"line_end":3120,"column_start":5,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1839},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483424,"byte_end":10483426,"line_start":3129,"line_end":3129,"column_start":5,"column_end":7},"name":"Up","qualname":"::sys::wayland::client::WlTouchEvent::Up","value":"WlTouchEvent::Up(u32, u32, i32)","parent":{"krate":0,"index":1830},"children":[],"decl_id":null,"docs":" end of a touch event sequence","sig":null,"attributes":[{"value":"/ end of a touch event sequence","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483142,"byte_end":10483175,"line_start":3122,"line_end":3122,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483180,"byte_end":10483183,"line_start":3123,"line_end":3123,"column_start":5,"column_end":8}},{"value":"/ The touch point has disappeared. No further events will be sent for","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483188,"byte_end":10483259,"line_start":3124,"line_end":3124,"column_start":5,"column_end":76}},{"value":"/ this touchpoint and the touch point's ID is released and may be","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483264,"byte_end":10483331,"line_start":3125,"line_end":3125,"column_start":5,"column_end":72}},{"value":"/ re-used in a future touch down event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483336,"byte_end":10483377,"line_start":3126,"line_end":3126,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483382,"byte_end":10483385,"line_start":3127,"line_end":3127,"column_start":5,"column_end":8}},{"value":"/ Values: serial, time, id,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483390,"byte_end":10483419,"line_start":3128,"line_end":3128,"column_start":5,"column_end":34}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1844},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483582,"byte_end":10483588,"line_start":3135,"line_end":3135,"column_start":5,"column_end":11},"name":"Motion","qualname":"::sys::wayland::client::WlTouchEvent::Motion","value":"WlTouchEvent::Motion(u32, i32, f64, f64)","parent":{"krate":0,"index":1830},"children":[],"decl_id":null,"docs":" update of touch point coordinates","sig":null,"attributes":[{"value":"/ update of touch point coordinates","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483446,"byte_end":10483483,"line_start":3130,"line_end":3130,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483488,"byte_end":10483491,"line_start":3131,"line_end":3131,"column_start":5,"column_end":8}},{"value":"/ A touchpoint has changed coordinates.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483496,"byte_end":10483537,"line_start":3132,"line_end":3132,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483542,"byte_end":10483545,"line_start":3133,"line_end":3133,"column_start":5,"column_end":8}},{"value":"/ Values: time, id, x, y,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483550,"byte_end":10483577,"line_start":3134,"line_end":3134,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1850},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483704,"byte_end":10483709,"line_start":3139,"line_end":3139,"column_start":5,"column_end":10},"name":"Frame","qualname":"::sys::wayland::client::WlTouchEvent::Frame","value":"WlTouchEvent::Frame","parent":{"krate":0,"index":1830},"children":[],"decl_id":null,"docs":" end of touch frame event","sig":null,"attributes":[{"value":"/ end of touch frame event","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483612,"byte_end":10483640,"line_start":3136,"line_end":3136,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483645,"byte_end":10483648,"line_start":3137,"line_end":3137,"column_start":5,"column_end":8}},{"value":"/ Indicates the end of a contact point list.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483653,"byte_end":10483699,"line_start":3138,"line_end":3138,"column_start":5,"column_end":51}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1852},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10484160,"byte_end":10484166,"line_start":3148,"line_end":3148,"column_start":5,"column_end":11},"name":"Cancel","qualname":"::sys::wayland::client::WlTouchEvent::Cancel","value":"WlTouchEvent::Cancel","parent":{"krate":0,"index":1830},"children":[],"decl_id":null,"docs":" touch session cancelled","sig":null,"attributes":[{"value":"/ touch session cancelled","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483715,"byte_end":10483742,"line_start":3140,"line_end":3140,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483747,"byte_end":10483750,"line_start":3141,"line_end":3141,"column_start":5,"column_end":8}},{"value":"/ Sent if the compositor decides the touch stream is a global","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483755,"byte_end":10483818,"line_start":3142,"line_end":3142,"column_start":5,"column_end":68}},{"value":"/ gesture. No further events are sent to the clients from that","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483823,"byte_end":10483887,"line_start":3143,"line_end":3143,"column_start":5,"column_end":69}},{"value":"/ particular gesture. Touch cancellation applies to all touch points","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483892,"byte_end":10483962,"line_start":3144,"line_end":3144,"column_start":5,"column_end":75}},{"value":"/ currently active on this client's surface. The client is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10483967,"byte_end":10484027,"line_start":3145,"line_end":3145,"column_start":5,"column_end":65}},{"value":"/ responsible for finalizing the touch points, future touch points on","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10484032,"byte_end":10484103,"line_start":3146,"line_end":3146,"column_start":5,"column_end":76}},{"value":"/ this surface may re-use the touch point ID.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10484108,"byte_end":10484155,"line_start":3147,"line_end":3147,"column_start":5,"column_end":52}}]},{"kind":"Enum","id":{"krate":0,"index":1830},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482700,"byte_end":10482712,"line_start":3112,"line_end":3112,"column_start":10,"column_end":22},"name":"WlTouchEvent","qualname":"::sys::wayland::client::WlTouchEvent","value":"pub enum WlTouchEvent {\n\n    /// touch down event and beginning of a touch sequence\n    ///\n    /// A new touch point has appeared on the surface. This touch point is\n    /// assigned a unique @id. Future events from this touchpoint reference\n    /// this ID. The ID ceases to be valid after a touch up event and may be\n    /// re-used in the future.\n    ///\n    /// Values: serial, time, surface, id, x, y,\n    Down(u32, u32, ProxyId, i32, f64, f64),\n\n    /// end of a touch event sequence\n    ///\n    /// The touch point has disappeared. No further events will be sent for\n    /// this touchpoint and the touch point's ID is released and may be\n    /// re-used in a future touch down event.\n    ///\n    /// Values: serial, time, id,\n    Up(u32, u32, i32),\n\n    /// update of touch point coordinates\n    ///\n    /// A touchpoint has changed coordinates.\n    ///\n    /// Values: time, id, x, y,\n    Motion(u32, i32, f64, f64),\n\n    /// end of touch frame event\n    ///\n    /// Indicates the end of a contact point list.\n    Frame,\n\n    /// touch session cancelled\n    ///\n    /// Sent if the compositor decides the touch stream is a global\n    /// gesture. No further events are sent to the clients from that\n    /// particular gesture. Touch cancellation applies to all touch points\n    /// currently active on this client's surface. The client is\n    /// responsible for finalizing the touch points, future touch points on\n    /// this surface may re-use the touch point ID.\n    Cancel,\n}","parent":null,"children":[{"krate":0,"index":1831},{"krate":0,"index":1839},{"krate":0,"index":1844},{"krate":0,"index":1850},{"krate":0,"index":1852}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":900},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485904,"byte_end":10485911,"line_start":3192,"line_end":3192,"column_start":12,"column_end":19},"name":"release","qualname":"<WlTouch>::release","value":"pub fn release(Self)","parent":null,"children":[],"decl_id":null,"docs":" release the touch object","sig":null,"attributes":[{"value":"/ release the touch object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485805,"byte_end":10485833,"line_start":3188,"line_end":3188,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485838,"byte_end":10485841,"line_start":3189,"line_end":3189,"column_start":5,"column_end":8}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485846,"byte_end":10485849,"line_start":3190,"line_end":3190,"column_start":5,"column_end":8}},{"value":"/ Requires interface version `>= 3`.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485854,"byte_end":10485892,"line_start":3191,"line_end":3191,"column_start":5,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":903},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486744,"byte_end":10486752,"line_start":3216,"line_end":3216,"column_start":12,"column_end":20},"name":"WlOutput","qualname":"::sys::wayland::client::WlOutput","value":"WlOutput {  }","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905}],"decl_id":null,"docs":" compositor output region","sig":null,"attributes":[{"value":"/ compositor output region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486306,"byte_end":10486334,"line_start":3208,"line_end":3208,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486335,"byte_end":10486338,"line_start":3209,"line_end":3209,"column_start":1,"column_end":4}},{"value":"/ An output describes part of the compositor geometry.  The","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486339,"byte_end":10486400,"line_start":3210,"line_end":3210,"column_start":1,"column_end":62}},{"value":"/ compositor works in the 'compositor coordinate system' and an","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486401,"byte_end":10486466,"line_start":3211,"line_end":3211,"column_start":1,"column_end":66}},{"value":"/ output corresponds to rectangular area in that space that is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486467,"byte_end":10486531,"line_start":3212,"line_end":3212,"column_start":1,"column_end":65}},{"value":"/ actually visible.  This typically corresponds to a monitor that","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486532,"byte_end":10486599,"line_start":3213,"line_end":3213,"column_start":1,"column_end":68}},{"value":"/ displays part of the compositor space.  This object is published","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486600,"byte_end":10486668,"line_start":3214,"line_end":3214,"column_start":1,"column_end":69}},{"value":"/ as global during start up, or when a monitor is hotplugged.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486669,"byte_end":10486732,"line_start":3215,"line_end":3215,"column_start":1,"column_end":64}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1857},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488377,"byte_end":10488384,"line_start":3256,"line_end":3256,"column_start":5,"column_end":12},"name":"Unknown","qualname":"::sys::wayland::client::WlOutputSubpixel::Unknown","value":"WlOutputSubpixel::Unknown","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1860},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488394,"byte_end":10488398,"line_start":3257,"line_end":3257,"column_start":5,"column_end":9},"name":"None","qualname":"::sys::wayland::client::WlOutputSubpixel::None","value":"WlOutputSubpixel::None","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1863},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488408,"byte_end":10488421,"line_start":3258,"line_end":3258,"column_start":5,"column_end":18},"name":"HorizontalRgb","qualname":"::sys::wayland::client::WlOutputSubpixel::HorizontalRgb","value":"WlOutputSubpixel::HorizontalRgb","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1866},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488431,"byte_end":10488444,"line_start":3259,"line_end":3259,"column_start":5,"column_end":18},"name":"HorizontalBgr","qualname":"::sys::wayland::client::WlOutputSubpixel::HorizontalBgr","value":"WlOutputSubpixel::HorizontalBgr","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1869},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488454,"byte_end":10488465,"line_start":3260,"line_end":3260,"column_start":5,"column_end":16},"name":"VerticalRgb","qualname":"::sys::wayland::client::WlOutputSubpixel::VerticalRgb","value":"WlOutputSubpixel::VerticalRgb","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1872},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488475,"byte_end":10488486,"line_start":3261,"line_end":3261,"column_start":5,"column_end":16},"name":"VerticalBgr","qualname":"::sys::wayland::client::WlOutputSubpixel::VerticalBgr","value":"WlOutputSubpixel::VerticalBgr","parent":{"krate":0,"index":1856},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1856},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488354,"byte_end":10488370,"line_start":3255,"line_end":3255,"column_start":10,"column_end":26},"name":"WlOutputSubpixel","qualname":"::sys::wayland::client::WlOutputSubpixel","value":"pub enum WlOutputSubpixel {\n    Unknown = ,\n    None = ,\n    HorizontalRgb = ,\n    HorizontalBgr = ,\n    VerticalRgb = ,\n    VerticalBgr = ,\n}","parent":null,"children":[{"krate":0,"index":1857},{"krate":0,"index":1860},{"krate":0,"index":1863},{"krate":0,"index":1866},{"krate":0,"index":1869},{"krate":0,"index":1872}],"decl_id":null,"docs":" subpixel geometry information","sig":null,"attributes":[{"value":"/ subpixel geometry information","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488191,"byte_end":10488224,"line_start":3249,"line_end":3249,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488225,"byte_end":10488228,"line_start":3250,"line_end":3250,"column_start":1,"column_end":4}},{"value":"/ This enumeration describes how the physical","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488229,"byte_end":10488276,"line_start":3251,"line_end":3251,"column_start":1,"column_end":48}},{"value":"/ pixels on an output are laid out.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488277,"byte_end":10488314,"line_start":3252,"line_end":3252,"column_start":1,"column_end":38}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488315,"byte_end":10488327,"line_start":3253,"line_end":3253,"column_start":1,"column_end":13}}]},{"kind":"TupleVariant","id":{"krate":0,"index":1878},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489472,"byte_end":10489478,"line_start":3291,"line_end":3291,"column_start":5,"column_end":11},"name":"Normal","qualname":"::sys::wayland::client::WlOutputTransform::Normal","value":"WlOutputTransform::Normal","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1881},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489488,"byte_end":10489491,"line_start":3292,"line_end":3292,"column_start":5,"column_end":8},"name":"T90","qualname":"::sys::wayland::client::WlOutputTransform::T90","value":"WlOutputTransform::T90","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1884},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489501,"byte_end":10489505,"line_start":3293,"line_end":3293,"column_start":5,"column_end":9},"name":"T180","qualname":"::sys::wayland::client::WlOutputTransform::T180","value":"WlOutputTransform::T180","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1887},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489515,"byte_end":10489519,"line_start":3294,"line_end":3294,"column_start":5,"column_end":9},"name":"T270","qualname":"::sys::wayland::client::WlOutputTransform::T270","value":"WlOutputTransform::T270","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1890},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489529,"byte_end":10489536,"line_start":3295,"line_end":3295,"column_start":5,"column_end":12},"name":"Flipped","qualname":"::sys::wayland::client::WlOutputTransform::Flipped","value":"WlOutputTransform::Flipped","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1893},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489546,"byte_end":10489555,"line_start":3296,"line_end":3296,"column_start":5,"column_end":14},"name":"Flipped90","qualname":"::sys::wayland::client::WlOutputTransform::Flipped90","value":"WlOutputTransform::Flipped90","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1896},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489565,"byte_end":10489575,"line_start":3297,"line_end":3297,"column_start":5,"column_end":15},"name":"Flipped180","qualname":"::sys::wayland::client::WlOutputTransform::Flipped180","value":"WlOutputTransform::Flipped180","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1899},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489585,"byte_end":10489595,"line_start":3298,"line_end":3298,"column_start":5,"column_end":15},"name":"Flipped270","qualname":"::sys::wayland::client::WlOutputTransform::Flipped270","value":"WlOutputTransform::Flipped270","parent":{"krate":0,"index":1877},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1877},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489448,"byte_end":10489465,"line_start":3290,"line_end":3290,"column_start":10,"column_end":27},"name":"WlOutputTransform","qualname":"::sys::wayland::client::WlOutputTransform","value":"pub enum WlOutputTransform {\n    Normal = ,\n    T90 = ,\n    T180 = ,\n    T270 = ,\n    Flipped = ,\n    Flipped90 = ,\n    Flipped180 = ,\n    Flipped270 = ,\n}","parent":null,"children":[{"krate":0,"index":1878},{"krate":0,"index":1881},{"krate":0,"index":1884},{"krate":0,"index":1887},{"krate":0,"index":1890},{"krate":0,"index":1893},{"krate":0,"index":1896},{"krate":0,"index":1899}],"decl_id":null,"docs":" transform from framebuffer to output","sig":null,"attributes":[{"value":"/ transform from framebuffer to output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488897,"byte_end":10488937,"line_start":3275,"line_end":3275,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488938,"byte_end":10488941,"line_start":3276,"line_end":3276,"column_start":1,"column_end":4}},{"value":"/ This describes the transform that a compositor will apply to a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488942,"byte_end":10489008,"line_start":3277,"line_end":3277,"column_start":1,"column_end":67}},{"value":"/ surface to compensate for the rotation or mirroring of an","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489009,"byte_end":10489070,"line_start":3278,"line_end":3278,"column_start":1,"column_end":62}},{"value":"/ output device.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489071,"byte_end":10489089,"line_start":3279,"line_end":3279,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489090,"byte_end":10489093,"line_start":3280,"line_end":3280,"column_start":1,"column_end":4}},{"value":"/ The flipped values correspond to an initial flip around a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489094,"byte_end":10489155,"line_start":3281,"line_end":3281,"column_start":1,"column_end":62}},{"value":"/ vertical axis followed by rotation.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489156,"byte_end":10489195,"line_start":3282,"line_end":3282,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489196,"byte_end":10489199,"line_start":3283,"line_end":3283,"column_start":1,"column_end":4}},{"value":"/ The purpose is mainly to allow clients render accordingly and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489200,"byte_end":10489265,"line_start":3284,"line_end":3284,"column_start":1,"column_end":66}},{"value":"/ tell the compositor, so that for fullscreen surfaces, the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489266,"byte_end":10489327,"line_start":3285,"line_end":3285,"column_start":1,"column_end":62}},{"value":"/ compositor will still be able to scan out directly from client","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489328,"byte_end":10489394,"line_start":3286,"line_end":3286,"column_start":1,"column_end":67}},{"value":"/ surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489395,"byte_end":10489408,"line_start":3287,"line_end":3287,"column_start":1,"column_end":14}},{"value":"repr(u32)","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10489409,"byte_end":10489421,"line_start":3288,"line_end":3288,"column_start":1,"column_end":13}}]},{"kind":"Mod","id":{"krate":0,"index":921},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490235,"byte_end":10490247,"line_start":3318,"line_end":3318,"column_start":9,"column_end":21},"name":"WlOutputMode","qualname":"::sys::wayland::client::WlOutputMode","value":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","parent":null,"children":[{"krate":0,"index":1906},{"krate":0,"index":1924},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1917},{"krate":0,"index":1918},{"krate":0,"index":1915},{"krate":0,"index":1913},{"krate":0,"index":1911},{"krate":0,"index":1908},{"krate":0,"index":1904},{"krate":0,"index":1905},{"krate":0,"index":1925},{"krate":0,"index":1938},{"krate":0,"index":1962},{"krate":0,"index":1965},{"krate":0,"index":1967},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1975},{"krate":0,"index":1977},{"krate":0,"index":1980},{"krate":0,"index":1982},{"krate":0,"index":1985},{"krate":0,"index":1988}],"decl_id":null,"docs":" mode information","sig":null,"attributes":[{"value":"/ mode information","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490088,"byte_end":10490108,"line_start":3314,"line_end":3314,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490109,"byte_end":10490112,"line_start":3315,"line_end":3315,"column_start":1,"column_end":4}},{"value":"/ These flags describe properties of an output mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490113,"byte_end":10490167,"line_start":3316,"line_end":3316,"column_start":1,"column_end":55}},{"value":"/ They are used in the flags bitfield of the mode event.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490168,"byte_end":10490226,"line_start":3317,"line_end":3317,"column_start":1,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":1906},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490276,"byte_end":10490288,"line_start":3320,"line_end":3320,"column_start":15,"column_end":27},"name":"WlOutputMode","qualname":"::sys::wayland::client::WlOutputMode::WlOutputMode","value":"WlOutputMode {  }","parent":null,"children":[{"krate":0,"index":1907}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1904},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490353,"byte_end":10490360,"line_start":3322,"line_end":3322,"column_start":15,"column_end":22},"name":"Current","qualname":"::sys::wayland::client::WlOutputMode::Current","value":"WlOutputMode","parent":null,"children":[],"decl_id":null,"docs":" indicates this is the current mode\n","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1905},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490427,"byte_end":10490436,"line_start":3324,"line_end":3324,"column_start":15,"column_end":24},"name":"Preferred","qualname":"::sys::wayland::client::WlOutputMode::Preferred","value":"WlOutputMode","parent":null,"children":[],"decl_id":null,"docs":" indicates this is the preferred mode\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1992},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490982,"byte_end":10490990,"line_start":3343,"line_end":3343,"column_start":5,"column_end":13},"name":"Geometry","qualname":"::sys::wayland::client::WlOutputEvent::Geometry","value":"WlOutputEvent::Geometry(i32, i32, i32, i32, WlOutputSubpixel, String, String, WlOutputTransform)","parent":{"krate":0,"index":1991},"children":[],"decl_id":null,"docs":" properties of the output","sig":null,"attributes":[{"value":"/ properties of the output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490660,"byte_end":10490688,"line_start":3336,"line_end":3336,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490693,"byte_end":10490696,"line_start":3337,"line_end":3337,"column_start":5,"column_end":8}},{"value":"/ The geometry event describes geometric properties of the output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490701,"byte_end":10490769,"line_start":3338,"line_end":3338,"column_start":5,"column_end":73}},{"value":"/ The event is sent when binding to the output object and whenever","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490774,"byte_end":10490842,"line_start":3339,"line_end":3339,"column_start":5,"column_end":73}},{"value":"/ any of the properties change.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490847,"byte_end":10490880,"line_start":3340,"line_end":3340,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490885,"byte_end":10490888,"line_start":3341,"line_end":3341,"column_start":5,"column_end":8}},{"value":"/ Values: x, y, physical_width, physical_height, subpixel, make, model, transform,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490893,"byte_end":10490977,"line_start":3342,"line_end":3342,"column_start":5,"column_end":89}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2002},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491920,"byte_end":10491924,"line_start":3361,"line_end":3361,"column_start":5,"column_end":9},"name":"Mode","qualname":"::sys::wayland::client::WlOutputEvent::Mode","value":"WlOutputEvent::Mode(WlOutputMode::WlOutputMode, i32, i32, i32)","parent":{"krate":0,"index":1991},"children":[],"decl_id":null,"docs":" advertise available modes for the output","sig":null,"attributes":[{"value":"/ advertise available modes for the output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491063,"byte_end":10491107,"line_start":3344,"line_end":3344,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491112,"byte_end":10491115,"line_start":3345,"line_end":3345,"column_start":5,"column_end":8}},{"value":"/ The mode event describes an available mode for the output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491120,"byte_end":10491182,"line_start":3346,"line_end":3346,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491187,"byte_end":10491190,"line_start":3347,"line_end":3347,"column_start":5,"column_end":8}},{"value":"/ The event is sent when binding to the output object and there","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491195,"byte_end":10491260,"line_start":3348,"line_end":3348,"column_start":5,"column_end":70}},{"value":"/ will always be one mode, the current mode.  The event is sent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491265,"byte_end":10491330,"line_start":3349,"line_end":3349,"column_start":5,"column_end":70}},{"value":"/ again if an output changes mode, for the mode that is now","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491335,"byte_end":10491396,"line_start":3350,"line_end":3350,"column_start":5,"column_end":66}},{"value":"/ current.  In other words, the current mode is always the last","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491401,"byte_end":10491466,"line_start":3351,"line_end":3351,"column_start":5,"column_end":70}},{"value":"/ mode that was received with the current flag set.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491471,"byte_end":10491524,"line_start":3352,"line_end":3352,"column_start":5,"column_end":58}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491529,"byte_end":10491532,"line_start":3353,"line_end":3353,"column_start":5,"column_end":8}},{"value":"/ The size of a mode is given in physical hardware units of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491537,"byte_end":10491598,"line_start":3354,"line_end":3354,"column_start":5,"column_end":66}},{"value":"/ the output device. This is not necessarily the same as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491603,"byte_end":10491661,"line_start":3355,"line_end":3355,"column_start":5,"column_end":63}},{"value":"/ the output size in the global compositor space. For instance,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491666,"byte_end":10491731,"line_start":3356,"line_end":3356,"column_start":5,"column_end":70}},{"value":"/ the output may be scaled, as described in wl_output.scale,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491736,"byte_end":10491798,"line_start":3357,"line_end":3357,"column_start":5,"column_end":67}},{"value":"/ or transformed , as described in wl_output.transform.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491803,"byte_end":10491860,"line_start":3358,"line_end":3358,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491865,"byte_end":10491868,"line_start":3359,"line_end":3359,"column_start":5,"column_end":8}},{"value":"/ Values: flags, width, height, refresh,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491873,"byte_end":10491915,"line_start":3360,"line_end":3360,"column_start":5,"column_end":47}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2008},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492318,"byte_end":10492322,"line_start":3369,"line_end":3369,"column_start":5,"column_end":9},"name":"Done","qualname":"::sys::wayland::client::WlOutputEvent::Done","value":"WlOutputEvent::Done","parent":{"krate":0,"index":1991},"children":[],"decl_id":null,"docs":" sent all information about output","sig":null,"attributes":[{"value":"/ sent all information about output","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10491971,"byte_end":10492008,"line_start":3362,"line_end":3362,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492013,"byte_end":10492016,"line_start":3363,"line_end":3363,"column_start":5,"column_end":8}},{"value":"/ This event is sent after all other properties has been","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492021,"byte_end":10492079,"line_start":3364,"line_end":3364,"column_start":5,"column_end":63}},{"value":"/ sent after binding to the output object and after any","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492084,"byte_end":10492141,"line_start":3365,"line_end":3365,"column_start":5,"column_end":62}},{"value":"/ other property changes done after that. This allows","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492146,"byte_end":10492201,"line_start":3366,"line_end":3366,"column_start":5,"column_end":60}},{"value":"/ changes to the output properties to be seen as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492206,"byte_end":10492256,"line_start":3367,"line_end":3367,"column_start":5,"column_end":55}},{"value":"/ atomic, even if they happen via multiple events.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492261,"byte_end":10492313,"line_start":3368,"line_end":3368,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":2010},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493317,"byte_end":10493322,"line_start":3392,"line_end":3392,"column_start":5,"column_end":10},"name":"Scale","qualname":"::sys::wayland::client::WlOutputEvent::Scale","value":"WlOutputEvent::Scale(i32)","parent":{"krate":0,"index":1991},"children":[],"decl_id":null,"docs":" output scaling properties","sig":null,"attributes":[{"value":"/ output scaling properties","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492328,"byte_end":10492357,"line_start":3370,"line_end":3370,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492362,"byte_end":10492365,"line_start":3371,"line_end":3371,"column_start":5,"column_end":8}},{"value":"/ This event contains scaling geometry information","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492370,"byte_end":10492422,"line_start":3372,"line_end":3372,"column_start":5,"column_end":57}},{"value":"/ that is not in the geometry event. It may be sent after","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492427,"byte_end":10492486,"line_start":3373,"line_end":3373,"column_start":5,"column_end":64}},{"value":"/ binding the output object or if the output scale changes","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492491,"byte_end":10492551,"line_start":3374,"line_end":3374,"column_start":5,"column_end":65}},{"value":"/ later. If it is not sent, the client should assume a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492556,"byte_end":10492612,"line_start":3375,"line_end":3375,"column_start":5,"column_end":61}},{"value":"/ scale of 1.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492617,"byte_end":10492632,"line_start":3376,"line_end":3376,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492637,"byte_end":10492640,"line_start":3377,"line_end":3377,"column_start":5,"column_end":8}},{"value":"/ A scale larger than 1 means that the compositor will","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492645,"byte_end":10492701,"line_start":3378,"line_end":3378,"column_start":5,"column_end":61}},{"value":"/ automatically scale surface buffers by this amount","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492706,"byte_end":10492760,"line_start":3379,"line_end":3379,"column_start":5,"column_end":59}},{"value":"/ when rendering. This is used for very high resolution","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492765,"byte_end":10492822,"line_start":3380,"line_end":3380,"column_start":5,"column_end":62}},{"value":"/ displays where applications rendering at the native","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492827,"byte_end":10492882,"line_start":3381,"line_end":3381,"column_start":5,"column_end":60}},{"value":"/ resolution would be too small to be legible.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492887,"byte_end":10492935,"line_start":3382,"line_end":3382,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492940,"byte_end":10492943,"line_start":3383,"line_end":3383,"column_start":5,"column_end":8}},{"value":"/ It is intended that scaling aware clients track the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10492948,"byte_end":10493003,"line_start":3384,"line_end":3384,"column_start":5,"column_end":60}},{"value":"/ current output of a surface, and if it is on a scaled","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493008,"byte_end":10493065,"line_start":3385,"line_end":3385,"column_start":5,"column_end":62}},{"value":"/ output it should use wl_surface.set_buffer_scale with","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493070,"byte_end":10493127,"line_start":3386,"line_end":3386,"column_start":5,"column_end":62}},{"value":"/ the scale of the output. That way the compositor can","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493132,"byte_end":10493188,"line_start":3387,"line_end":3387,"column_start":5,"column_end":61}},{"value":"/ avoid scaling the surface, and the client can supply","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493193,"byte_end":10493249,"line_start":3388,"line_end":3388,"column_start":5,"column_end":61}},{"value":"/ a higher detail image.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493254,"byte_end":10493280,"line_start":3389,"line_end":3389,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493285,"byte_end":10493288,"line_start":3390,"line_end":3390,"column_start":5,"column_end":8}},{"value":"/ Values: factor,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10493293,"byte_end":10493312,"line_start":3391,"line_end":3391,"column_start":5,"column_end":24}}]},{"kind":"Enum","id":{"krate":0,"index":1991},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10490640,"byte_end":10490653,"line_start":3335,"line_end":3335,"column_start":10,"column_end":23},"name":"WlOutputEvent","qualname":"::sys::wayland::client::WlOutputEvent","value":"pub enum WlOutputEvent {\n\n    /// properties of the output\n    ///\n    /// The geometry event describes geometric properties of the output.\n    /// The event is sent when binding to the output object and whenever\n    /// any of the properties change.\n    ///\n    /// Values: x, y, physical_width, physical_height, subpixel, make, model, transform,\n    Geometry(i32, i32, i32, i32, WlOutputSubpixel, String, String,\n             WlOutputTransform),\n\n    /// advertise available modes for the output\n    ///\n    /// The mode event describes an available mode for the output.\n    ///\n    /// The event is sent when binding to the output object and there\n    /// will always be one mode, the current mode.  The event is sent\n    /// again if an output changes mode, for the mode that is now\n    /// current.  In other words, the current mode is always the last\n    /// mode that was received with the current flag set.\n    ///\n    /// The size of a mode is given in physical hardware units of\n    /// the output device. This is not necessarily the same as\n    /// the output size in the global compositor space. For instance,\n    /// the output may be scaled, as described in wl_output.scale,\n    /// or transformed , as described in wl_output.transform.\n    ///\n    /// Values: flags, width, height, refresh,\n    Mode(WlOutputMode::WlOutputMode, i32, i32, i32),\n\n    /// sent all information about output\n    ///\n    /// This event is sent after all other properties has been\n    /// sent after binding to the output object and after any\n    /// other property changes done after that. This allows\n    /// changes to the output properties to be seen as\n    /// atomic, even if they happen via multiple events.\n    Done,\n\n    /// output scaling properties\n    ///\n    /// This event contains scaling geometry information\n    /// that is not in the geometry event. It may be sent after\n    /// binding the output object or if the output scale changes\n    /// later. If it is not sent, the client should assume a\n    /// scale of 1.\n    ///\n    /// A scale larger than 1 means that the compositor will\n    /// automatically scale surface buffers by this amount\n    /// when rendering. This is used for very high resolution\n    /// displays where applications rendering at the native\n    /// resolution would be too small to be legible.\n    ///\n    /// It is intended that scaling aware clients track the\n    /// current output of a surface, and if it is on a scaled\n    /// output it should use wl_surface.set_buffer_scale with\n    /// the scale of the output. That way the compositor can\n    /// avoid scaling the surface, and the client can supply\n    /// a higher detail image.\n    ///\n    /// Values: factor,\n    Scale(i32),\n}","parent":null,"children":[{"krate":0,"index":1992},{"krate":0,"index":2002},{"krate":0,"index":2008},{"krate":0,"index":2010}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":928},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495625,"byte_end":10495633,"line_start":3448,"line_end":3448,"column_start":12,"column_end":20},"name":"WlRegion","qualname":"::sys::wayland::client::WlRegion","value":"WlRegion {  }","parent":null,"children":[{"krate":0,"index":929},{"krate":0,"index":930}],"decl_id":null,"docs":" region interface","sig":null,"attributes":[{"value":"/ region interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495459,"byte_end":10495479,"line_start":3442,"line_end":3442,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495480,"byte_end":10495483,"line_start":3443,"line_end":3443,"column_start":1,"column_end":4}},{"value":"/ A region object describes an area.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495484,"byte_end":10495522,"line_start":3444,"line_end":3444,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495523,"byte_end":10495526,"line_start":3445,"line_end":3445,"column_start":1,"column_end":4}},{"value":"/ Region objects are used to describe the opaque and input","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495527,"byte_end":10495587,"line_start":3446,"line_end":3446,"column_start":1,"column_end":61}},{"value":"/ regions of a surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495588,"byte_end":10495613,"line_start":3447,"line_end":3447,"column_start":1,"column_end":26}}]},{"kind":"Method","id":{"krate":0,"index":948},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497171,"byte_end":10497178,"line_start":3490,"line_end":3490,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlRegion>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" destroy region","sig":null,"attributes":[{"value":"/ destroy region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497068,"byte_end":10497086,"line_start":3487,"line_end":3487,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497091,"byte_end":10497094,"line_start":3488,"line_end":3488,"column_start":5,"column_end":8}},{"value":"/ Destroy the region.  This will invalidate the object ID.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497099,"byte_end":10497159,"line_start":3489,"line_end":3489,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":949},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497501,"byte_end":10497504,"line_start":3499,"line_end":3499,"column_start":12,"column_end":15},"name":"add","qualname":"<WlRegion>::add","value":"pub fn add(&Self, i32, i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" add rectangle to region","sig":null,"attributes":[{"value":"/ add rectangle to region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497403,"byte_end":10497430,"line_start":3496,"line_end":3496,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497435,"byte_end":10497438,"line_start":3497,"line_end":3497,"column_start":5,"column_end":8}},{"value":"/ Add the specified rectangle to the region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497443,"byte_end":10497489,"line_start":3498,"line_end":3498,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":950},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497814,"byte_end":10497822,"line_start":3507,"line_end":3507,"column_start":12,"column_end":20},"name":"subtract","qualname":"<WlRegion>::subtract","value":"pub fn subtract(&Self, i32, i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" subtract rectangle from region","sig":null,"attributes":[{"value":"/ subtract rectangle from region","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497702,"byte_end":10497736,"line_start":3504,"line_end":3504,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497741,"byte_end":10497744,"line_start":3505,"line_end":3505,"column_start":5,"column_end":8}},{"value":"/ Subtract the specified rectangle from the region.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497749,"byte_end":10497802,"line_start":3506,"line_end":3506,"column_start":5,"column_end":58}}]},{"kind":"Struct","id":{"krate":0,"index":953},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499221,"byte_end":10499236,"line_start":3543,"line_end":3543,"column_start":12,"column_end":27},"name":"WlSubcompositor","qualname":"::sys::wayland::client::WlSubcompositor","value":"WlSubcompositor {  }","parent":null,"children":[{"krate":0,"index":954},{"krate":0,"index":955}],"decl_id":null,"docs":" sub-surface compositing","sig":null,"attributes":[{"value":"/ sub-surface compositing","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498204,"byte_end":10498231,"line_start":3522,"line_end":3522,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498232,"byte_end":10498235,"line_start":3523,"line_end":3523,"column_start":1,"column_end":4}},{"value":"/ The global interface exposing sub-surface compositing capabilities.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498236,"byte_end":10498307,"line_start":3524,"line_end":3524,"column_start":1,"column_end":72}},{"value":"/ A wl_surface, that has sub-surfaces associated, is called the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498308,"byte_end":10498373,"line_start":3525,"line_end":3525,"column_start":1,"column_end":66}},{"value":"/ parent surface. Sub-surfaces can be arbitrarily nested and create","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498374,"byte_end":10498443,"line_start":3526,"line_end":3526,"column_start":1,"column_end":70}},{"value":"/ a tree of sub-surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498444,"byte_end":10498471,"line_start":3527,"line_end":3527,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498472,"byte_end":10498475,"line_start":3528,"line_end":3528,"column_start":1,"column_end":4}},{"value":"/ The root surface in a tree of sub-surfaces is the main","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498476,"byte_end":10498534,"line_start":3529,"line_end":3529,"column_start":1,"column_end":59}},{"value":"/ surface. The main surface cannot be a sub-surface, because","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498535,"byte_end":10498597,"line_start":3530,"line_end":3530,"column_start":1,"column_end":63}},{"value":"/ sub-surfaces must always have a parent.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498598,"byte_end":10498641,"line_start":3531,"line_end":3531,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498642,"byte_end":10498645,"line_start":3532,"line_end":3532,"column_start":1,"column_end":4}},{"value":"/ A main surface with its sub-surfaces forms a (compound) window.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498646,"byte_end":10498713,"line_start":3533,"line_end":3533,"column_start":1,"column_end":68}},{"value":"/ For window management purposes, this set of wl_surface objects is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498714,"byte_end":10498783,"line_start":3534,"line_end":3534,"column_start":1,"column_end":70}},{"value":"/ to be considered as a single window, and it should also behave as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498784,"byte_end":10498853,"line_start":3535,"line_end":3535,"column_start":1,"column_end":70}},{"value":"/ such.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498854,"byte_end":10498863,"line_start":3536,"line_end":3536,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498864,"byte_end":10498867,"line_start":3537,"line_end":3537,"column_start":1,"column_end":4}},{"value":"/ The aim of sub-surfaces is to offload some of the compositing work","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498868,"byte_end":10498938,"line_start":3538,"line_end":3538,"column_start":1,"column_end":71}},{"value":"/ within a window from clients to the compositor. A prime example is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498939,"byte_end":10499009,"line_start":3539,"line_end":3539,"column_start":1,"column_end":71}},{"value":"/ a video player with decorations and video in separate wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499010,"byte_end":10499078,"line_start":3540,"line_end":3540,"column_start":1,"column_end":69}},{"value":"/ objects. This should allow the compositor to pass YUV video buffer","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499079,"byte_end":10499149,"line_start":3541,"line_end":3541,"column_start":1,"column_end":71}},{"value":"/ processing to dedicated overlay hardware when possible.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499150,"byte_end":10499209,"line_start":3542,"line_end":3542,"column_start":1,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":973},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501331,"byte_end":10501338,"line_start":3601,"line_end":3601,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlSubcompositor>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" unbind from the subcompositor interface","sig":null,"attributes":[{"value":"/ unbind from the subcompositor interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501089,"byte_end":10501132,"line_start":3596,"line_end":3596,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501137,"byte_end":10501140,"line_start":3597,"line_end":3597,"column_start":5,"column_end":8}},{"value":"/ Informs the server that the client will not be using this","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501145,"byte_end":10501206,"line_start":3598,"line_end":3598,"column_start":5,"column_end":66}},{"value":"/ protocol object anymore. This does not affect any other","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501211,"byte_end":10501270,"line_start":3599,"line_end":3599,"column_start":5,"column_end":64}},{"value":"/ objects, wl_subsurface objects included.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501275,"byte_end":10501319,"line_start":3600,"line_end":3600,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501988,"byte_end":10502002,"line_start":3616,"line_end":3616,"column_start":12,"column_end":26},"name":"get_subsurface","qualname":"<WlSubcompositor>::get_subsurface","value":"pub fn get_subsurface(&Self, &WlSurface, &WlSurface) -> WlSubsurface","parent":null,"children":[],"decl_id":null,"docs":" give a surface the role sub-surface","sig":null,"attributes":[{"value":"/ give a surface the role sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501570,"byte_end":10501609,"line_start":3607,"line_end":3607,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501614,"byte_end":10501617,"line_start":3608,"line_end":3608,"column_start":5,"column_end":8}},{"value":"/ Create a sub-surface interface for the given surface, and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501622,"byte_end":10501683,"line_start":3609,"line_end":3609,"column_start":5,"column_end":66}},{"value":"/ associate it with the given parent surface. This turns a","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501688,"byte_end":10501748,"line_start":3610,"line_end":3610,"column_start":5,"column_end":65}},{"value":"/ plain wl_surface into a sub-surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501753,"byte_end":10501793,"line_start":3611,"line_end":3611,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501798,"byte_end":10501801,"line_start":3612,"line_end":3612,"column_start":5,"column_end":8}},{"value":"/ The to-be sub-surface must not already have another role, and it","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501806,"byte_end":10501874,"line_start":3613,"line_end":3613,"column_start":5,"column_end":73}},{"value":"/ must not have an existing wl_subsurface object. Otherwise a protocol","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501879,"byte_end":10501951,"line_start":3614,"line_end":3614,"column_start":5,"column_end":77}},{"value":"/ error is raised.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501956,"byte_end":10501976,"line_start":3615,"line_end":3615,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":977},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505533,"byte_end":10505545,"line_start":3687,"line_end":3687,"column_start":12,"column_end":24},"name":"WlSubsurface","qualname":"::sys::wayland::client::WlSubsurface","value":"WlSubsurface {  }","parent":null,"children":[{"krate":0,"index":978},{"krate":0,"index":979}],"decl_id":null,"docs":" sub-surface interface to a wl_surface","sig":null,"attributes":[{"value":"/ sub-surface interface to a wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502788,"byte_end":10502829,"line_start":3636,"line_end":3636,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502830,"byte_end":10502833,"line_start":3637,"line_end":3637,"column_start":1,"column_end":4}},{"value":"/ An additional interface to a wl_surface object, which has been","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502834,"byte_end":10502900,"line_start":3638,"line_end":3638,"column_start":1,"column_end":67}},{"value":"/ made a sub-surface. A sub-surface has one parent surface. A","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502901,"byte_end":10502964,"line_start":3639,"line_end":3639,"column_start":1,"column_end":64}},{"value":"/ sub-surface's size and position are not limited to that of the parent.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502965,"byte_end":10503039,"line_start":3640,"line_end":3640,"column_start":1,"column_end":75}},{"value":"/ Particularly, a sub-surface is not automatically clipped to its","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503040,"byte_end":10503107,"line_start":3641,"line_end":3641,"column_start":1,"column_end":68}},{"value":"/ parent's area.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503108,"byte_end":10503126,"line_start":3642,"line_end":3642,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503127,"byte_end":10503130,"line_start":3643,"line_end":3643,"column_start":1,"column_end":4}},{"value":"/ A sub-surface becomes mapped, when a non-NULL wl_buffer is applied","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503131,"byte_end":10503201,"line_start":3644,"line_end":3644,"column_start":1,"column_end":71}},{"value":"/ and the parent surface is mapped. The order of which one happens","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503202,"byte_end":10503270,"line_start":3645,"line_end":3645,"column_start":1,"column_end":69}},{"value":"/ first is irrelevant. A sub-surface is hidden if the parent becomes","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503271,"byte_end":10503341,"line_start":3646,"line_end":3646,"column_start":1,"column_end":71}},{"value":"/ hidden, or if a NULL wl_buffer is applied. These rules apply","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503342,"byte_end":10503406,"line_start":3647,"line_end":3647,"column_start":1,"column_end":65}},{"value":"/ recursively through the tree of surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503407,"byte_end":10503452,"line_start":3648,"line_end":3648,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503453,"byte_end":10503456,"line_start":3649,"line_end":3649,"column_start":1,"column_end":4}},{"value":"/ The behaviour of wl_surface.commit request on a sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503457,"byte_end":10503520,"line_start":3650,"line_end":3650,"column_start":1,"column_end":64}},{"value":"/ depends on the sub-surface's mode. The possible modes are","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503521,"byte_end":10503582,"line_start":3651,"line_end":3651,"column_start":1,"column_end":62}},{"value":"/ synchronized and desynchronized, see methods","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503583,"byte_end":10503631,"line_start":3652,"line_end":3652,"column_start":1,"column_end":49}},{"value":"/ wl_subsurface.set_sync and wl_subsurface.set_desync. Synchronized","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503632,"byte_end":10503701,"line_start":3653,"line_end":3653,"column_start":1,"column_end":70}},{"value":"/ mode caches the wl_surface state to be applied when the parent's","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503702,"byte_end":10503770,"line_start":3654,"line_end":3654,"column_start":1,"column_end":69}},{"value":"/ state gets applied, and desynchronized mode applies the pending","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503771,"byte_end":10503838,"line_start":3655,"line_end":3655,"column_start":1,"column_end":68}},{"value":"/ wl_surface state directly. A sub-surface is initially in the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503839,"byte_end":10503903,"line_start":3656,"line_end":3656,"column_start":1,"column_end":65}},{"value":"/ synchronized mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503904,"byte_end":10503926,"line_start":3657,"line_end":3657,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503927,"byte_end":10503930,"line_start":3658,"line_end":3658,"column_start":1,"column_end":4}},{"value":"/ Sub-surfaces have also other kind of state, which is managed by","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503931,"byte_end":10503998,"line_start":3659,"line_end":3659,"column_start":1,"column_end":68}},{"value":"/ wl_subsurface requests, as opposed to wl_surface requests. This","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10503999,"byte_end":10504066,"line_start":3660,"line_end":3660,"column_start":1,"column_end":68}},{"value":"/ state includes the sub-surface position relative to the parent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504067,"byte_end":10504133,"line_start":3661,"line_end":3661,"column_start":1,"column_end":67}},{"value":"/ surface (wl_subsurface.set_position), and the stacking order of","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504134,"byte_end":10504201,"line_start":3662,"line_end":3662,"column_start":1,"column_end":68}},{"value":"/ the parent and its sub-surfaces (wl_subsurface.place_above and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504202,"byte_end":10504268,"line_start":3663,"line_end":3663,"column_start":1,"column_end":67}},{"value":"/ .place_below). This state is applied when the parent surface's","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504269,"byte_end":10504335,"line_start":3664,"line_end":3664,"column_start":1,"column_end":67}},{"value":"/ wl_surface state is applied, regardless of the sub-surface's mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504336,"byte_end":10504406,"line_start":3665,"line_end":3665,"column_start":1,"column_end":71}},{"value":"/ As the exception, set_sync and set_desync are effective immediately.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504407,"byte_end":10504479,"line_start":3666,"line_end":3666,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504480,"byte_end":10504483,"line_start":3667,"line_end":3667,"column_start":1,"column_end":4}},{"value":"/ The main surface can be thought to be always in desynchronized mode,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504484,"byte_end":10504556,"line_start":3668,"line_end":3668,"column_start":1,"column_end":73}},{"value":"/ since it does not have a parent in the sub-surfaces sense.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504557,"byte_end":10504619,"line_start":3669,"line_end":3669,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504620,"byte_end":10504623,"line_start":3670,"line_end":3670,"column_start":1,"column_end":4}},{"value":"/ Even if a sub-surface is in desynchronized mode, it will behave as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504624,"byte_end":10504694,"line_start":3671,"line_end":3671,"column_start":1,"column_end":71}},{"value":"/ in synchronized mode, if its parent surface behaves as in","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504695,"byte_end":10504756,"line_start":3672,"line_end":3672,"column_start":1,"column_end":62}},{"value":"/ synchronized mode. This rule is applied recursively throughout the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504757,"byte_end":10504827,"line_start":3673,"line_end":3673,"column_start":1,"column_end":71}},{"value":"/ tree of surfaces. This means, that one can set a sub-surface into","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504828,"byte_end":10504897,"line_start":3674,"line_end":3674,"column_start":1,"column_end":70}},{"value":"/ synchronized mode, and then assume that all its child and grand-child","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504898,"byte_end":10504971,"line_start":3675,"line_end":3675,"column_start":1,"column_end":74}},{"value":"/ sub-surfaces are synchronized, too, without explicitly setting them.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10504972,"byte_end":10505044,"line_start":3676,"line_end":3676,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505045,"byte_end":10505048,"line_start":3677,"line_end":3677,"column_start":1,"column_end":4}},{"value":"/ If the wl_surface associated with the wl_subsurface is destroyed, the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505049,"byte_end":10505122,"line_start":3678,"line_end":3678,"column_start":1,"column_end":74}},{"value":"/ wl_subsurface object becomes inert. Note, that destroying either object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505123,"byte_end":10505198,"line_start":3679,"line_end":3679,"column_start":1,"column_end":76}},{"value":"/ takes effect immediately. If you need to synchronize the removal","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505199,"byte_end":10505267,"line_start":3680,"line_end":3680,"column_start":1,"column_end":69}},{"value":"/ of a sub-surface to the parent surface update, unmap the sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505268,"byte_end":10505340,"line_start":3681,"line_end":3681,"column_start":1,"column_end":73}},{"value":"/ first by attaching a NULL wl_buffer, update parent, and then destroy","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505341,"byte_end":10505413,"line_start":3682,"line_end":3682,"column_start":1,"column_end":73}},{"value":"/ the sub-surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505414,"byte_end":10505434,"line_start":3683,"line_end":3683,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505435,"byte_end":10505438,"line_start":3684,"line_end":3684,"column_start":1,"column_end":4}},{"value":"/ If the parent wl_surface object is destroyed, the sub-surface is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505439,"byte_end":10505507,"line_start":3685,"line_end":3685,"column_start":1,"column_end":69}},{"value":"/ unmapped.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505508,"byte_end":10505521,"line_start":3686,"line_end":3686,"column_start":1,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507884,"byte_end":10507891,"line_start":3751,"line_end":3751,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlSubsurface>::destroy","value":"pub fn destroy(Self)","parent":null,"children":[],"decl_id":null,"docs":" remove sub-surface interface","sig":null,"attributes":[{"value":"/ remove sub-surface interface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507512,"byte_end":10507544,"line_start":3744,"line_end":3744,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507549,"byte_end":10507552,"line_start":3745,"line_end":3745,"column_start":5,"column_end":8}},{"value":"/ The sub-surface interface is removed from the wl_surface object","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507557,"byte_end":10507624,"line_start":3746,"line_end":3746,"column_start":5,"column_end":72}},{"value":"/ that was turned into a sub-surface with","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507629,"byte_end":10507672,"line_start":3747,"line_end":3747,"column_start":5,"column_end":48}},{"value":"/ wl_subcompositor.get_subsurface request. The wl_surface's association","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507677,"byte_end":10507750,"line_start":3748,"line_end":3748,"column_start":5,"column_end":78}},{"value":"/ to the parent is deleted, and the wl_surface loses its role as","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507755,"byte_end":10507821,"line_start":3749,"line_end":3749,"column_start":5,"column_end":71}},{"value":"/ a sub-surface. The wl_surface is unmapped.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507826,"byte_end":10507872,"line_start":3750,"line_end":3750,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509063,"byte_end":10509075,"line_start":3775,"line_end":3775,"column_start":12,"column_end":24},"name":"set_position","qualname":"<WlSubsurface>::set_position","value":"pub fn set_position(&Self, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":" reposition the sub-surface","sig":null,"attributes":[{"value":"/ reposition the sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508120,"byte_end":10508150,"line_start":3757,"line_end":3757,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508155,"byte_end":10508158,"line_start":3758,"line_end":3758,"column_start":5,"column_end":8}},{"value":"/ This schedules a sub-surface position change.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508163,"byte_end":10508212,"line_start":3759,"line_end":3759,"column_start":5,"column_end":54}},{"value":"/ The sub-surface will be moved so, that its origin (top-left","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508217,"byte_end":10508280,"line_start":3760,"line_end":3760,"column_start":5,"column_end":68}},{"value":"/ corner pixel) will be at the location x, y of the parent surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508285,"byte_end":10508353,"line_start":3761,"line_end":3761,"column_start":5,"column_end":73}},{"value":"/ coordinate system. The coordinates are not restricted to the parent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508358,"byte_end":10508429,"line_start":3762,"line_end":3762,"column_start":5,"column_end":76}},{"value":"/ surface area. Negative values are allowed.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508434,"byte_end":10508480,"line_start":3763,"line_end":3763,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508485,"byte_end":10508488,"line_start":3764,"line_end":3764,"column_start":5,"column_end":8}},{"value":"/ The scheduled coordinates will take effect whenever the state of the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508493,"byte_end":10508565,"line_start":3765,"line_end":3765,"column_start":5,"column_end":77}},{"value":"/ parent surface is applied. When this happens depends on whether the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508570,"byte_end":10508641,"line_start":3766,"line_end":3766,"column_start":5,"column_end":76}},{"value":"/ parent surface is in synchronized mode or not. See","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508646,"byte_end":10508700,"line_start":3767,"line_end":3767,"column_start":5,"column_end":59}},{"value":"/ wl_subsurface.set_sync and wl_subsurface.set_desync for details.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508705,"byte_end":10508773,"line_start":3768,"line_end":3768,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508778,"byte_end":10508781,"line_start":3769,"line_end":3769,"column_start":5,"column_end":8}},{"value":"/ If more than one set_position request is invoked by the client before","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508786,"byte_end":10508859,"line_start":3770,"line_end":3770,"column_start":5,"column_end":78}},{"value":"/ the commit of the parent surface, the position of a new request always","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508864,"byte_end":10508938,"line_start":3771,"line_end":3771,"column_start":5,"column_end":79}},{"value":"/ replaces the scheduled position from any previous request.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10508943,"byte_end":10509005,"line_start":3772,"line_end":3772,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509010,"byte_end":10509013,"line_start":3773,"line_end":3773,"column_start":5,"column_end":8}},{"value":"/ The initial position is 0, 0.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509018,"byte_end":10509051,"line_start":3774,"line_end":3774,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510177,"byte_end":10510188,"line_start":3797,"line_end":3797,"column_start":12,"column_end":23},"name":"place_above","qualname":"<WlSubsurface>::place_above","value":"pub fn place_above(&Self, &WlSurface)","parent":null,"children":[],"decl_id":null,"docs":" restack the sub-surface","sig":null,"attributes":[{"value":"/ restack the sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509246,"byte_end":10509273,"line_start":3780,"line_end":3780,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509278,"byte_end":10509281,"line_start":3781,"line_end":3781,"column_start":5,"column_end":8}},{"value":"/ This sub-surface is taken from the stack, and put back just","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509286,"byte_end":10509349,"line_start":3782,"line_end":3782,"column_start":5,"column_end":68}},{"value":"/ above the reference surface, changing the z-order of the sub-surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509354,"byte_end":10509428,"line_start":3783,"line_end":3783,"column_start":5,"column_end":79}},{"value":"/ The reference surface must be one of the sibling surfaces, or the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509433,"byte_end":10509502,"line_start":3784,"line_end":3784,"column_start":5,"column_end":74}},{"value":"/ parent surface. Using any other surface, including this sub-surface,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509507,"byte_end":10509579,"line_start":3785,"line_end":3785,"column_start":5,"column_end":77}},{"value":"/ will cause a protocol error.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509584,"byte_end":10509616,"line_start":3786,"line_end":3786,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509621,"byte_end":10509624,"line_start":3787,"line_end":3787,"column_start":5,"column_end":8}},{"value":"/ The z-order is double-buffered. Requests are handled in order and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509629,"byte_end":10509698,"line_start":3788,"line_end":3788,"column_start":5,"column_end":74}},{"value":"/ applied immediately to a pending state. The final pending state is","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509703,"byte_end":10509773,"line_start":3789,"line_end":3789,"column_start":5,"column_end":75}},{"value":"/ copied to the active state the next time the state of the parent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509778,"byte_end":10509846,"line_start":3790,"line_end":3790,"column_start":5,"column_end":73}},{"value":"/ surface is applied. When this happens depends on whether the parent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509851,"byte_end":10509922,"line_start":3791,"line_end":3791,"column_start":5,"column_end":76}},{"value":"/ surface is in synchronized mode or not. See wl_subsurface.set_sync and","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10509927,"byte_end":10510001,"line_start":3792,"line_end":3792,"column_start":5,"column_end":79}},{"value":"/ wl_subsurface.set_desync for details.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510006,"byte_end":10510047,"line_start":3793,"line_end":3793,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510052,"byte_end":10510055,"line_start":3794,"line_end":3794,"column_start":5,"column_end":8}},{"value":"/ A new sub-surface is initially added as the top-most in the stack","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510060,"byte_end":10510129,"line_start":3795,"line_end":3795,"column_start":5,"column_end":74}},{"value":"/ of its siblings and parent.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510134,"byte_end":10510165,"line_start":3796,"line_end":3796,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":1004},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510529,"byte_end":10510540,"line_start":3806,"line_end":3806,"column_start":12,"column_end":23},"name":"place_below","qualname":"<WlSubsurface>::place_below","value":"pub fn place_below(&Self, &WlSurface)","parent":null,"children":[],"decl_id":null,"docs":" restack the sub-surface","sig":null,"attributes":[{"value":"/ restack the sub-surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510372,"byte_end":10510399,"line_start":3802,"line_end":3802,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510404,"byte_end":10510407,"line_start":3803,"line_end":3803,"column_start":5,"column_end":8}},{"value":"/ The sub-surface is placed just below of the reference surface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510412,"byte_end":10510478,"line_start":3804,"line_end":3804,"column_start":5,"column_end":71}},{"value":"/ See wl_subsurface.place_above.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510483,"byte_end":10510517,"line_start":3805,"line_end":3805,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":1005},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511548,"byte_end":10511556,"line_start":3826,"line_end":3826,"column_start":12,"column_end":20},"name":"set_sync","qualname":"<WlSubsurface>::set_sync","value":"pub fn set_sync(&Self)","parent":null,"children":[],"decl_id":null,"docs":" set sub-surface to synchronized mode","sig":null,"attributes":[{"value":"/ set sub-surface to synchronized mode","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510724,"byte_end":10510764,"line_start":3811,"line_end":3811,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510769,"byte_end":10510772,"line_start":3812,"line_end":3812,"column_start":5,"column_end":8}},{"value":"/ Change the commit behaviour of the sub-surface to synchronized","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510777,"byte_end":10510843,"line_start":3813,"line_end":3813,"column_start":5,"column_end":71}},{"value":"/ mode, also described as the parent dependent mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510848,"byte_end":10510902,"line_start":3814,"line_end":3814,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510907,"byte_end":10510910,"line_start":3815,"line_end":3815,"column_start":5,"column_end":8}},{"value":"/ In synchronized mode, wl_surface.commit on a sub-surface will","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510915,"byte_end":10510980,"line_start":3816,"line_end":3816,"column_start":5,"column_end":70}},{"value":"/ accumulate the committed state in a cache, but the state will","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10510985,"byte_end":10511050,"line_start":3817,"line_end":3817,"column_start":5,"column_end":70}},{"value":"/ not be applied and hence will not change the compositor output.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511055,"byte_end":10511122,"line_start":3818,"line_end":3818,"column_start":5,"column_end":72}},{"value":"/ The cached state is applied to the sub-surface immediately after","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511127,"byte_end":10511195,"line_start":3819,"line_end":3819,"column_start":5,"column_end":73}},{"value":"/ the parent surface's state is applied. This ensures atomic","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511200,"byte_end":10511262,"line_start":3820,"line_end":3820,"column_start":5,"column_end":67}},{"value":"/ updates of the parent and all its synchronized sub-surfaces.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511267,"byte_end":10511331,"line_start":3821,"line_end":3821,"column_start":5,"column_end":69}},{"value":"/ Applying the cached state will invalidate the cache, so further","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511336,"byte_end":10511403,"line_start":3822,"line_end":3822,"column_start":5,"column_end":72}},{"value":"/ parent surface commits do not (re-)apply old state.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511408,"byte_end":10511463,"line_start":3823,"line_end":3823,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511468,"byte_end":10511471,"line_start":3824,"line_end":3824,"column_start":5,"column_end":8}},{"value":"/ See wl_subsurface for the recursive effect of this mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511476,"byte_end":10511536,"line_start":3825,"line_end":3825,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":1006},"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512785,"byte_end":10512795,"line_start":3852,"line_end":3852,"column_start":12,"column_end":22},"name":"set_desync","qualname":"<WlSubsurface>::set_desync","value":"pub fn set_desync(&Self)","parent":null,"children":[],"decl_id":null,"docs":" set sub-surface to desynchronized mode","sig":null,"attributes":[{"value":"/ set sub-surface to desynchronized mode","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511701,"byte_end":10511743,"line_start":3831,"line_end":3831,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511748,"byte_end":10511751,"line_start":3832,"line_end":3832,"column_start":5,"column_end":8}},{"value":"/ Change the commit behaviour of the sub-surface to desynchronized","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511756,"byte_end":10511824,"line_start":3833,"line_end":3833,"column_start":5,"column_end":73}},{"value":"/ mode, also described as independent or freely running mode.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511829,"byte_end":10511892,"line_start":3834,"line_end":3834,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511897,"byte_end":10511900,"line_start":3835,"line_end":3835,"column_start":5,"column_end":8}},{"value":"/ In desynchronized mode, wl_surface.commit on a sub-surface will","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511905,"byte_end":10511972,"line_start":3836,"line_end":3836,"column_start":5,"column_end":72}},{"value":"/ apply the pending state directly, without caching, as happens","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10511977,"byte_end":10512042,"line_start":3837,"line_end":3837,"column_start":5,"column_end":70}},{"value":"/ normally with a wl_surface. Calling wl_surface.commit on the","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512047,"byte_end":10512111,"line_start":3838,"line_end":3838,"column_start":5,"column_end":69}},{"value":"/ parent surface has no effect on the sub-surface's wl_surface","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512116,"byte_end":10512180,"line_start":3839,"line_end":3839,"column_start":5,"column_end":69}},{"value":"/ state. This mode allows a sub-surface to be updated on its own.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512185,"byte_end":10512252,"line_start":3840,"line_end":3840,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512257,"byte_end":10512260,"line_start":3841,"line_end":3841,"column_start":5,"column_end":8}},{"value":"/ If cached state exists when wl_surface.commit is called in","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512265,"byte_end":10512327,"line_start":3842,"line_end":3842,"column_start":5,"column_end":67}},{"value":"/ desynchronized mode, the pending state is added to the cached","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512332,"byte_end":10512397,"line_start":3843,"line_end":3843,"column_start":5,"column_end":70}},{"value":"/ state, and applied as whole. This invalidates the cache.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512402,"byte_end":10512462,"line_start":3844,"line_end":3844,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512467,"byte_end":10512470,"line_start":3845,"line_end":3845,"column_start":5,"column_end":8}},{"value":"/ Note: even if a sub-surface is set to desynchronized, a parent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512475,"byte_end":10512541,"line_start":3846,"line_end":3846,"column_start":5,"column_end":71}},{"value":"/ sub-surface may override it to behave as synchronized. For details,","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512546,"byte_end":10512617,"line_start":3847,"line_end":3847,"column_start":5,"column_end":76}},{"value":"/ see wl_subsurface.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512622,"byte_end":10512644,"line_start":3848,"line_end":3848,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512649,"byte_end":10512652,"line_start":3849,"line_end":3849,"column_start":5,"column_end":8}},{"value":"/ If a surface's parent surface behaves as desynchronized, then","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512657,"byte_end":10512722,"line_start":3850,"line_end":3850,"column_start":5,"column_end":70}},{"value":"/ the cached state is applied on set_desync.","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512727,"byte_end":10512773,"line_start":3851,"line_end":3851,"column_start":5,"column_end":51}}]},{"kind":"Mod","id":{"krate":0,"index":32},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"egl","qualname":"::egl","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"egl\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":169,"byte_end":192,"line_start":11,"line_end":11,"column_start":1,"column_end":24}}]},{"kind":"Function","id":{"krate":0,"index":38},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10255,"byte_end":10267,"line_start":12,"line_end":12,"column_start":8,"column_end":20},"name":"is_available","qualname":"::egl::is_available","value":"pub fn is_available() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the wayland-egl lib is available and can be used","sig":null,"attributes":[{"value":"/ Checks if the wayland-egl lib is available and can be used","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10078,"byte_end":10140,"line_start":8,"line_end":8,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10141,"byte_end":10144,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ Trying to create an `WlEglSurface` while this function returns","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10145,"byte_end":10211,"line_start":10,"line_end":10,"column_start":1,"column_end":67}},{"value":"/ `false` will result in a panic.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10212,"byte_end":10247,"line_start":11,"line_end":11,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":41},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10392,"byte_end":10404,"line_start":19,"line_end":19,"column_start":12,"column_end":24},"name":"WlEglSurface","qualname":"::egl::WlEglSurface","value":"WlEglSurface {  }","parent":null,"children":[{"krate":0,"index":42},{"krate":0,"index":43}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10493,"byte_end":10496,"line_start":25,"line_end":25,"column_start":12,"column_end":15},"name":"new","qualname":"<WlEglSurface>::new","value":"pub fn new(WlSurface, i32, i32) -> WlEglSurface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10790,"byte_end":10797,"line_start":34,"line_end":34,"column_start":12,"column_end":19},"name":"destroy","qualname":"<WlEglSurface>::destroy","value":"pub fn destroy(Self) -> WlSurface","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11080,"byte_end":11088,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"get_size","qualname":"<WlEglSurface>::get_size","value":"pub fn get_size(&Self) -> (i32, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11346,"byte_end":11352,"line_start":49,"line_end":49,"column_start":12,"column_end":18},"name":"resize","qualname":"<WlEglSurface>::resize","value":"pub fn resize(&Self, i32, i32, i32, i32)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11543,"byte_end":11558,"line_start":54,"line_end":54,"column_start":12,"column_end":27},"name":"egl_surface_ptr","qualname":"<WlEglSurface>::egl_surface_ptr","value":"pub fn egl_surface_ptr(&Self) -> *const c_void","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11663,"byte_end":11677,"line_start":59,"line_end":59,"column_start":19,"column_end":33},"name":"egl_surfaceptr","qualname":"<WlEglSurface>::egl_surfaceptr","value":"pub unsafe fn egl_surfaceptr(&Self) -> *mut c_void","parent":null,"children":[],"decl_id":null,"docs":" DEPRECATED\n","sig":null,"attributes":[{"value":"/ DEPRECATED","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11630,"byte_end":11644,"line_start":58,"line_end":58,"column_start":5,"column_end":19}}]},{"kind":"Mod","id":{"krate":0,"index":56},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cursor","qualname":"::cursor","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","parent":null,"children":[{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":2118},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":67},{"krate":0,"index":68},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":76},{"krate":0,"index":78},{"krate":0,"index":82},{"krate":0,"index":90},{"krate":0,"index":94},{"krate":0,"index":98}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"cursor\")","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":207,"byte_end":233,"line_start":14,"line_end":14,"column_start":1,"column_end":27}}]},{"kind":"Function","id":{"krate":0,"index":69},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12397,"byte_end":12409,"line_start":16,"line_end":16,"column_start":8,"column_end":20},"name":"is_available","qualname":"::cursor::is_available","value":"pub fn is_available() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the wayland-cursor lib is available and can be used","sig":null,"attributes":[{"value":"/ Checks if the wayland-cursor lib is available and can be used","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12219,"byte_end":12284,"line_start":12,"line_end":12,"column_start":1,"column_end":66}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12285,"byte_end":12288,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ Trying to call any function of this module if the lib cannot","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12289,"byte_end":12353,"line_start":14,"line_end":14,"column_start":1,"column_end":65}},{"value":"/ be used will result in a panic.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12354,"byte_end":12389,"line_start":15,"line_end":15,"column_start":1,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":70},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12513,"byte_end":12524,"line_start":21,"line_end":21,"column_start":12,"column_end":23},"name":"CursorTheme","qualname":"::cursor::CursorTheme","value":"CursorTheme {  }","parent":null,"children":[{"krate":0,"index":71}],"decl_id":null,"docs":" Represents a cursor theme loaded from the system.\n","sig":null,"attributes":[{"value":"/ Represents a cursor theme loaded from the system.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12448,"byte_end":12501,"line_start":20,"line_end":20,"column_start":1,"column_end":54}}]},{"kind":"Function","id":{"krate":0,"index":73},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13164,"byte_end":13174,"line_start":42,"line_end":42,"column_start":8,"column_end":18},"name":"load_theme","qualname":"::cursor::load_theme","value":"pub fn load_theme(Option<&str>, u32, &WlShm) -> CursorTheme","parent":null,"children":[],"decl_id":null,"docs":" Attempts to load a cursor theme from given name.","sig":null,"attributes":[{"value":"/ Attempts to load a cursor theme from given name.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12641,"byte_end":12693,"line_start":28,"line_end":28,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12694,"byte_end":12697,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ If no name is given or the requested theme is not found, will","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12698,"byte_end":12763,"line_start":30,"line_end":30,"column_start":1,"column_end":66}},{"value":"/ load the default theme.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12764,"byte_end":12791,"line_start":31,"line_end":31,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12792,"byte_end":12795,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Other arguments are the requested size for the cursor images (ex: 16)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12796,"byte_end":12869,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ and a handle to the global `WlShm` object.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12870,"byte_end":12916,"line_start":34,"line_end":34,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12917,"byte_end":12920,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ Panics:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12921,"byte_end":12932,"line_start":36,"line_end":36,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12933,"byte_end":12936,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ - If the `wayland-cursor` lib is not available (see `is_available()` function)","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12937,"byte_end":13019,"line_start":38,"line_end":38,"column_start":1,"column_end":83}},{"value":"/   in this module.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13020,"byte_end":13041,"line_start":39,"line_end":39,"column_start":1,"column_end":22}},{"value":"/ - In case of memory allocation failure.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13042,"byte_end":13085,"line_start":40,"line_end":40,"column_start":1,"column_end":44}},{"value":"/ - If the theme name provided as argument contains an interior null","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13086,"byte_end":13156,"line_start":41,"line_end":41,"column_start":1,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":75},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14002,"byte_end":14012,"line_start":67,"line_end":67,"column_start":12,"column_end":22},"name":"get_cursor","qualname":"<CursorTheme>::get_cursor","value":"pub fn get_cursor(&Self, &str) -> Option<Cursor>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a cursor from the theme.","sig":null,"attributes":[{"value":"/ Retrieve a cursor from the theme.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13815,"byte_end":13852,"line_start":62,"line_end":62,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13857,"byte_end":13860,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this cursor is not provided by the theme.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13865,"byte_end":13928,"line_start":64,"line_end":64,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13933,"byte_end":13936,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ Panics if the name contains an interior null.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13941,"byte_end":13990,"line_start":66,"line_end":66,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":78},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14723,"byte_end":14729,"line_start":92,"line_end":92,"column_start":12,"column_end":18},"name":"Cursor","qualname":"::cursor::Cursor","value":"Cursor {  }","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81}],"decl_id":null,"docs":" A cursor from a theme. Can contain several images if animated.\n","sig":null,"attributes":[{"value":"/ A cursor from a theme. Can contain several images if animated.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14645,"byte_end":14711,"line_start":91,"line_end":91,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14883,"byte_end":14887,"line_start":99,"line_end":99,"column_start":12,"column_end":16},"name":"name","qualname":"<Cursor>::name","value":"pub fn name(&Self) -> String","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the name of this cursor.\n","sig":null,"attributes":[{"value":"/ Retrieve the name of this cursor.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14834,"byte_end":14871,"line_start":98,"line_end":98,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15116,"byte_end":15127,"line_start":106,"line_end":106,"column_start":12,"column_end":23},"name":"image_count","qualname":"<Cursor>::image_count","value":"pub fn image_count(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the number of images contained in this\n animated cursor\n","sig":null,"attributes":[{"value":"/ Retrieve the number of images contained in this","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15029,"byte_end":15080,"line_start":104,"line_end":104,"column_start":5,"column_end":56}},{"value":"/ animated cursor","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15085,"byte_end":15104,"line_start":105,"line_end":105,"column_start":5,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15484,"byte_end":15489,"line_start":116,"line_end":116,"column_start":12,"column_end":17},"name":"frame","qualname":"<Cursor>::frame","value":"pub fn frame(&Self, u32) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the image number of cursor animation.","sig":null,"attributes":[{"value":"/ Retrieve the image number of cursor animation.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15239,"byte_end":15289,"line_start":111,"line_end":111,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15294,"byte_end":15297,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Returns the image number of the animation that should be displayed","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15302,"byte_end":15372,"line_start":113,"line_end":113,"column_start":5,"column_end":75}},{"value":"/ after a given amount of time since the beginning of the animation,","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15377,"byte_end":15447,"line_start":114,"line_end":114,"column_start":5,"column_end":75}},{"value":"/ in milliseconds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15452,"byte_end":15472,"line_start":115,"line_end":115,"column_start":5,"column_end":25}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15870,"byte_end":15888,"line_start":127,"line_end":127,"column_start":12,"column_end":30},"name":"frame_and_duration","qualname":"<Cursor>::frame_and_duration","value":"pub fn frame_and_duration(&Self, u32) -> (usize, u32)","parent":null,"children":[],"decl_id":null,"docs":" Retrieve the image number and its duration.","sig":null,"attributes":[{"value":"/ Retrieve the image number and its duration.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15686,"byte_end":15733,"line_start":123,"line_end":123,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15738,"byte_end":15741,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Same as `frame()`, but also returns the number of milliseconds this","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15746,"byte_end":15817,"line_start":125,"line_end":125,"column_start":5,"column_end":76}},{"value":"/ frame should still be displayed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":15822,"byte_end":15858,"line_start":126,"line_end":126,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16441,"byte_end":16453,"line_start":141,"line_end":141,"column_start":12,"column_end":24},"name":"frame_buffer","qualname":"<Cursor>::frame_buffer","value":"pub fn frame_buffer(&Self, usize) -> Option<CursorImageBuffer>","parent":null,"children":[],"decl_id":null,"docs":" Retrieve a `CursorImageBuffer` containing the given image of an animation.","sig":null,"attributes":[{"value":"/ Retrieve a `CursorImageBuffer` containing the given image of an animation.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16205,"byte_end":16283,"line_start":136,"line_end":136,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16288,"byte_end":16291,"line_start":137,"line_end":137,"column_start":5,"column_end":8}},{"value":"/ It can be used to be attached to a surface as a classic `WlBuffer`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16296,"byte_end":16367,"line_start":138,"line_end":138,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16372,"byte_end":16375,"line_start":139,"line_end":139,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the frame is out of bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16380,"byte_end":16429,"line_start":140,"line_end":140,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17202,"byte_end":17212,"line_start":161,"line_end":161,"column_start":12,"column_end":22},"name":"frame_info","qualname":"<Cursor>::frame_info","value":"pub fn frame_info(&Self, usize) -> Option<(u32, u32, u32, u32, u32)>","parent":null,"children":[],"decl_id":null,"docs":" Retrive the metadate associated with given frame of the animation.","sig":null,"attributes":[{"value":"/ Retrive the metadate associated with given frame of the animation.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":16975,"byte_end":17045,"line_start":156,"line_end":156,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17050,"byte_end":17053,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ The tuple contains: `(width, height, hotspot_x, hotspot_y, delay)`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17058,"byte_end":17128,"line_start":158,"line_end":158,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17133,"byte_end":17136,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if the frame is out of bounds.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17141,"byte_end":17190,"line_start":160,"line_end":160,"column_start":5,"column_end":54}}]},{"kind":"Struct","id":{"krate":0,"index":90},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17595,"byte_end":17612,"line_start":172,"line_end":172,"column_start":12,"column_end":29},"name":"CursorImageBuffer","qualname":"::cursor::CursorImageBuffer","value":"CursorImageBuffer {  }","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" A buffer containing a cursor image.\n","sig":null,"attributes":[{"value":"/ A buffer containing a cursor image.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17544,"byte_end":17583,"line_start":171,"line_end":171,"column_start":1,"column_end":40}}]},{"kind":"Mod","id":{"krate":0,"index":101},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wayland","qualname":"::wayland","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":111},{"krate":0,"index":121},{"krate":0,"index":128},{"krate":0,"index":145},{"krate":0,"index":154},{"krate":0,"index":163},{"krate":0,"index":167},{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172},{"krate":0,"index":173},{"krate":0,"index":174},{"krate":0,"index":175},{"krate":0,"index":176},{"krate":0,"index":177},{"krate":0,"index":183},{"krate":0,"index":185},{"krate":0,"index":187},{"krate":0,"index":190}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":105},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18167,"byte_end":18177,"line_start":7,"line_end":7,"column_start":9,"column_end":19},"name":"compositor","qualname":"::wayland::compositor","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":106},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":110}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":111},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18312,"byte_end":18323,"line_start":12,"line_end":12,"column_start":9,"column_end":20},"name":"data_device","qualname":"::wayland::data_device","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":117},{"krate":0,"index":118},{"krate":0,"index":119},{"krate":0,"index":120}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":121},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18526,"byte_end":18532,"line_start":16,"line_end":16,"column_start":9,"column_end":15},"name":"output","qualname":"::wayland::output","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123},{"krate":0,"index":124},{"krate":0,"index":125},{"krate":0,"index":126},{"krate":0,"index":127}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":128},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":18726,"byte_end":18730,"line_start":22,"line_end":22,"column_start":9,"column_end":13},"name":"seat","qualname":"::wayland::seat","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":140},{"krate":0,"index":141},{"krate":0,"index":142},{"krate":0,"index":143},{"krate":0,"index":144}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":145},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19051,"byte_end":19056,"line_start":28,"line_end":28,"column_start":9,"column_end":14},"name":"shell","qualname":"::wayland::shell","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148},{"krate":0,"index":149},{"krate":0,"index":150},{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":154},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19301,"byte_end":19304,"line_start":34,"line_end":34,"column_start":9,"column_end":12},"name":"shm","qualname":"::wayland::shm","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158},{"krate":0,"index":159},{"krate":0,"index":160},{"krate":0,"index":161},{"krate":0,"index":162}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":163},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19492,"byte_end":19505,"line_start":40,"line_end":40,"column_start":9,"column_end":22},"name":"subcompositor","qualname":"::wayland::subcompositor","value":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":166}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":176},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":19788,"byte_end":19799,"line_start":49,"line_end":49,"column_start":8,"column_end":19},"name":"get_display","qualname":"::wayland::get_display","value":"pub fn get_display() -> Option<WlDisplay>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":178},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20468,"byte_end":20482,"line_start":67,"line_end":67,"column_start":12,"column_end":26},"name":"sync_roundtrip","qualname":"<WlDisplay>::sync_roundtrip","value":"pub fn sync_roundtrip(&mut Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Synchronous roundtrip","sig":null,"attributes":[{"value":"/ Synchronous roundtrip","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20133,"byte_end":20158,"line_start":60,"line_end":60,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20163,"byte_end":20166,"line_start":61,"line_end":61,"column_start":5,"column_end":8}},{"value":"/ This call will cause a synchonous roundtrip with the wayland server. I will block until all","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20171,"byte_end":20266,"line_start":62,"line_end":62,"column_start":5,"column_end":100}},{"value":"/ pending requests are send to the server and it has processed all of them and send the","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20271,"byte_end":20360,"line_start":63,"line_end":63,"column_start":5,"column_end":94}},{"value":"/ appropriate events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20365,"byte_end":20388,"line_start":64,"line_end":64,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20393,"byte_end":20396,"line_start":65,"line_end":65,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of dispatched events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20401,"byte_end":20456,"line_start":66,"line_end":66,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":179},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21011,"byte_end":21019,"line_start":78,"line_end":78,"column_start":12,"column_end":20},"name":"dispatch","qualname":"<WlDisplay>::dispatch","value":"pub fn dispatch(&mut Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Blocking dispatch","sig":null,"attributes":[{"value":"/ Blocking dispatch","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20710,"byte_end":20731,"line_start":72,"line_end":72,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20736,"byte_end":20739,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ Will dispatch all pending events from the internal buffer to the events iterators.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20744,"byte_end":20830,"line_start":74,"line_end":74,"column_start":5,"column_end":91}},{"value":"/ If the buffer was empty, will read new events from the server socket, blocking if necessary.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20835,"byte_end":20931,"line_start":75,"line_end":75,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20936,"byte_end":20939,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of dispatched events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20944,"byte_end":20999,"line_start":77,"line_end":77,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21530,"byte_end":21546,"line_start":89,"line_end":89,"column_start":12,"column_end":28},"name":"dispatch_pending","qualname":"<WlDisplay>::dispatch_pending","value":"pub fn dispatch_pending(&Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Non-blocking dispatch","sig":null,"attributes":[{"value":"/ Non-blocking dispatch","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21246,"byte_end":21271,"line_start":83,"line_end":83,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21276,"byte_end":21279,"line_start":84,"line_end":84,"column_start":5,"column_end":8}},{"value":"/ Will dispatch all pending events from the internal buffer to the events iterators.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21284,"byte_end":21370,"line_start":85,"line_end":85,"column_start":5,"column_end":91}},{"value":"/ Will not try to read events from the server socket, hence never blocks.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21375,"byte_end":21450,"line_start":86,"line_end":86,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21455,"byte_end":21458,"line_start":87,"line_end":87,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of dispatched events.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21463,"byte_end":21518,"line_start":88,"line_end":88,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":181},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22863,"byte_end":22875,"line_start":114,"line_end":114,"column_start":12,"column_end":24},"name":"prepare_read","qualname":"<WlDisplay>::prepare_read","value":"pub fn prepare_read(&Self) -> Option<ReadEventsGuard>","parent":null,"children":[],"decl_id":null,"docs":" Prepare an conccurent read","sig":null,"attributes":[{"value":"/ Prepare an conccurent read","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21777,"byte_end":21807,"line_start":94,"line_end":94,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21812,"byte_end":21815,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ Will declare your intention to read events from the server socket. Contrarily to `dispatch()`","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21820,"byte_end":21917,"line_start":96,"line_end":96,"column_start":5,"column_end":102}},{"value":"/ or `sync_roundtrip()`, this method can be called several times conccurently.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":21922,"byte_end":22002,"line_start":97,"line_end":97,"column_start":5,"column_end":85}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22007,"byte_end":22010,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ Will return `None` if there are still some events awaiting dispatch. In this case, you need","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22015,"byte_end":22110,"line_start":99,"line_end":99,"column_start":5,"column_end":100}},{"value":"/ to call `dispatch_pending()` before calling this method again.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22115,"byte_end":22181,"line_start":100,"line_end":100,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22186,"byte_end":22189,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ As long as the returned guard is in scope, no events can be dispatched to any event iterator.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22194,"byte_end":22291,"line_start":102,"line_end":102,"column_start":5,"column_end":102}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22296,"byte_end":22299,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ The guard can then be destroyed by two means:","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22304,"byte_end":22353,"line_start":104,"line_end":104,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22358,"byte_end":22361,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/  - Calling its `cancel()` method (or letting it go out of scope): the read intention will","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22366,"byte_end":22459,"line_start":106,"line_end":106,"column_start":5,"column_end":98}},{"value":"/    be cancelled","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22464,"byte_end":22483,"line_start":107,"line_end":107,"column_start":5,"column_end":24}},{"value":"/  - Calling its `read_events()` method: will block until all existing guards are destroyed","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22488,"byte_end":22581,"line_start":108,"line_end":108,"column_start":5,"column_end":98}},{"value":"/    by one of these methods, then events will be read and all blocked `read_events()` calls","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22586,"byte_end":22680,"line_start":109,"line_end":109,"column_start":5,"column_end":99}},{"value":"/    will return.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22685,"byte_end":22704,"line_start":110,"line_end":110,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22709,"byte_end":22712,"line_start":111,"line_end":111,"column_start":5,"column_end":8}},{"value":"/ This call will otherwise not block on the server socket if it is empty, and return","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22717,"byte_end":22803,"line_start":112,"line_end":112,"column_start":5,"column_end":91}},{"value":"/ an io error `WouldBlock` in such cases.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":22808,"byte_end":22851,"line_start":113,"line_end":113,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23421,"byte_end":23426,"line_start":125,"line_end":125,"column_start":12,"column_end":17},"name":"flush","qualname":"<WlDisplay>::flush","value":"pub fn flush(&Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Non-blocking write to the server","sig":null,"attributes":[{"value":"/ Non-blocking write to the server","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23131,"byte_end":23167,"line_start":119,"line_end":119,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23172,"byte_end":23175,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ Will write as many requests as possible to the server socket. Never blocks: if not all","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23180,"byte_end":23270,"line_start":121,"line_end":121,"column_start":5,"column_end":95}},{"value":"/ requests coul be written, will return an io error `WouldBlock`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23275,"byte_end":23342,"line_start":122,"line_end":122,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23347,"byte_end":23350,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ On success returns the number of written requests.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23355,"byte_end":23409,"line_start":124,"line_end":124,"column_start":5,"column_end":59}}]},{"kind":"Struct","id":{"krate":0,"index":185},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23918,"byte_end":23933,"line_start":140,"line_end":140,"column_start":12,"column_end":27},"name":"ReadEventsGuard","qualname":"::wayland::ReadEventsGuard","value":"ReadEventsGuard {  }","parent":null,"children":[{"krate":0,"index":186}],"decl_id":null,"docs":" A guard over a read intention.","sig":null,"attributes":[{"value":"/ A guard over a read intention.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23805,"byte_end":23839,"line_start":137,"line_end":137,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23840,"byte_end":23843,"line_start":138,"line_end":138,"column_start":1,"column_end":4}},{"value":"/ See `WlDisplay::prepare_read()` for details about its use.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23844,"byte_end":23906,"line_start":139,"line_end":139,"column_start":1,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24159,"byte_end":24170,"line_start":149,"line_end":149,"column_start":12,"column_end":23},"name":"read_events","qualname":"<ReadEventsGuard>::read_events","value":"pub fn read_events(Self) -> io::Result<i32>","parent":null,"children":[],"decl_id":null,"docs":" Read events","sig":null,"attributes":[{"value":"/ Read events","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23995,"byte_end":24010,"line_start":145,"line_end":145,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24015,"byte_end":24018,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Reads events from the server socket. If other `ReadEventsGuard` exists, will block","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24023,"byte_end":24109,"line_start":147,"line_end":147,"column_start":5,"column_end":91}},{"value":"/ until they are all destroyed.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24114,"byte_end":24147,"line_start":148,"line_end":148,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":189},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24680,"byte_end":24686,"line_start":161,"line_end":161,"column_start":12,"column_end":18},"name":"cancel","qualname":"<ReadEventsGuard>::cancel","value":"pub fn cancel(Self)","parent":null,"children":[],"decl_id":null,"docs":" Cancel the read","sig":null,"attributes":[{"value":"/ Cancel the read","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24487,"byte_end":24506,"line_start":156,"line_end":156,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24511,"byte_end":24514,"line_start":157,"line_end":157,"column_start":5,"column_end":8}},{"value":"/ Will cancel the read intention associated with this guard. Never blocks.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24519,"byte_end":24595,"line_start":158,"line_end":158,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24600,"byte_end":24603,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ Has the same effet as letting the guard go out of scope.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24608,"byte_end":24668,"line_start":160,"line_end":160,"column_start":5,"column_end":65}}]},{"kind":"Trait","id":{"krate":0,"index":197},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":395,"byte_end":400,"line_start":24,"line_end":24,"column_start":11,"column_end":16},"name":"Proxy","qualname":"::Proxy","value":"Proxy","parent":null,"children":[{"krate":0,"index":198},{"krate":0,"index":199},{"krate":0,"index":200},{"krate":0,"index":201},{"krate":0,"index":202},{"krate":0,"index":203},{"krate":0,"index":204},{"krate":0,"index":205}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":198},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":410,"byte_end":413,"line_start":25,"line_end":25,"column_start":8,"column_end":11},"name":"ptr","qualname":"::Proxy::ptr","value":"pub fn ptr(&Self) -> *mut wl_proxy","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":199},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":446,"byte_end":455,"line_start":26,"line_end":26,"column_start":8,"column_end":17},"name":"interface","qualname":"::Proxy::interface","value":"pub fn interface() -> *mut wl_interface","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":200},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":581,"byte_end":595,"line_start":28,"line_end":28,"column_start":8,"column_end":22},"name":"interface_name","qualname":"::Proxy::interface_name","value":"pub fn interface_name() -> &'static str","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" The internal name of this interface, as advertized by the registry if it is a global.\n","sig":null,"attributes":[{"value":"/ The internal name of this interface, as advertized by the registry if it is a global.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":484,"byte_end":573,"line_start":27,"line_end":27,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":201},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":692,"byte_end":699,"line_start":30,"line_end":30,"column_start":8,"column_end":15},"name":"version","qualname":"::Proxy::version","value":"pub fn version() -> u32","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" The maximum version of this interface handled by the library.\n","sig":null,"attributes":[{"value":"/ The maximum version of this interface handled by the library.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":619,"byte_end":684,"line_start":29,"line_end":29,"column_start":5,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":202},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":750,"byte_end":752,"line_start":32,"line_end":32,"column_start":8,"column_end":10},"name":"id","qualname":"::Proxy::id","value":"pub fn id(&Self) -> ProxyId","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Get the id of this proxy\n","sig":null,"attributes":[{"value":"/ Get the id of this proxy","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":714,"byte_end":742,"line_start":31,"line_end":31,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":203},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":827,"byte_end":835,"line_start":34,"line_end":34,"column_start":15,"column_end":23},"name":"from_ptr","qualname":"::Proxy::from_ptr","value":"pub unsafe fn from_ptr(*mut wl_proxy) -> Self","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Creates a proxy from a fresh ptr\n","sig":null,"attributes":[{"value":"/ Creates a proxy from a fresh ptr","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":776,"byte_end":812,"line_start":33,"line_end":33,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":204},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1110,"byte_end":1125,"line_start":40,"line_end":40,"column_start":15,"column_end":30},"name":"from_ptr_no_own","qualname":"::Proxy::from_ptr_no_own","value":"pub unsafe fn from_ptr_no_own(*mut wl_proxy) -> Self","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Creates a proxy from a ptr that is managed elsewhere","sig":null,"attributes":[{"value":"/ Creates a proxy from a ptr that is managed elsewhere","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":869,"byte_end":925,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":930,"byte_end":933,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ As opposed to `from_ptr`, this function will not try to","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":938,"byte_end":997,"line_start":37,"line_end":37,"column_start":5,"column_end":64}},{"value":"/ set a listener/dispatcher for this proxy, and thus its","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1002,"byte_end":1060,"line_start":38,"line_end":38,"column_start":5,"column_end":63}},{"value":"/ events won't be available.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1065,"byte_end":1095,"line_start":39,"line_end":39,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":205},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1218,"byte_end":1234,"line_start":42,"line_end":42,"column_start":8,"column_end":24},"name":"set_evt_iterator","qualname":"::Proxy::set_evt_iterator","value":"pub fn set_evt_iterator(&mut Self, &EventIterator)","parent":{"krate":0,"index":197},"children":[],"decl_id":null,"docs":" Set the event iterator associated to this proxy\n","sig":null,"attributes":[{"value":"/ Set the event iterator associated to this proxy","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1159,"byte_end":1210,"line_start":41,"line_end":41,"column_start":5,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":2031},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1329,"byte_end":1336,"line_start":46,"line_end":46,"column_start":12,"column_end":19},"name":"ProxyId","qualname":"::ProxyId","value":"ProxyId {  }","parent":null,"children":[{"krate":0,"index":2032}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":207},"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1657,"byte_end":1669,"line_start":57,"line_end":57,"column_start":8,"column_end":20},"name":"is_available","qualname":"::is_available","value":"pub fn is_available() -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the wayland lib is available","sig":null,"attributes":[{"value":"/ Checks if the wayland lib is available","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1434,"byte_end":1476,"line_start":52,"line_end":52,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1477,"byte_end":1480,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ If the `dlopen` feature is disabled, will always return `true`.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1481,"byte_end":1548,"line_start":54,"line_end":54,"column_start":1,"column_end":68}},{"value":"/ If it is enabled, will return `true` if the wayland-client lib","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1549,"byte_end":1615,"line_start":55,"line_end":55,"column_start":1,"column_end":67}},{"value":"/ is available and can be used.","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":1616,"byte_end":1649,"line_start":56,"line_end":56,"column_start":1,"column_end":34}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":8975,"byte_end":8988,"line_start":16,"line_end":16,"column_start":6,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":20}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":9170,"byte_end":9183,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":22}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":9290,"byte_end":9303,"line_start":30,"line_end":30,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361702,"byte_end":10361711,"line_start":93,"line_end":93,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361736,"byte_end":10361745,"line_start":94,"line_end":94,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361764,"byte_end":10361773,"line_start":95,"line_end":95,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421},{"krate":0,"index":422},{"krate":0,"index":423},{"krate":0,"index":424},{"krate":0,"index":425},{"krate":0,"index":426},{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10362538,"byte_end":10362547,"line_start":112,"line_end":112,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":429}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365248,"byte_end":10365257,"line_start":188,"line_end":188,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368352,"byte_end":10368362,"line_start":260,"line_end":260,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368387,"byte_end":10368397,"line_start":261,"line_end":261,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368416,"byte_end":10368426,"line_start":262,"line_end":262,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":445},{"krate":0,"index":446},{"krate":0,"index":447},{"krate":0,"index":448},{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":451}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369536,"byte_end":10369546,"line_start":282,"line_end":282,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371547,"byte_end":10371557,"line_start":337,"line_end":337,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":458}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372533,"byte_end":10372543,"line_start":357,"line_end":357,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372924,"byte_end":10372934,"line_start":375,"line_end":375,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372959,"byte_end":10372969,"line_start":376,"line_end":376,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372988,"byte_end":10372998,"line_start":377,"line_end":377,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":468},{"krate":0,"index":469},{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472},{"krate":0,"index":473},{"krate":0,"index":474},{"krate":0,"index":475}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374108,"byte_end":10374118,"line_start":397,"line_end":397,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":477}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374914,"byte_end":10374924,"line_start":425,"line_end":425,"column_start":6,"column_end":16},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374944,"byte_end":10374954,"line_start":428,"line_end":428,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":482}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375421,"byte_end":10375433,"line_start":447,"line_end":447,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375458,"byte_end":10375470,"line_start":448,"line_end":448,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375489,"byte_end":10375501,"line_start":449,"line_end":449,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":489},{"krate":0,"index":490},{"krate":0,"index":491},{"krate":0,"index":492},{"krate":0,"index":493},{"krate":0,"index":494},{"krate":0,"index":495},{"krate":0,"index":496}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376475,"byte_end":10376487,"line_start":468,"line_end":468,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":498}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376790,"byte_end":10376802,"line_start":478,"line_end":478,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":502},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378073,"byte_end":10378085,"line_start":507,"line_end":507,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":505}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378813,"byte_end":10378822,"line_start":530,"line_end":530,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378847,"byte_end":10378856,"line_start":531,"line_end":531,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378875,"byte_end":10378884,"line_start":532,"line_end":532,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":512},{"krate":0,"index":513},{"krate":0,"index":514},{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":517},{"krate":0,"index":518},{"krate":0,"index":519}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10379842,"byte_end":10379851,"line_start":551,"line_end":551,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":521}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380174,"byte_end":10380183,"line_start":562,"line_end":562,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527},{"krate":0,"index":528}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382387,"byte_end":10382396,"line_start":612,"line_end":612,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":530}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383006,"byte_end":10383011,"line_start":637,"line_end":637,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383036,"byte_end":10383041,"line_start":638,"line_end":638,"column_start":22,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383060,"byte_end":10383065,"line_start":639,"line_end":639,"column_start":16,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":537},{"krate":0,"index":538},{"krate":0,"index":539},{"krate":0,"index":540},{"krate":0,"index":541},{"krate":0,"index":542},{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384140,"byte_end":10384145,"line_start":659,"line_end":659,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":546}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390582,"byte_end":10390587,"line_start":849,"line_end":849,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":553}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391467,"byte_end":10391472,"line_start":869,"line_end":869,"column_start":15,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392093,"byte_end":10392101,"line_start":890,"line_end":890,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392126,"byte_end":10392134,"line_start":891,"line_end":891,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392153,"byte_end":10392161,"line_start":892,"line_end":892,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563},{"krate":0,"index":564},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":568},{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393257,"byte_end":10393265,"line_start":912,"line_end":912,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":571}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394658,"byte_end":10394666,"line_start":950,"line_end":950,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395166,"byte_end":10395174,"line_start":965,"line_end":965,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":578}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395828,"byte_end":10395839,"line_start":987,"line_end":987,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395864,"byte_end":10395875,"line_start":988,"line_end":988,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395894,"byte_end":10395905,"line_start":989,"line_end":989,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397025,"byte_end":10397036,"line_start":1009,"line_end":1009,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":594}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398094,"byte_end":10398105,"line_start":1042,"line_end":1042,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":606}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399963,"byte_end":10399974,"line_start":1084,"line_end":1084,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":608}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400511,"byte_end":10400523,"line_start":1104,"line_end":1104,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400548,"byte_end":10400560,"line_start":1105,"line_end":1105,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400579,"byte_end":10400591,"line_start":1106,"line_end":1106,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":615},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10401718,"byte_end":10401730,"line_start":1126,"line_end":1126,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403671,"byte_end":10403683,"line_start":1181,"line_end":1181,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":630},{"krate":0,"index":632}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404523,"byte_end":10404535,"line_start":1204,"line_end":1204,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":634}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405077,"byte_end":10405089,"line_start":1225,"line_end":1225,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405114,"byte_end":10405126,"line_start":1226,"line_end":1226,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405145,"byte_end":10405157,"line_start":1227,"line_end":1227,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":641},{"krate":0,"index":642},{"krate":0,"index":643},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":646},{"krate":0,"index":647},{"krate":0,"index":648}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10406284,"byte_end":10406296,"line_start":1247,"line_end":1247,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":650}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411061,"byte_end":10411073,"line_start":1369,"line_end":1369,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":658},{"krate":0,"index":659},{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413869,"byte_end":10413881,"line_start":1428,"line_end":1428,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":662}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414498,"byte_end":10414517,"line_start":1449,"line_end":1449,"column_start":22,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414542,"byte_end":10414561,"line_start":1450,"line_end":1450,"column_start":22,"column_end":41},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414580,"byte_end":10414599,"line_start":1451,"line_end":1451,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":669},{"krate":0,"index":670},{"krate":0,"index":671},{"krate":0,"index":672},{"krate":0,"index":673},{"krate":0,"index":674},{"krate":0,"index":675},{"krate":0,"index":676}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10415619,"byte_end":10415638,"line_start":1470,"line_end":1470,"column_start":28,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10415983,"byte_end":10416002,"line_start":1480,"line_end":1480,"column_start":6,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":682},{"krate":0,"index":683}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417348,"byte_end":10417367,"line_start":1509,"line_end":1509,"column_start":15,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417839,"byte_end":10417846,"line_start":1530,"line_end":1530,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417871,"byte_end":10417878,"line_start":1531,"line_end":1531,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417897,"byte_end":10417904,"line_start":1532,"line_end":1532,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":692},{"krate":0,"index":693},{"krate":0,"index":694},{"krate":0,"index":695},{"krate":0,"index":696},{"krate":0,"index":697},{"krate":0,"index":698},{"krate":0,"index":699}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10418848,"byte_end":10418855,"line_start":1551,"line_end":1551,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419396,"byte_end":10419403,"line_start":1575,"line_end":1575,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":705}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420350,"byte_end":10420357,"line_start":1595,"line_end":1595,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421192,"byte_end":10421206,"line_start":1622,"line_end":1622,"column_start":22,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421231,"byte_end":10421245,"line_start":1623,"line_end":1623,"column_start":22,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421264,"byte_end":10421278,"line_start":1624,"line_end":1624,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715},{"krate":0,"index":716},{"krate":0,"index":717},{"krate":0,"index":718},{"krate":0,"index":719},{"krate":0,"index":720},{"krate":0,"index":721}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422419,"byte_end":10422433,"line_start":1644,"line_end":1644,"column_start":28,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":723}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427792,"byte_end":10427806,"line_start":1792,"line_end":1792,"column_start":6,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":742},{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":752}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436120,"byte_end":10436134,"line_start":1972,"line_end":1972,"column_start":15,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438501,"byte_end":10438510,"line_start":2027,"line_end":2027,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438535,"byte_end":10438544,"line_start":2028,"line_end":2028,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438563,"byte_end":10438572,"line_start":2029,"line_end":2029,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10439675,"byte_end":10439684,"line_start":2049,"line_end":2049,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":771}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441978,"byte_end":10441987,"line_start":2122,"line_end":2122,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":785},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":788},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":793}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455739,"byte_end":10455748,"line_start":2403,"line_end":2403,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456285,"byte_end":10456291,"line_start":2423,"line_end":2423,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456316,"byte_end":10456322,"line_start":2424,"line_end":2424,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456341,"byte_end":10456347,"line_start":2425,"line_end":2425,"column_start":16,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":806},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457429,"byte_end":10457435,"line_start":2445,"line_end":2445,"column_start":28,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":811}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459758,"byte_end":10459764,"line_start":2514,"line_end":2514,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":821},{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462493,"byte_end":10462499,"line_start":2580,"line_end":2580,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463157,"byte_end":10463166,"line_start":2604,"line_end":2604,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463191,"byte_end":10463200,"line_start":2605,"line_end":2605,"column_start":22,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463219,"byte_end":10463228,"line_start":2606,"line_end":2606,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":833},{"krate":0,"index":834},{"krate":0,"index":835},{"krate":0,"index":836},{"krate":0,"index":837},{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464331,"byte_end":10464340,"line_start":2626,"line_end":2626,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470178,"byte_end":10470187,"line_start":2793,"line_end":2793,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":851},{"krate":0,"index":852}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472790,"byte_end":10472799,"line_start":2849,"line_end":2849,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473183,"byte_end":10473193,"line_start":2867,"line_end":2867,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473218,"byte_end":10473228,"line_start":2868,"line_end":2868,"column_start":22,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473247,"byte_end":10473257,"line_start":2869,"line_end":2869,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863},{"krate":0,"index":864},{"krate":0,"index":865},{"krate":0,"index":866},{"krate":0,"index":867},{"krate":0,"index":868}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474367,"byte_end":10474377,"line_start":2889,"line_end":2889,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":870}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480220,"byte_end":10480230,"line_start":3043,"line_end":3043,"column_start":6,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":877}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480586,"byte_end":10480596,"line_start":3056,"line_end":3056,"column_start":15,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":879}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481281,"byte_end":10481288,"line_start":3080,"line_end":3080,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481313,"byte_end":10481320,"line_start":3081,"line_end":3081,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481339,"byte_end":10481346,"line_start":3082,"line_end":3082,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891},{"krate":0,"index":892},{"krate":0,"index":893}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482435,"byte_end":10482442,"line_start":3102,"line_end":3102,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485790,"byte_end":10485797,"line_start":3186,"line_end":3186,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":900}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486147,"byte_end":10486154,"line_start":3199,"line_end":3199,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":902}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486840,"byte_end":10486848,"line_start":3221,"line_end":3221,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486873,"byte_end":10486881,"line_start":3222,"line_end":3222,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486900,"byte_end":10486908,"line_start":3223,"line_end":3223,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":909},{"krate":0,"index":910},{"krate":0,"index":911},{"krate":0,"index":912},{"krate":0,"index":913},{"krate":0,"index":914},{"krate":0,"index":915},{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488004,"byte_end":10488012,"line_start":3243,"line_end":3243,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":918}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495271,"byte_end":10495279,"line_start":3430,"line_end":3430,"column_start":6,"column_end":14},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495299,"byte_end":10495307,"line_start":3433,"line_end":3433,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495721,"byte_end":10495729,"line_start":3453,"line_end":3453,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495754,"byte_end":10495762,"line_start":3454,"line_end":3454,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495781,"byte_end":10495789,"line_start":3455,"line_end":3455,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":938},{"krate":0,"index":939},{"krate":0,"index":940},{"krate":0,"index":941}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10496739,"byte_end":10496747,"line_start":3474,"line_end":3474,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":943}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497052,"byte_end":10497060,"line_start":3485,"line_end":3485,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":948},{"krate":0,"index":949},{"krate":0,"index":950}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498037,"byte_end":10498045,"line_start":3513,"line_end":3513,"column_start":15,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":952}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499324,"byte_end":10499339,"line_start":3548,"line_end":3548,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499364,"byte_end":10499379,"line_start":3549,"line_end":3549,"column_start":22,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499398,"byte_end":10499413,"line_start":3550,"line_end":3550,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":959},{"krate":0,"index":960},{"krate":0,"index":961},{"krate":0,"index":962},{"krate":0,"index":963},{"krate":0,"index":964},{"krate":0,"index":965},{"krate":0,"index":966}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10500405,"byte_end":10500420,"line_start":3569,"line_end":3569,"column_start":28,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":968}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501066,"byte_end":10501081,"line_start":3594,"line_end":3594,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":974}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502617,"byte_end":10502632,"line_start":3627,"line_end":3627,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":976}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505633,"byte_end":10505645,"line_start":3692,"line_end":3692,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505670,"byte_end":10505682,"line_start":3693,"line_end":3693,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505701,"byte_end":10505713,"line_start":3694,"line_end":3694,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":983},{"krate":0,"index":984},{"krate":0,"index":985},{"krate":0,"index":986},{"krate":0,"index":987},{"krate":0,"index":988},{"krate":0,"index":989},{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10506687,"byte_end":10506699,"line_start":3713,"line_end":3713,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":992}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507492,"byte_end":10507504,"line_start":3742,"line_end":3742,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003},{"krate":0,"index":1004},{"krate":0,"index":1005},{"krate":0,"index":1006}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512954,"byte_end":10512966,"line_start":3858,"line_end":3858,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1008}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10327,"byte_end":10339,"line_start":16,"line_end":16,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10364,"byte_end":10376,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10467,"byte_end":10479,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11757,"byte_end":11769,"line_start":64,"line_end":64,"column_start":15,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":52}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11908,"byte_end":11920,"line_start":70,"line_end":70,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":54},{"krate":0,"index":55}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12624,"byte_end":12635,"line_start":26,"line_end":26,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13797,"byte_end":13808,"line_start":61,"line_end":61,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":75}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14483,"byte_end":14494,"line_start":83,"line_end":83,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":77}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14817,"byte_end":14823,"line_start":97,"line_end":97,"column_start":10,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17712,"byte_end":17729,"line_start":177,"line_end":177,"column_start":20,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":96},{"krate":0,"index":97}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17864,"byte_end":17881,"line_start":184,"line_end":184,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":100}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20117,"byte_end":20126,"line_start":59,"line_end":59,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":178},{"krate":0,"index":179},{"krate":0,"index":180},{"krate":0,"index":181},{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23658,"byte_end":23667,"line_start":131,"line_end":131,"column_start":15,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":184}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Inherent","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23973,"byte_end":23988,"line_start":144,"line_end":144,"column_start":6,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":188},{"krate":0,"index":189}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24753,"byte_end":24768,"line_start":166,"line_end":166,"column_start":15,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":191}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":201,"byte_end":204,"line_start":12,"line_end":12,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":32}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":242,"byte_end":248,"line_start":15,"line_end":15,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":56}},{"kind":"Mod","span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/lib.rs","byte_start":259,"byte_end":266,"line_start":17,"line_end":17,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":101}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":8975,"byte_end":8988,"line_start":16,"line_end":16,"column_start":6,"column_end":19},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":17},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":9170,"byte_end":9183,"line_start":24,"line_end":24,"column_start":15,"column_end":28},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":17},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/events.rs","byte_start":9290,"byte_end":9303,"line_start":30,"line_end":30,"column_start":19,"column_end":32},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":17},"to":{"krate":2,"index":5618}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361702,"byte_end":10361711,"line_start":93,"line_end":93,"column_start":22,"column_end":31},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361736,"byte_end":10361745,"line_start":94,"line_end":94,"column_start":22,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10361764,"byte_end":10361773,"line_start":95,"line_end":95,"column_start":16,"column_end":25},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":414},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10362538,"byte_end":10362547,"line_start":112,"line_end":112,"column_start":28,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10365248,"byte_end":10365257,"line_start":188,"line_end":188,"column_start":6,"column_end":15},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368352,"byte_end":10368362,"line_start":260,"line_end":260,"column_start":22,"column_end":32},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368387,"byte_end":10368397,"line_start":261,"line_end":261,"column_start":22,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10368416,"byte_end":10368426,"line_start":262,"line_end":262,"column_start":16,"column_end":26},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":438},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10369536,"byte_end":10369546,"line_start":282,"line_end":282,"column_start":28,"column_end":38},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10371547,"byte_end":10371557,"line_start":337,"line_end":337,"column_start":6,"column_end":16},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":438},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372533,"byte_end":10372543,"line_start":357,"line_end":357,"column_start":15,"column_end":25},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":438},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372924,"byte_end":10372934,"line_start":375,"line_end":375,"column_start":22,"column_end":32},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372959,"byte_end":10372969,"line_start":376,"line_end":376,"column_start":22,"column_end":32},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10372988,"byte_end":10372998,"line_start":377,"line_end":377,"column_start":16,"column_end":26},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":462},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374108,"byte_end":10374118,"line_start":397,"line_end":397,"column_start":28,"column_end":38},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374914,"byte_end":10374924,"line_start":425,"line_end":425,"column_start":6,"column_end":16},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":462},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10374944,"byte_end":10374954,"line_start":428,"line_end":428,"column_start":15,"column_end":25},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":462},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375421,"byte_end":10375433,"line_start":447,"line_end":447,"column_start":22,"column_end":34},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":483},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375458,"byte_end":10375470,"line_start":448,"line_end":448,"column_start":22,"column_end":34},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":483},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10375489,"byte_end":10375501,"line_start":449,"line_end":449,"column_start":16,"column_end":28},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":483},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376475,"byte_end":10376487,"line_start":468,"line_end":468,"column_start":28,"column_end":40},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":483},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10376790,"byte_end":10376802,"line_start":478,"line_end":478,"column_start":6,"column_end":18},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":483},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378073,"byte_end":10378085,"line_start":507,"line_end":507,"column_start":15,"column_end":27},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":483},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378813,"byte_end":10378822,"line_start":530,"line_end":530,"column_start":22,"column_end":31},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378847,"byte_end":10378856,"line_start":531,"line_end":531,"column_start":22,"column_end":31},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10378875,"byte_end":10378884,"line_start":532,"line_end":532,"column_start":16,"column_end":25},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":506},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10379842,"byte_end":10379851,"line_start":551,"line_end":551,"column_start":28,"column_end":37},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10380174,"byte_end":10380183,"line_start":562,"line_end":562,"column_start":6,"column_end":15},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":506},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10382387,"byte_end":10382396,"line_start":612,"line_end":612,"column_start":15,"column_end":24},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":506},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383006,"byte_end":10383011,"line_start":637,"line_end":637,"column_start":22,"column_end":27},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":531},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383036,"byte_end":10383041,"line_start":638,"line_end":638,"column_start":22,"column_end":27},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":531},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10383060,"byte_end":10383065,"line_start":639,"line_end":639,"column_start":16,"column_end":21},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":531},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10384140,"byte_end":10384145,"line_start":659,"line_end":659,"column_start":28,"column_end":33},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":531},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10390582,"byte_end":10390587,"line_start":849,"line_end":849,"column_start":6,"column_end":11},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":531},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10391467,"byte_end":10391472,"line_start":869,"line_end":869,"column_start":15,"column_end":20},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":531},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392093,"byte_end":10392101,"line_start":890,"line_end":890,"column_start":22,"column_end":30},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392126,"byte_end":10392134,"line_start":891,"line_end":891,"column_start":22,"column_end":30},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10392153,"byte_end":10392161,"line_start":892,"line_end":892,"column_start":16,"column_end":24},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":556},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10393257,"byte_end":10393265,"line_start":912,"line_end":912,"column_start":28,"column_end":36},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10394658,"byte_end":10394666,"line_start":950,"line_end":950,"column_start":6,"column_end":14},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":556},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395166,"byte_end":10395174,"line_start":965,"line_end":965,"column_start":15,"column_end":23},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":556},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395828,"byte_end":10395839,"line_start":987,"line_end":987,"column_start":22,"column_end":33},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395864,"byte_end":10395875,"line_start":988,"line_end":988,"column_start":22,"column_end":33},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10395894,"byte_end":10395905,"line_start":989,"line_end":989,"column_start":16,"column_end":27},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":579},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10397025,"byte_end":10397036,"line_start":1009,"line_end":1009,"column_start":28,"column_end":39},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10398094,"byte_end":10398105,"line_start":1042,"line_end":1042,"column_start":6,"column_end":17},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":579},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10399963,"byte_end":10399974,"line_start":1084,"line_end":1084,"column_start":15,"column_end":26},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":579},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400511,"byte_end":10400523,"line_start":1104,"line_end":1104,"column_start":22,"column_end":34},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400548,"byte_end":10400560,"line_start":1105,"line_end":1105,"column_start":22,"column_end":34},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10400579,"byte_end":10400591,"line_start":1106,"line_end":1106,"column_start":16,"column_end":28},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":609},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10401718,"byte_end":10401730,"line_start":1126,"line_end":1126,"column_start":28,"column_end":40},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10403671,"byte_end":10403683,"line_start":1181,"line_end":1181,"column_start":6,"column_end":18},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":609},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10404523,"byte_end":10404535,"line_start":1204,"line_end":1204,"column_start":15,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":609},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405077,"byte_end":10405089,"line_start":1225,"line_end":1225,"column_start":22,"column_end":34},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":635},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405114,"byte_end":10405126,"line_start":1226,"line_end":1226,"column_start":22,"column_end":34},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":635},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10405145,"byte_end":10405157,"line_start":1227,"line_end":1227,"column_start":16,"column_end":28},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":635},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10406284,"byte_end":10406296,"line_start":1247,"line_end":1247,"column_start":28,"column_end":40},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":635},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10411061,"byte_end":10411073,"line_start":1369,"line_end":1369,"column_start":6,"column_end":18},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":635},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10413869,"byte_end":10413881,"line_start":1428,"line_end":1428,"column_start":15,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":635},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414498,"byte_end":10414517,"line_start":1449,"line_end":1449,"column_start":22,"column_end":41},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414542,"byte_end":10414561,"line_start":1450,"line_end":1450,"column_start":22,"column_end":41},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10414580,"byte_end":10414599,"line_start":1451,"line_end":1451,"column_start":16,"column_end":35},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":663},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10415619,"byte_end":10415638,"line_start":1470,"line_end":1470,"column_start":28,"column_end":47},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10415983,"byte_end":10416002,"line_start":1480,"line_end":1480,"column_start":6,"column_end":25},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":663},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417348,"byte_end":10417367,"line_start":1509,"line_end":1509,"column_start":15,"column_end":34},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":663},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417839,"byte_end":10417846,"line_start":1530,"line_end":1530,"column_start":22,"column_end":29},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417871,"byte_end":10417878,"line_start":1531,"line_end":1531,"column_start":22,"column_end":29},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10417897,"byte_end":10417904,"line_start":1532,"line_end":1532,"column_start":16,"column_end":23},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":686},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10418848,"byte_end":10418855,"line_start":1551,"line_end":1551,"column_start":28,"column_end":35},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10419396,"byte_end":10419403,"line_start":1575,"line_end":1575,"column_start":6,"column_end":13},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":686},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10420350,"byte_end":10420357,"line_start":1595,"line_end":1595,"column_start":15,"column_end":22},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421192,"byte_end":10421206,"line_start":1622,"line_end":1622,"column_start":22,"column_end":36},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421231,"byte_end":10421245,"line_start":1623,"line_end":1623,"column_start":22,"column_end":36},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10421264,"byte_end":10421278,"line_start":1624,"line_end":1624,"column_start":16,"column_end":30},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":708},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10422419,"byte_end":10422433,"line_start":1644,"line_end":1644,"column_start":28,"column_end":42},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10427792,"byte_end":10427806,"line_start":1792,"line_end":1792,"column_start":6,"column_end":20},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":708},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10436120,"byte_end":10436134,"line_start":1972,"line_end":1972,"column_start":15,"column_end":29},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":708},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438501,"byte_end":10438510,"line_start":2027,"line_end":2027,"column_start":22,"column_end":31},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438535,"byte_end":10438544,"line_start":2028,"line_end":2028,"column_start":22,"column_end":31},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10438563,"byte_end":10438572,"line_start":2029,"line_end":2029,"column_start":16,"column_end":25},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":756},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10439675,"byte_end":10439684,"line_start":2049,"line_end":2049,"column_start":28,"column_end":37},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10441978,"byte_end":10441987,"line_start":2122,"line_end":2122,"column_start":6,"column_end":15},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":756},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10455739,"byte_end":10455748,"line_start":2403,"line_end":2403,"column_start":15,"column_end":24},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":756},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456285,"byte_end":10456291,"line_start":2423,"line_end":2423,"column_start":22,"column_end":28},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456316,"byte_end":10456322,"line_start":2424,"line_end":2424,"column_start":22,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10456341,"byte_end":10456347,"line_start":2425,"line_end":2425,"column_start":16,"column_end":22},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":796},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10457429,"byte_end":10457435,"line_start":2445,"line_end":2445,"column_start":28,"column_end":34},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10459758,"byte_end":10459764,"line_start":2514,"line_end":2514,"column_start":6,"column_end":12},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":796},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10462493,"byte_end":10462499,"line_start":2580,"line_end":2580,"column_start":15,"column_end":21},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":796},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463157,"byte_end":10463166,"line_start":2604,"line_end":2604,"column_start":22,"column_end":31},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":827},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463191,"byte_end":10463200,"line_start":2605,"line_end":2605,"column_start":22,"column_end":31},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":827},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10463219,"byte_end":10463228,"line_start":2606,"line_end":2606,"column_start":16,"column_end":25},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":827},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10464331,"byte_end":10464340,"line_start":2626,"line_end":2626,"column_start":28,"column_end":37},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":827},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10470178,"byte_end":10470187,"line_start":2793,"line_end":2793,"column_start":6,"column_end":15},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":827},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10472790,"byte_end":10472799,"line_start":2849,"line_end":2849,"column_start":15,"column_end":24},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":827},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473183,"byte_end":10473193,"line_start":2867,"line_end":2867,"column_start":22,"column_end":32},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":855},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473218,"byte_end":10473228,"line_start":2868,"line_end":2868,"column_start":22,"column_end":32},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":855},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10473247,"byte_end":10473257,"line_start":2869,"line_end":2869,"column_start":16,"column_end":26},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":855},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10474367,"byte_end":10474377,"line_start":2889,"line_end":2889,"column_start":28,"column_end":38},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":855},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480220,"byte_end":10480230,"line_start":3043,"line_end":3043,"column_start":6,"column_end":16},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":855},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10480586,"byte_end":10480596,"line_start":3056,"line_end":3056,"column_start":15,"column_end":25},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":855},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481281,"byte_end":10481288,"line_start":3080,"line_end":3080,"column_start":22,"column_end":29},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481313,"byte_end":10481320,"line_start":3081,"line_end":3081,"column_start":22,"column_end":29},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10481339,"byte_end":10481346,"line_start":3082,"line_end":3082,"column_start":16,"column_end":23},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":880},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10482435,"byte_end":10482442,"line_start":3102,"line_end":3102,"column_start":28,"column_end":35},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10485790,"byte_end":10485797,"line_start":3186,"line_end":3186,"column_start":6,"column_end":13},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":880},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486147,"byte_end":10486154,"line_start":3199,"line_end":3199,"column_start":15,"column_end":22},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":880},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486840,"byte_end":10486848,"line_start":3221,"line_end":3221,"column_start":22,"column_end":30},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486873,"byte_end":10486881,"line_start":3222,"line_end":3222,"column_start":22,"column_end":30},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10486900,"byte_end":10486908,"line_start":3223,"line_end":3223,"column_start":16,"column_end":24},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":903},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10488004,"byte_end":10488012,"line_start":3243,"line_end":3243,"column_start":28,"column_end":36},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495271,"byte_end":10495279,"line_start":3430,"line_end":3430,"column_start":6,"column_end":14},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":903},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495299,"byte_end":10495307,"line_start":3433,"line_end":3433,"column_start":15,"column_end":23},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":903},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495721,"byte_end":10495729,"line_start":3453,"line_end":3453,"column_start":22,"column_end":30},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495754,"byte_end":10495762,"line_start":3454,"line_end":3454,"column_start":22,"column_end":30},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10495781,"byte_end":10495789,"line_start":3455,"line_end":3455,"column_start":16,"column_end":24},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":928},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10496739,"byte_end":10496747,"line_start":3474,"line_end":3474,"column_start":28,"column_end":36},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10497052,"byte_end":10497060,"line_start":3485,"line_end":3485,"column_start":6,"column_end":14},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":928},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10498037,"byte_end":10498045,"line_start":3513,"line_end":3513,"column_start":15,"column_end":23},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":928},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499324,"byte_end":10499339,"line_start":3548,"line_end":3548,"column_start":22,"column_end":37},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499364,"byte_end":10499379,"line_start":3549,"line_end":3549,"column_start":22,"column_end":37},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10499398,"byte_end":10499413,"line_start":3550,"line_end":3550,"column_start":16,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":953},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10500405,"byte_end":10500420,"line_start":3569,"line_end":3569,"column_start":28,"column_end":43},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10501066,"byte_end":10501081,"line_start":3594,"line_end":3594,"column_start":6,"column_end":21},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":953},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10502617,"byte_end":10502632,"line_start":3627,"line_end":3627,"column_start":15,"column_end":30},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":953},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505633,"byte_end":10505645,"line_start":3692,"line_end":3692,"column_start":22,"column_end":34},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505670,"byte_end":10505682,"line_start":3693,"line_end":3693,"column_start":22,"column_end":34},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10505701,"byte_end":10505713,"line_start":3694,"line_end":3694,"column_start":16,"column_end":28},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":977},"to":{"krate":0,"index":197}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10506687,"byte_end":10506699,"line_start":3713,"line_end":3713,"column_start":28,"column_end":40},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":6946}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10507492,"byte_end":10507504,"line_start":3742,"line_end":3742,"column_start":6,"column_end":18},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":977},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/Projects/Programming/Rust/tetras/target/rls/debug/build/wayland-client-ffb095d7363c0ef7/out/wayland_client_api.rs","byte_start":10512954,"byte_end":10512966,"line_start":3858,"line_end":3858,"column_start":15,"column_end":27},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":977},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10327,"byte_end":10339,"line_start":16,"line_end":16,"column_start":22,"column_end":34},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10364,"byte_end":10376,"line_start":17,"line_end":17,"column_start":22,"column_end":34},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":2086}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":10467,"byte_end":10479,"line_start":24,"line_end":24,"column_start":6,"column_end":18},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":41},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11757,"byte_end":11769,"line_start":64,"line_end":64,"column_start":15,"column_end":27},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/egl.rs","byte_start":11908,"byte_end":11920,"line_start":70,"line_end":70,"column_start":16,"column_end":28},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":41},"to":{"krate":2,"index":2274}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":12624,"byte_end":12635,"line_start":26,"line_end":26,"column_start":22,"column_end":33},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":70},"to":{"krate":2,"index":2074}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":13797,"byte_end":13808,"line_start":61,"line_end":61,"column_start":6,"column_end":17},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":70},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14483,"byte_end":14494,"line_start":83,"line_end":83,"column_start":15,"column_end":26},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":70},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":14817,"byte_end":14823,"line_start":97,"line_end":97,"column_start":10,"column_end":16},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":78},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17712,"byte_end":17729,"line_start":177,"line_end":177,"column_start":20,"column_end":37},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2274}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/cursor.rs","byte_start":17864,"byte_end":17881,"line_start":184,"line_end":184,"column_start":19,"column_end":36},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":90},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":20117,"byte_end":20126,"line_start":59,"line_end":59,"column_start":6,"column_end":15},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":414},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23658,"byte_end":23667,"line_start":131,"line_end":131,"column_start":15,"column_end":24},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":414},"to":{"krate":2,"index":2298}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":23973,"byte_end":23988,"line_start":144,"line_end":144,"column_start":6,"column_end":21},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":185},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/merlin/.cargo/registry/src/github.com-1ecc6299db9ec823/wayland-client-0.5.12/src/wayland.rs","byte_start":24753,"byte_end":24768,"line_start":166,"line_end":166,"column_start":15,"column_end":30},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":185},"to":{"krate":2,"index":2298}}]}